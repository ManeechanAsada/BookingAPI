//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace tikSystem.Web.Library.agentservice {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="TikAero XML web serviceSoap", Namespace="http://www.tiksystems.com/TikAeroWebService")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BusinessObject))]
    public partial class TikAeroXMLwebservice : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private AgentAuthHeader agentAuthHeaderValueField;
        
        private System.Threading.SendOrPostCallback BoardingClassReadOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemarkAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailabilityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailabilityWithFareLogicOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReadFormOfPaymentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAirportTimezoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTicketsUsedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTicketsRefundedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTicketsExpiredOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTicketsCancelledOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTicketsNotFlownOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPaymentApprovalsOperationCompleted;
        
        private System.Threading.SendOrPostCallback TicketReadOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCashbookPaymentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCashbookPaymentsSummaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCashbookChargesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBookingFeeAccountedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBookingFeeBookedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBookingFeeVoidedOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreditCardPaymentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceFeesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceFeesByGroupsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBookingsThisUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPassengerProfileSegmentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOutstandingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCorporateAgencyClientsOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitializeUserAccountIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback AgencyRegistrationInsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueueMailOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback PassengerRoleReadOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAgencyCommissionDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAgencyTicketSalesOperationCompleted;
        
        private System.Threading.SendOrPostCallback MemberLevelReadOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckUniqueMailAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAgencyAccountTransactionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveBookingCreditCardOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveBookingPaymentOperationCompleted;
        
        private System.Threading.SendOrPostCallback SavePaymentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAgencyAccountTopUpOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAgencyAccountBalanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdjustSubAgencyAccountBalanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddNewAgencyOperationCompleted;
        
        private System.Threading.SendOrPostCallback AgencyReadOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExchangeRateReadOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateAgencyOperationCompleted;
        
        private System.Threading.SendOrPostCallback AgencyAccountAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback AgencyAccountVoidOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExternalPaymentListAgencyTopUpOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateApprovalOperationCompleted;
        
        private System.Threading.SendOrPostCallback SingleFlightQuoteSummaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRecordLocatorOperationCompleted;
        
        private System.Threading.SendOrPostCallback SegmentFeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SpecialServiceFeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SpecialServiceReadOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertPaymentApprovalOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePaymentApprovalOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTourOperatorsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVendorTourOperatorOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTourOperatorCodeMappingReadOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSessionlessFlightAvailabilityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSessionlessLowFareFinderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSessionlessAirportOriginsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSessionlessAirportDestinationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSessionlessCurrenciesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSessionlessCountryOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReleaseSessionlessFlightInventorySessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback SessionlessSingleFlightQuoteSummaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSessionlessCompactFlightAvailabilityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSessionlessBinRangeSearchOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSessionlessFeesDefinitionOperationCompleted;
        
        private System.Threading.SendOrPostCallback SessionlessExternalPaymentAddPaymentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBaggageFeeOptionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExternalPaymentAddPaymentOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveBookingMultipleFormOfPaymentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailabiletyOperationCompleted;
        
        private System.Threading.SendOrPostCallback SpecialServiceInventoryReadOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddFeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPassengerRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSpecialServicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessRefundVoucherOperationCompleted;
        
        private System.Threading.SendOrPostCallback ViewBookingChangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateBookingChangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitiateBookingChangeXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActiveBookingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFlownBookingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBookingHistorysListOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePassengerCheckinDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBookingClassesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFlightsFLIFOOperationCompleted;
        
        private System.Threading.SendOrPostCallback LowFareFinderAllowOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBookingHistoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBinRangeSearchOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFlightDailyCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFlightDailyCountXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback AccuralQuoteOperationCompleted;
        
        private System.Threading.SendOrPostCallback AgencyDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActivitiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidCreditCardOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidCreditCardAdjustOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompleteRemarkOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReleaseFlightInventorySessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTicketSalesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBookingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback BookingLogonOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback TravelAgentLogonOperationCompleted;
        
        private System.Threading.SendOrPostCallback ClientLogonOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFormOfPaymentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFormOfPaymentSubTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPaymentSubTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFormOfPaymentSubtypeFeesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAgencySessionProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPassengerTitlesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBookingOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddInfantOperationCompleted;
        
        private System.Threading.SendOrPostCallback CalculateBookingCreateFeesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CalculateBookingChangeFeesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CalculateNameChangeFeesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CalculateSeatAssignmentFeesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CalculateSpecialServiceFeesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CalculateNewFeesOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestWebServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetItineraryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSeatMapOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSeatMapLayoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPassengerDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckInSaveOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveBookingHeaderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCountryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLanguagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCurrenciesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRemarkTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback PaymentSaveOperationCompleted;
        
        private System.Threading.SendOrPostCallback PaymentSaveAdjustOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveBookingOperationCompleted;
        
        private System.Threading.SendOrPostCallback SplitBookingOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddFlightOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeSegmentAddFlightOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCompactFlightAvailabilityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFlightAvailabilityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLowFareFinderOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReturnAirportDestinationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAirlinesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReturnAirportOriginsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActivityTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SegmentCancelOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReturnItineraryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserListOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserReadOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVouchersOperationCompleted;
        
        private System.Threading.SendOrPostCallback CalculateExchangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBookingSegmentCheckInOperationCompleted;
        
        private System.Threading.SendOrPostCallback BoardPassengersOperationCompleted;
        
        private System.Threading.SendOrPostCallback OffLoadPassengerOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserSaveOperationCompleted;
        
        private System.Threading.SendOrPostCallback NewUserSaveOperationCompleted;
        
        private System.Threading.SendOrPostCallback ClientSaveOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddClientPassengerListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ClientReadOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateClientProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessLinkserCreditCardOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBookingFeesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFeesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFeesDefinitionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClientSessionProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCorporateSessionProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClientPassengerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTicketsIssuedOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public TikAeroXMLwebservice() {
            this.Url = global::tikSystem.Web.Library.Properties.Settings.Default.tikSystem_Web_Library_agentservice_TikAero_x0020_XML_x0020_web_x0020_service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public AgentAuthHeader AgentAuthHeaderValue {
            get {
                return this.agentAuthHeaderValueField;
            }
            set {
                this.agentAuthHeaderValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event BoardingClassReadCompletedEventHandler BoardingClassReadCompleted;
        
        /// <remarks/>
        public event RemarkAddCompletedEventHandler RemarkAddCompleted;
        
        /// <remarks/>
        public event GetAvailabilityCompletedEventHandler GetAvailabilityCompleted;
        
        /// <remarks/>
        public event GetAvailabilityWithFareLogicCompletedEventHandler GetAvailabilityWithFareLogicCompleted;
        
        /// <remarks/>
        public event ReadFormOfPaymentCompletedEventHandler ReadFormOfPaymentCompleted;
        
        /// <remarks/>
        public event GetAirportTimezoneCompletedEventHandler GetAirportTimezoneCompleted;
        
        /// <remarks/>
        public event GetTicketsUsedCompletedEventHandler GetTicketsUsedCompleted;
        
        /// <remarks/>
        public event GetTicketsRefundedCompletedEventHandler GetTicketsRefundedCompleted;
        
        /// <remarks/>
        public event GetTicketsExpiredCompletedEventHandler GetTicketsExpiredCompleted;
        
        /// <remarks/>
        public event GetTicketsCancelledCompletedEventHandler GetTicketsCancelledCompleted;
        
        /// <remarks/>
        public event GetTicketsNotFlownCompletedEventHandler GetTicketsNotFlownCompleted;
        
        /// <remarks/>
        public event GetPaymentApprovalsCompletedEventHandler GetPaymentApprovalsCompleted;
        
        /// <remarks/>
        public event TicketReadCompletedEventHandler TicketReadCompleted;
        
        /// <remarks/>
        public event GetCashbookPaymentsCompletedEventHandler GetCashbookPaymentsCompleted;
        
        /// <remarks/>
        public event GetCashbookPaymentsSummaryCompletedEventHandler GetCashbookPaymentsSummaryCompleted;
        
        /// <remarks/>
        public event GetCashbookChargesCompletedEventHandler GetCashbookChargesCompleted;
        
        /// <remarks/>
        public event GetBookingFeeAccountedCompletedEventHandler GetBookingFeeAccountedCompleted;
        
        /// <remarks/>
        public event GetBookingFeeBookedCompletedEventHandler GetBookingFeeBookedCompleted;
        
        /// <remarks/>
        public event GetBookingFeeVoidedCompletedEventHandler GetBookingFeeVoidedCompleted;
        
        /// <remarks/>
        public event CreditCardPaymentCompletedEventHandler CreditCardPaymentCompleted;
        
        /// <remarks/>
        public event GetServiceFeesCompletedEventHandler GetServiceFeesCompleted;
        
        /// <remarks/>
        public event GetServiceFeesByGroupsCompletedEventHandler GetServiceFeesByGroupsCompleted;
        
        /// <remarks/>
        public event GetBookingsThisUserCompletedEventHandler GetBookingsThisUserCompleted;
        
        /// <remarks/>
        public event GetPassengerProfileSegmentsCompletedEventHandler GetPassengerProfileSegmentsCompleted;
        
        /// <remarks/>
        public event GetOutstandingCompletedEventHandler GetOutstandingCompleted;
        
        /// <remarks/>
        public event GetCorporateAgencyClientsCompletedEventHandler GetCorporateAgencyClientsCompleted;
        
        /// <remarks/>
        public event InitializeUserAccountIDCompletedEventHandler InitializeUserAccountIDCompleted;
        
        /// <remarks/>
        public event AgencyRegistrationInsertCompletedEventHandler AgencyRegistrationInsertCompleted;
        
        /// <remarks/>
        public event QueueMailCompletedEventHandler QueueMailCompleted;
        
        /// <remarks/>
        public event GetTransactionCompletedEventHandler GetTransactionCompleted;
        
        /// <remarks/>
        public event PassengerRoleReadCompletedEventHandler PassengerRoleReadCompleted;
        
        /// <remarks/>
        public event GetAgencyCommissionDetailsCompletedEventHandler GetAgencyCommissionDetailsCompleted;
        
        /// <remarks/>
        public event GetAgencyTicketSalesCompletedEventHandler GetAgencyTicketSalesCompleted;
        
        /// <remarks/>
        public event MemberLevelReadCompletedEventHandler MemberLevelReadCompleted;
        
        /// <remarks/>
        public event CheckUniqueMailAddressCompletedEventHandler CheckUniqueMailAddressCompleted;
        
        /// <remarks/>
        public event GetAgencyAccountTransactionsCompletedEventHandler GetAgencyAccountTransactionsCompleted;
        
        /// <remarks/>
        public event SaveBookingCreditCardCompletedEventHandler SaveBookingCreditCardCompleted;
        
        /// <remarks/>
        public event SaveBookingPaymentCompletedEventHandler SaveBookingPaymentCompleted;
        
        /// <remarks/>
        public event SavePaymentCompletedEventHandler SavePaymentCompleted;
        
        /// <remarks/>
        public event GetAgencyAccountTopUpCompletedEventHandler GetAgencyAccountTopUpCompleted;
        
        /// <remarks/>
        public event GetAgencyAccountBalanceCompletedEventHandler GetAgencyAccountBalanceCompleted;
        
        /// <remarks/>
        public event AdjustSubAgencyAccountBalanceCompletedEventHandler AdjustSubAgencyAccountBalanceCompleted;
        
        /// <remarks/>
        public event AddNewAgencyCompletedEventHandler AddNewAgencyCompleted;
        
        /// <remarks/>
        public event AgencyReadCompletedEventHandler AgencyReadCompleted;
        
        /// <remarks/>
        public event ExchangeRateReadCompletedEventHandler ExchangeRateReadCompleted;
        
        /// <remarks/>
        public event UpdateAgencyCompletedEventHandler UpdateAgencyCompleted;
        
        /// <remarks/>
        public event AgencyAccountAddCompletedEventHandler AgencyAccountAddCompleted;
        
        /// <remarks/>
        public event AgencyAccountVoidCompletedEventHandler AgencyAccountVoidCompleted;
        
        /// <remarks/>
        public event ExternalPaymentListAgencyTopUpCompletedEventHandler ExternalPaymentListAgencyTopUpCompleted;
        
        /// <remarks/>
        public event UpdateApprovalCompletedEventHandler UpdateApprovalCompleted;
        
        /// <remarks/>
        public event SingleFlightQuoteSummaryCompletedEventHandler SingleFlightQuoteSummaryCompleted;
        
        /// <remarks/>
        public event GetRecordLocatorCompletedEventHandler GetRecordLocatorCompleted;
        
        /// <remarks/>
        public event SegmentFeeCompletedEventHandler SegmentFeeCompleted;
        
        /// <remarks/>
        public event SpecialServiceFeeCompletedEventHandler SpecialServiceFeeCompleted;
        
        /// <remarks/>
        public event SpecialServiceReadCompletedEventHandler SpecialServiceReadCompleted;
        
        /// <remarks/>
        public event InsertPaymentApprovalCompletedEventHandler InsertPaymentApprovalCompleted;
        
        /// <remarks/>
        public event UpdatePaymentApprovalCompletedEventHandler UpdatePaymentApprovalCompleted;
        
        /// <remarks/>
        public event GetTourOperatorsCompletedEventHandler GetTourOperatorsCompleted;
        
        /// <remarks/>
        public event GetVendorTourOperatorCompletedEventHandler GetVendorTourOperatorCompleted;
        
        /// <remarks/>
        public event GetTourOperatorCodeMappingReadCompletedEventHandler GetTourOperatorCodeMappingReadCompleted;
        
        /// <remarks/>
        public event GetSessionlessFlightAvailabilityCompletedEventHandler GetSessionlessFlightAvailabilityCompleted;
        
        /// <remarks/>
        public event GetSessionlessLowFareFinderCompletedEventHandler GetSessionlessLowFareFinderCompleted;
        
        /// <remarks/>
        public event GetSessionlessAirportOriginsCompletedEventHandler GetSessionlessAirportOriginsCompleted;
        
        /// <remarks/>
        public event GetSessionlessAirportDestinationsCompletedEventHandler GetSessionlessAirportDestinationsCompleted;
        
        /// <remarks/>
        public event GetSessionlessCurrenciesCompletedEventHandler GetSessionlessCurrenciesCompleted;
        
        /// <remarks/>
        public event GetSessionlessCountryCompletedEventHandler GetSessionlessCountryCompleted;
        
        /// <remarks/>
        public event ReleaseSessionlessFlightInventorySessionCompletedEventHandler ReleaseSessionlessFlightInventorySessionCompleted;
        
        /// <remarks/>
        public event SessionlessSingleFlightQuoteSummaryCompletedEventHandler SessionlessSingleFlightQuoteSummaryCompleted;
        
        /// <remarks/>
        public event GetSessionlessCompactFlightAvailabilityCompletedEventHandler GetSessionlessCompactFlightAvailabilityCompleted;
        
        /// <remarks/>
        public event GetSessionlessBinRangeSearchCompletedEventHandler GetSessionlessBinRangeSearchCompleted;
        
        /// <remarks/>
        public event GetSessionlessFeesDefinitionCompletedEventHandler GetSessionlessFeesDefinitionCompleted;
        
        /// <remarks/>
        public event SessionlessExternalPaymentAddPaymentCompletedEventHandler SessionlessExternalPaymentAddPaymentCompleted;
        
        /// <remarks/>
        public event GetBaggageFeeOptionsCompletedEventHandler GetBaggageFeeOptionsCompleted;
        
        /// <remarks/>
        public event ExternalPaymentAddPaymentCompletedEventHandler ExternalPaymentAddPaymentCompleted;
        
        /// <remarks/>
        public event SaveBookingMultipleFormOfPaymentCompletedEventHandler SaveBookingMultipleFormOfPaymentCompleted;
        
        /// <remarks/>
        public event GetAvailabiletyCompletedEventHandler GetAvailabiletyCompleted;
        
        /// <remarks/>
        public event SpecialServiceInventoryReadCompletedEventHandler SpecialServiceInventoryReadCompleted;
        
        /// <remarks/>
        public event AddFeeCompletedEventHandler AddFeeCompleted;
        
        /// <remarks/>
        public event GetPassengerRoleCompletedEventHandler GetPassengerRoleCompleted;
        
        /// <remarks/>
        public event GetSpecialServicesCompletedEventHandler GetSpecialServicesCompleted;
        
        /// <remarks/>
        public event ProcessRefundVoucherCompletedEventHandler ProcessRefundVoucherCompleted;
        
        /// <remarks/>
        public event ViewBookingChangeCompletedEventHandler ViewBookingChangeCompleted;
        
        /// <remarks/>
        public event InitiateBookingChangeCompletedEventHandler InitiateBookingChangeCompleted;
        
        /// <remarks/>
        public event InitiateBookingChangeXMLCompletedEventHandler InitiateBookingChangeXMLCompleted;
        
        /// <remarks/>
        public event GetActiveBookingsCompletedEventHandler GetActiveBookingsCompleted;
        
        /// <remarks/>
        public event GetFlownBookingsCompletedEventHandler GetFlownBookingsCompleted;
        
        /// <remarks/>
        public event GetBookingHistorysListCompletedEventHandler GetBookingHistorysListCompleted;
        
        /// <remarks/>
        public event UpdatePassengerCheckinDetailsCompletedEventHandler UpdatePassengerCheckinDetailsCompleted;
        
        /// <remarks/>
        public event GetBookingClassesCompletedEventHandler GetBookingClassesCompleted;
        
        /// <remarks/>
        public event GetFlightsFLIFOCompletedEventHandler GetFlightsFLIFOCompleted;
        
        /// <remarks/>
        public event LowFareFinderAllowCompletedEventHandler LowFareFinderAllowCompleted;
        
        /// <remarks/>
        public event GetBookingHistoryCompletedEventHandler GetBookingHistoryCompleted;
        
        /// <remarks/>
        public event GetBinRangeSearchCompletedEventHandler GetBinRangeSearchCompleted;
        
        /// <remarks/>
        public event GetFlightDailyCountCompletedEventHandler GetFlightDailyCountCompleted;
        
        /// <remarks/>
        public event GetFlightDailyCountXMLCompletedEventHandler GetFlightDailyCountXMLCompleted;
        
        /// <remarks/>
        public event AccuralQuoteCompletedEventHandler AccuralQuoteCompleted;
        
        /// <remarks/>
        public event AgencyDetailsCompletedEventHandler AgencyDetailsCompleted;
        
        /// <remarks/>
        public event GetActivitiesCompletedEventHandler GetActivitiesCompleted;
        
        /// <remarks/>
        public event ValidCreditCardCompletedEventHandler ValidCreditCardCompleted;
        
        /// <remarks/>
        public event ValidCreditCardAdjustCompletedEventHandler ValidCreditCardAdjustCompleted;
        
        /// <remarks/>
        public event CompleteRemarkCompletedEventHandler CompleteRemarkCompleted;
        
        /// <remarks/>
        public event ReleaseFlightInventorySessionCompletedEventHandler ReleaseFlightInventorySessionCompleted;
        
        /// <remarks/>
        public event GetTicketSalesCompletedEventHandler GetTicketSalesCompleted;
        
        /// <remarks/>
        public event GetBookingsCompletedEventHandler GetBookingsCompleted;
        
        /// <remarks/>
        public event BookingLogonCompletedEventHandler BookingLogonCompleted;
        
        /// <remarks/>
        public event GetClientCompletedEventHandler GetClientCompleted;
        
        /// <remarks/>
        public event TravelAgentLogonCompletedEventHandler TravelAgentLogonCompleted;
        
        /// <remarks/>
        public event ClientLogonCompletedEventHandler ClientLogonCompleted;
        
        /// <remarks/>
        public event GetFormOfPaymentsCompletedEventHandler GetFormOfPaymentsCompleted;
        
        /// <remarks/>
        public event GetFormOfPaymentSubTypesCompletedEventHandler GetFormOfPaymentSubTypesCompleted;
        
        /// <remarks/>
        public event GetPaymentSubTypesCompletedEventHandler GetPaymentSubTypesCompleted;
        
        /// <remarks/>
        public event GetFormOfPaymentSubtypeFeesCompletedEventHandler GetFormOfPaymentSubtypeFeesCompleted;
        
        /// <remarks/>
        public event GetAgencySessionProfileCompletedEventHandler GetAgencySessionProfileCompleted;
        
        /// <remarks/>
        public event GetPassengerTitlesCompletedEventHandler GetPassengerTitlesCompleted;
        
        /// <remarks/>
        public event GetDocumentTypeCompletedEventHandler GetDocumentTypeCompleted;
        
        /// <remarks/>
        public event GetBookingCompletedEventHandler GetBookingCompleted;
        
        /// <remarks/>
        public event AddInfantCompletedEventHandler AddInfantCompleted;
        
        /// <remarks/>
        public event CalculateBookingCreateFeesCompletedEventHandler CalculateBookingCreateFeesCompleted;
        
        /// <remarks/>
        public event CalculateBookingChangeFeesCompletedEventHandler CalculateBookingChangeFeesCompleted;
        
        /// <remarks/>
        public event CalculateNameChangeFeesCompletedEventHandler CalculateNameChangeFeesCompleted;
        
        /// <remarks/>
        public event CalculateSeatAssignmentFeesCompletedEventHandler CalculateSeatAssignmentFeesCompleted;
        
        /// <remarks/>
        public event CalculateSpecialServiceFeesCompletedEventHandler CalculateSpecialServiceFeesCompleted;
        
        /// <remarks/>
        public event CalculateNewFeesCompletedEventHandler CalculateNewFeesCompleted;
        
        /// <remarks/>
        public event TestWebServiceCompletedEventHandler TestWebServiceCompleted;
        
        /// <remarks/>
        public event GetItineraryCompletedEventHandler GetItineraryCompleted;
        
        /// <remarks/>
        public event GetSeatMapCompletedEventHandler GetSeatMapCompleted;
        
        /// <remarks/>
        public event GetSeatMapLayoutCompletedEventHandler GetSeatMapLayoutCompleted;
        
        /// <remarks/>
        public event GetPassengerDetailsCompletedEventHandler GetPassengerDetailsCompleted;
        
        /// <remarks/>
        public event CheckInSaveCompletedEventHandler CheckInSaveCompleted;
        
        /// <remarks/>
        public event SaveBookingHeaderCompletedEventHandler SaveBookingHeaderCompleted;
        
        /// <remarks/>
        public event GetCountryCompletedEventHandler GetCountryCompleted;
        
        /// <remarks/>
        public event GetLanguagesCompletedEventHandler GetLanguagesCompleted;
        
        /// <remarks/>
        public event GetCurrenciesCompletedEventHandler GetCurrenciesCompleted;
        
        /// <remarks/>
        public event GetRemarkTypesCompletedEventHandler GetRemarkTypesCompleted;
        
        /// <remarks/>
        public event PaymentSaveCompletedEventHandler PaymentSaveCompleted;
        
        /// <remarks/>
        public event PaymentSaveAdjustCompletedEventHandler PaymentSaveAdjustCompleted;
        
        /// <remarks/>
        public event SaveBookingCompletedEventHandler SaveBookingCompleted;
        
        /// <remarks/>
        public event SplitBookingCompletedEventHandler SplitBookingCompleted;
        
        /// <remarks/>
        public event AddFlightCompletedEventHandler AddFlightCompleted;
        
        /// <remarks/>
        public event ChangeSegmentAddFlightCompletedEventHandler ChangeSegmentAddFlightCompleted;
        
        /// <remarks/>
        public event GetCompactFlightAvailabilityCompletedEventHandler GetCompactFlightAvailabilityCompleted;
        
        /// <remarks/>
        public event GetFlightAvailabilityCompletedEventHandler GetFlightAvailabilityCompleted;
        
        /// <remarks/>
        public event GetLowFareFinderCompletedEventHandler GetLowFareFinderCompleted;
        
        /// <remarks/>
        public event ReturnAirportDestinationsCompletedEventHandler ReturnAirportDestinationsCompleted;
        
        /// <remarks/>
        public event GetAirlinesCompletedEventHandler GetAirlinesCompleted;
        
        /// <remarks/>
        public event ReturnAirportOriginsCompletedEventHandler ReturnAirportOriginsCompleted;
        
        /// <remarks/>
        public event GetActivityTypesCompletedEventHandler GetActivityTypesCompleted;
        
        /// <remarks/>
        public event SegmentCancelCompletedEventHandler SegmentCancelCompleted;
        
        /// <remarks/>
        public event ReturnItineraryCompletedEventHandler ReturnItineraryCompleted;
        
        /// <remarks/>
        public event GetUserListCompletedEventHandler GetUserListCompleted;
        
        /// <remarks/>
        public event UserReadCompletedEventHandler UserReadCompleted;
        
        /// <remarks/>
        public event GetVouchersCompletedEventHandler GetVouchersCompleted;
        
        /// <remarks/>
        public event CalculateExchangeCompletedEventHandler CalculateExchangeCompleted;
        
        /// <remarks/>
        public event GetBookingSegmentCheckInCompletedEventHandler GetBookingSegmentCheckInCompleted;
        
        /// <remarks/>
        public event BoardPassengersCompletedEventHandler BoardPassengersCompleted;
        
        /// <remarks/>
        public event OffLoadPassengerCompletedEventHandler OffLoadPassengerCompleted;
        
        /// <remarks/>
        public event UserSaveCompletedEventHandler UserSaveCompleted;
        
        /// <remarks/>
        public event NewUserSaveCompletedEventHandler NewUserSaveCompleted;
        
        /// <remarks/>
        public event ClientSaveCompletedEventHandler ClientSaveCompleted;
        
        /// <remarks/>
        public event AddClientPassengerListCompletedEventHandler AddClientPassengerListCompleted;
        
        /// <remarks/>
        public event ClientReadCompletedEventHandler ClientReadCompleted;
        
        /// <remarks/>
        public event CreateClientProfileCompletedEventHandler CreateClientProfileCompleted;
        
        /// <remarks/>
        public event ProcessLinkserCreditCardCompletedEventHandler ProcessLinkserCreditCardCompleted;
        
        /// <remarks/>
        public event GetBookingFeesCompletedEventHandler GetBookingFeesCompleted;
        
        /// <remarks/>
        public event GetFeesCompletedEventHandler GetFeesCompleted;
        
        /// <remarks/>
        public event GetFeesDefinitionCompletedEventHandler GetFeesDefinitionCompleted;
        
        /// <remarks/>
        public event GetClientSessionProfileCompletedEventHandler GetClientSessionProfileCompleted;
        
        /// <remarks/>
        public event GetCorporateSessionProfileCompletedEventHandler GetCorporateSessionProfileCompleted;
        
        /// <remarks/>
        public event GetClientPassengerCompletedEventHandler GetClientPassengerCompleted;
        
        /// <remarks/>
        public event GetTicketsIssuedCompletedEventHandler GetTicketsIssuedCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/BoardingClassRead", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BoardingClassRead(string strBoardingClassCode, string strBoardingClass, string strSortSeq, string strStatus, bool bWrite, string strToken) {
            object[] results = this.Invoke("BoardingClassRead", new object[] {
                        strBoardingClassCode,
                        strBoardingClass,
                        strSortSeq,
                        strStatus,
                        bWrite,
                        strToken});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BoardingClassReadAsync(string strBoardingClassCode, string strBoardingClass, string strSortSeq, string strStatus, bool bWrite, string strToken) {
            this.BoardingClassReadAsync(strBoardingClassCode, strBoardingClass, strSortSeq, strStatus, bWrite, strToken, null);
        }
        
        /// <remarks/>
        public void BoardingClassReadAsync(string strBoardingClassCode, string strBoardingClass, string strSortSeq, string strStatus, bool bWrite, string strToken, object userState) {
            if ((this.BoardingClassReadOperationCompleted == null)) {
                this.BoardingClassReadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBoardingClassReadOperationCompleted);
            }
            this.InvokeAsync("BoardingClassRead", new object[] {
                        strBoardingClassCode,
                        strBoardingClass,
                        strSortSeq,
                        strStatus,
                        bWrite,
                        strToken}, this.BoardingClassReadOperationCompleted, userState);
        }
        
        private void OnBoardingClassReadOperationCompleted(object arg) {
            if ((this.BoardingClassReadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BoardingClassReadCompleted(this, new BoardingClassReadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/RemarkAdd", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RemarkAdd(string strRemarkType, string strBookingRemarkId, string strBookingId, string strClientProfileId, string strNickname, string strRemarkText, string strAgencyCode, string strAddedBy, string strUserId, bool bProtected, bool bWarning, bool bProcessMessage, bool bSystemRemark, System.DateTime timelimit, System.DateTime timelimitUTC) {
            object[] results = this.Invoke("RemarkAdd", new object[] {
                        strRemarkType,
                        strBookingRemarkId,
                        strBookingId,
                        strClientProfileId,
                        strNickname,
                        strRemarkText,
                        strAgencyCode,
                        strAddedBy,
                        strUserId,
                        bProtected,
                        bWarning,
                        bProcessMessage,
                        bSystemRemark,
                        timelimit,
                        timelimitUTC});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RemarkAddAsync(string strRemarkType, string strBookingRemarkId, string strBookingId, string strClientProfileId, string strNickname, string strRemarkText, string strAgencyCode, string strAddedBy, string strUserId, bool bProtected, bool bWarning, bool bProcessMessage, bool bSystemRemark, System.DateTime timelimit, System.DateTime timelimitUTC) {
            this.RemarkAddAsync(strRemarkType, strBookingRemarkId, strBookingId, strClientProfileId, strNickname, strRemarkText, strAgencyCode, strAddedBy, strUserId, bProtected, bWarning, bProcessMessage, bSystemRemark, timelimit, timelimitUTC, null);
        }
        
        /// <remarks/>
        public void RemarkAddAsync(
                    string strRemarkType, 
                    string strBookingRemarkId, 
                    string strBookingId, 
                    string strClientProfileId, 
                    string strNickname, 
                    string strRemarkText, 
                    string strAgencyCode, 
                    string strAddedBy, 
                    string strUserId, 
                    bool bProtected, 
                    bool bWarning, 
                    bool bProcessMessage, 
                    bool bSystemRemark, 
                    System.DateTime timelimit, 
                    System.DateTime timelimitUTC, 
                    object userState) {
            if ((this.RemarkAddOperationCompleted == null)) {
                this.RemarkAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemarkAddOperationCompleted);
            }
            this.InvokeAsync("RemarkAdd", new object[] {
                        strRemarkType,
                        strBookingRemarkId,
                        strBookingId,
                        strClientProfileId,
                        strNickname,
                        strRemarkText,
                        strAgencyCode,
                        strAddedBy,
                        strUserId,
                        bProtected,
                        bWarning,
                        bProcessMessage,
                        bSystemRemark,
                        timelimit,
                        timelimitUTC}, this.RemarkAddOperationCompleted, userState);
        }
        
        private void OnRemarkAddOperationCompleted(object arg) {
            if ((this.RemarkAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemarkAddCompleted(this, new RemarkAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetAvailability", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAvailability(
                    bool FirstSegment, 
                    ref string bookingId, 
                    ref string Origin, 
                    ref string Destination, 
                    ref System.DateTime DateFrom, 
                    ref System.DateTime DateTo, 
                    ref System.DateTime DateBooking, 
                    ref short Adult, 
                    ref short Child, 
                    ref short Infant, 
                    ref short Other, 
                    ref string OtherPassengerType, 
                    ref string BoardingClass, 
                    ref string BookingClass, 
                    ref string DayTimeIndicator, 
                    ref string AgencyCode, 
                    ref string CurrencyCode, 
                    ref string FlightId, 
                    ref string FareId, 
                    ref double MaxAmount, 
                    ref bool NonStopOnly, 
                    ref bool IncludeDeparted, 
                    ref bool IncludeCancelled, 
                    ref bool IncludeWaitlisted, 
                    ref bool IncludeSoldOut, 
                    ref bool Refundable, 
                    ref bool GroupFares, 
                    ref bool ItFaresOnly, 
                    ref string PromotionCode, 
                    ref string FareType) {
            object[] results = this.Invoke("GetAvailability", new object[] {
                        FirstSegment,
                        bookingId,
                        Origin,
                        Destination,
                        DateFrom,
                        DateTo,
                        DateBooking,
                        Adult,
                        Child,
                        Infant,
                        Other,
                        OtherPassengerType,
                        BoardingClass,
                        BookingClass,
                        DayTimeIndicator,
                        AgencyCode,
                        CurrencyCode,
                        FlightId,
                        FareId,
                        MaxAmount,
                        NonStopOnly,
                        IncludeDeparted,
                        IncludeCancelled,
                        IncludeWaitlisted,
                        IncludeSoldOut,
                        Refundable,
                        GroupFares,
                        ItFaresOnly,
                        PromotionCode,
                        FareType});
            bookingId = ((string)(results[1]));
            Origin = ((string)(results[2]));
            Destination = ((string)(results[3]));
            DateFrom = ((System.DateTime)(results[4]));
            DateTo = ((System.DateTime)(results[5]));
            DateBooking = ((System.DateTime)(results[6]));
            Adult = ((short)(results[7]));
            Child = ((short)(results[8]));
            Infant = ((short)(results[9]));
            Other = ((short)(results[10]));
            OtherPassengerType = ((string)(results[11]));
            BoardingClass = ((string)(results[12]));
            BookingClass = ((string)(results[13]));
            DayTimeIndicator = ((string)(results[14]));
            AgencyCode = ((string)(results[15]));
            CurrencyCode = ((string)(results[16]));
            FlightId = ((string)(results[17]));
            FareId = ((string)(results[18]));
            MaxAmount = ((double)(results[19]));
            NonStopOnly = ((bool)(results[20]));
            IncludeDeparted = ((bool)(results[21]));
            IncludeCancelled = ((bool)(results[22]));
            IncludeWaitlisted = ((bool)(results[23]));
            IncludeSoldOut = ((bool)(results[24]));
            Refundable = ((bool)(results[25]));
            GroupFares = ((bool)(results[26]));
            ItFaresOnly = ((bool)(results[27]));
            PromotionCode = ((string)(results[28]));
            FareType = ((string)(results[29]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailabilityAsync(
                    bool FirstSegment, 
                    string bookingId, 
                    string Origin, 
                    string Destination, 
                    System.DateTime DateFrom, 
                    System.DateTime DateTo, 
                    System.DateTime DateBooking, 
                    short Adult, 
                    short Child, 
                    short Infant, 
                    short Other, 
                    string OtherPassengerType, 
                    string BoardingClass, 
                    string BookingClass, 
                    string DayTimeIndicator, 
                    string AgencyCode, 
                    string CurrencyCode, 
                    string FlightId, 
                    string FareId, 
                    double MaxAmount, 
                    bool NonStopOnly, 
                    bool IncludeDeparted, 
                    bool IncludeCancelled, 
                    bool IncludeWaitlisted, 
                    bool IncludeSoldOut, 
                    bool Refundable, 
                    bool GroupFares, 
                    bool ItFaresOnly, 
                    string PromotionCode, 
                    string FareType) {
            this.GetAvailabilityAsync(FirstSegment, bookingId, Origin, Destination, DateFrom, DateTo, DateBooking, Adult, Child, Infant, Other, OtherPassengerType, BoardingClass, BookingClass, DayTimeIndicator, AgencyCode, CurrencyCode, FlightId, FareId, MaxAmount, NonStopOnly, IncludeDeparted, IncludeCancelled, IncludeWaitlisted, IncludeSoldOut, Refundable, GroupFares, ItFaresOnly, PromotionCode, FareType, null);
        }
        
        /// <remarks/>
        public void GetAvailabilityAsync(
                    bool FirstSegment, 
                    string bookingId, 
                    string Origin, 
                    string Destination, 
                    System.DateTime DateFrom, 
                    System.DateTime DateTo, 
                    System.DateTime DateBooking, 
                    short Adult, 
                    short Child, 
                    short Infant, 
                    short Other, 
                    string OtherPassengerType, 
                    string BoardingClass, 
                    string BookingClass, 
                    string DayTimeIndicator, 
                    string AgencyCode, 
                    string CurrencyCode, 
                    string FlightId, 
                    string FareId, 
                    double MaxAmount, 
                    bool NonStopOnly, 
                    bool IncludeDeparted, 
                    bool IncludeCancelled, 
                    bool IncludeWaitlisted, 
                    bool IncludeSoldOut, 
                    bool Refundable, 
                    bool GroupFares, 
                    bool ItFaresOnly, 
                    string PromotionCode, 
                    string FareType, 
                    object userState) {
            if ((this.GetAvailabilityOperationCompleted == null)) {
                this.GetAvailabilityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailabilityOperationCompleted);
            }
            this.InvokeAsync("GetAvailability", new object[] {
                        FirstSegment,
                        bookingId,
                        Origin,
                        Destination,
                        DateFrom,
                        DateTo,
                        DateBooking,
                        Adult,
                        Child,
                        Infant,
                        Other,
                        OtherPassengerType,
                        BoardingClass,
                        BookingClass,
                        DayTimeIndicator,
                        AgencyCode,
                        CurrencyCode,
                        FlightId,
                        FareId,
                        MaxAmount,
                        NonStopOnly,
                        IncludeDeparted,
                        IncludeCancelled,
                        IncludeWaitlisted,
                        IncludeSoldOut,
                        Refundable,
                        GroupFares,
                        ItFaresOnly,
                        PromotionCode,
                        FareType}, this.GetAvailabilityOperationCompleted, userState);
        }
        
        private void OnGetAvailabilityOperationCompleted(object arg) {
            if ((this.GetAvailabilityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailabilityCompleted(this, new GetAvailabilityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetAvailabilityWithFareLogic", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetAvailabilityWithFareLogic(ref string FlightOutboundXml, ref string FlightReturnXml, ref string Origin, ref string Destination, System.DateTime OutboundDate, ref System.DateTime ReturnDate, int iAdult, int iChild, int iInfant, int iOther) {
            object[] results = this.Invoke("GetAvailabilityWithFareLogic", new object[] {
                        FlightOutboundXml,
                        FlightReturnXml,
                        Origin,
                        Destination,
                        OutboundDate,
                        ReturnDate,
                        iAdult,
                        iChild,
                        iInfant,
                        iOther});
            FlightOutboundXml = ((string)(results[1]));
            FlightReturnXml = ((string)(results[2]));
            Origin = ((string)(results[3]));
            Destination = ((string)(results[4]));
            ReturnDate = ((System.DateTime)(results[5]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailabilityWithFareLogicAsync(string FlightOutboundXml, string FlightReturnXml, string Origin, string Destination, System.DateTime OutboundDate, System.DateTime ReturnDate, int iAdult, int iChild, int iInfant, int iOther) {
            this.GetAvailabilityWithFareLogicAsync(FlightOutboundXml, FlightReturnXml, Origin, Destination, OutboundDate, ReturnDate, iAdult, iChild, iInfant, iOther, null);
        }
        
        /// <remarks/>
        public void GetAvailabilityWithFareLogicAsync(string FlightOutboundXml, string FlightReturnXml, string Origin, string Destination, System.DateTime OutboundDate, System.DateTime ReturnDate, int iAdult, int iChild, int iInfant, int iOther, object userState) {
            if ((this.GetAvailabilityWithFareLogicOperationCompleted == null)) {
                this.GetAvailabilityWithFareLogicOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailabilityWithFareLogicOperationCompleted);
            }
            this.InvokeAsync("GetAvailabilityWithFareLogic", new object[] {
                        FlightOutboundXml,
                        FlightReturnXml,
                        Origin,
                        Destination,
                        OutboundDate,
                        ReturnDate,
                        iAdult,
                        iChild,
                        iInfant,
                        iOther}, this.GetAvailabilityWithFareLogicOperationCompleted, userState);
        }
        
        private void OnGetAvailabilityWithFareLogicOperationCompleted(object arg) {
            if ((this.GetAvailabilityWithFareLogicCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailabilityWithFareLogicCompleted(this, new GetAvailabilityWithFareLogicCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/ReadFormOfPayment", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReadFormOfPayment(string strType) {
            object[] results = this.Invoke("ReadFormOfPayment", new object[] {
                        strType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReadFormOfPaymentAsync(string strType) {
            this.ReadFormOfPaymentAsync(strType, null);
        }
        
        /// <remarks/>
        public void ReadFormOfPaymentAsync(string strType, object userState) {
            if ((this.ReadFormOfPaymentOperationCompleted == null)) {
                this.ReadFormOfPaymentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReadFormOfPaymentOperationCompleted);
            }
            this.InvokeAsync("ReadFormOfPayment", new object[] {
                        strType}, this.ReadFormOfPaymentOperationCompleted, userState);
        }
        
        private void OnReadFormOfPaymentOperationCompleted(object arg) {
            if ((this.ReadFormOfPaymentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReadFormOfPaymentCompleted(this, new ReadFormOfPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetAirportTimezone", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAirportTimezone(string strOdOrigin) {
            object[] results = this.Invoke("GetAirportTimezone", new object[] {
                        strOdOrigin});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAirportTimezoneAsync(string strOdOrigin) {
            this.GetAirportTimezoneAsync(strOdOrigin, null);
        }
        
        /// <remarks/>
        public void GetAirportTimezoneAsync(string strOdOrigin, object userState) {
            if ((this.GetAirportTimezoneOperationCompleted == null)) {
                this.GetAirportTimezoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAirportTimezoneOperationCompleted);
            }
            this.InvokeAsync("GetAirportTimezone", new object[] {
                        strOdOrigin}, this.GetAirportTimezoneOperationCompleted, userState);
        }
        
        private void OnGetAirportTimezoneOperationCompleted(object arg) {
            if ((this.GetAirportTimezoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAirportTimezoneCompleted(this, new GetAirportTimezoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetTicketsUsed", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetTicketsUsed(System.DateTime dtReportFrom, System.DateTime dtReportTo, System.DateTime dtFlightFrom, System.DateTime dtFlightTo, string strOrigin, string strDestination, string strAgency, string strAirline, string strFlight) {
            object[] results = this.Invoke("GetTicketsUsed", new object[] {
                        dtReportFrom,
                        dtReportTo,
                        dtFlightFrom,
                        dtFlightTo,
                        strOrigin,
                        strDestination,
                        strAgency,
                        strAirline,
                        strFlight});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetTicketsUsedAsync(System.DateTime dtReportFrom, System.DateTime dtReportTo, System.DateTime dtFlightFrom, System.DateTime dtFlightTo, string strOrigin, string strDestination, string strAgency, string strAirline, string strFlight) {
            this.GetTicketsUsedAsync(dtReportFrom, dtReportTo, dtFlightFrom, dtFlightTo, strOrigin, strDestination, strAgency, strAirline, strFlight, null);
        }
        
        /// <remarks/>
        public void GetTicketsUsedAsync(System.DateTime dtReportFrom, System.DateTime dtReportTo, System.DateTime dtFlightFrom, System.DateTime dtFlightTo, string strOrigin, string strDestination, string strAgency, string strAirline, string strFlight, object userState) {
            if ((this.GetTicketsUsedOperationCompleted == null)) {
                this.GetTicketsUsedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTicketsUsedOperationCompleted);
            }
            this.InvokeAsync("GetTicketsUsed", new object[] {
                        dtReportFrom,
                        dtReportTo,
                        dtFlightFrom,
                        dtFlightTo,
                        strOrigin,
                        strDestination,
                        strAgency,
                        strAirline,
                        strFlight}, this.GetTicketsUsedOperationCompleted, userState);
        }
        
        private void OnGetTicketsUsedOperationCompleted(object arg) {
            if ((this.GetTicketsUsedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTicketsUsedCompleted(this, new GetTicketsUsedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetTicketsRefunded", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetTicketsRefunded(System.DateTime dtReportFrom, System.DateTime dtReportTo, System.DateTime dtFlightFrom, System.DateTime dtFlightTo, string strOrigin, string strDestination, string strAgency, string strAirline, string strFlight) {
            object[] results = this.Invoke("GetTicketsRefunded", new object[] {
                        dtReportFrom,
                        dtReportTo,
                        dtFlightFrom,
                        dtFlightTo,
                        strOrigin,
                        strDestination,
                        strAgency,
                        strAirline,
                        strFlight});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetTicketsRefundedAsync(System.DateTime dtReportFrom, System.DateTime dtReportTo, System.DateTime dtFlightFrom, System.DateTime dtFlightTo, string strOrigin, string strDestination, string strAgency, string strAirline, string strFlight) {
            this.GetTicketsRefundedAsync(dtReportFrom, dtReportTo, dtFlightFrom, dtFlightTo, strOrigin, strDestination, strAgency, strAirline, strFlight, null);
        }
        
        /// <remarks/>
        public void GetTicketsRefundedAsync(System.DateTime dtReportFrom, System.DateTime dtReportTo, System.DateTime dtFlightFrom, System.DateTime dtFlightTo, string strOrigin, string strDestination, string strAgency, string strAirline, string strFlight, object userState) {
            if ((this.GetTicketsRefundedOperationCompleted == null)) {
                this.GetTicketsRefundedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTicketsRefundedOperationCompleted);
            }
            this.InvokeAsync("GetTicketsRefunded", new object[] {
                        dtReportFrom,
                        dtReportTo,
                        dtFlightFrom,
                        dtFlightTo,
                        strOrigin,
                        strDestination,
                        strAgency,
                        strAirline,
                        strFlight}, this.GetTicketsRefundedOperationCompleted, userState);
        }
        
        private void OnGetTicketsRefundedOperationCompleted(object arg) {
            if ((this.GetTicketsRefundedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTicketsRefundedCompleted(this, new GetTicketsRefundedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetTicketsExpired", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetTicketsExpired(System.DateTime dtReportFrom, System.DateTime dtReportTo, System.DateTime dtFlightFrom, System.DateTime dtFlightTo, string strOrigin, string strDestination, string strAgency, string strAirline, string strFlight) {
            object[] results = this.Invoke("GetTicketsExpired", new object[] {
                        dtReportFrom,
                        dtReportTo,
                        dtFlightFrom,
                        dtFlightTo,
                        strOrigin,
                        strDestination,
                        strAgency,
                        strAirline,
                        strFlight});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetTicketsExpiredAsync(System.DateTime dtReportFrom, System.DateTime dtReportTo, System.DateTime dtFlightFrom, System.DateTime dtFlightTo, string strOrigin, string strDestination, string strAgency, string strAirline, string strFlight) {
            this.GetTicketsExpiredAsync(dtReportFrom, dtReportTo, dtFlightFrom, dtFlightTo, strOrigin, strDestination, strAgency, strAirline, strFlight, null);
        }
        
        /// <remarks/>
        public void GetTicketsExpiredAsync(System.DateTime dtReportFrom, System.DateTime dtReportTo, System.DateTime dtFlightFrom, System.DateTime dtFlightTo, string strOrigin, string strDestination, string strAgency, string strAirline, string strFlight, object userState) {
            if ((this.GetTicketsExpiredOperationCompleted == null)) {
                this.GetTicketsExpiredOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTicketsExpiredOperationCompleted);
            }
            this.InvokeAsync("GetTicketsExpired", new object[] {
                        dtReportFrom,
                        dtReportTo,
                        dtFlightFrom,
                        dtFlightTo,
                        strOrigin,
                        strDestination,
                        strAgency,
                        strAirline,
                        strFlight}, this.GetTicketsExpiredOperationCompleted, userState);
        }
        
        private void OnGetTicketsExpiredOperationCompleted(object arg) {
            if ((this.GetTicketsExpiredCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTicketsExpiredCompleted(this, new GetTicketsExpiredCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetTicketsCancelled", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetTicketsCancelled(
                    string strOrigin, 
                    string strDestination, 
                    string strAgency, 
                    string strAirline, 
                    string strFlight, 
                    System.DateTime dtReportFrom, 
                    System.DateTime dtReportTo, 
                    System.DateTime dtFlightFrom, 
                    System.DateTime dtFlightTo, 
                    int intTicketonly, 
                    int intRefundable, 
                    string strProfileID, 
                    string strTicketNumber, 
                    string strFirstName, 
                    string strLastName, 
                    string strPassengerId, 
                    string strBookingSegmentID) {
            object[] results = this.Invoke("GetTicketsCancelled", new object[] {
                        strOrigin,
                        strDestination,
                        strAgency,
                        strAirline,
                        strFlight,
                        dtReportFrom,
                        dtReportTo,
                        dtFlightFrom,
                        dtFlightTo,
                        intTicketonly,
                        intRefundable,
                        strProfileID,
                        strTicketNumber,
                        strFirstName,
                        strLastName,
                        strPassengerId,
                        strBookingSegmentID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetTicketsCancelledAsync(
                    string strOrigin, 
                    string strDestination, 
                    string strAgency, 
                    string strAirline, 
                    string strFlight, 
                    System.DateTime dtReportFrom, 
                    System.DateTime dtReportTo, 
                    System.DateTime dtFlightFrom, 
                    System.DateTime dtFlightTo, 
                    int intTicketonly, 
                    int intRefundable, 
                    string strProfileID, 
                    string strTicketNumber, 
                    string strFirstName, 
                    string strLastName, 
                    string strPassengerId, 
                    string strBookingSegmentID) {
            this.GetTicketsCancelledAsync(strOrigin, strDestination, strAgency, strAirline, strFlight, dtReportFrom, dtReportTo, dtFlightFrom, dtFlightTo, intTicketonly, intRefundable, strProfileID, strTicketNumber, strFirstName, strLastName, strPassengerId, strBookingSegmentID, null);
        }
        
        /// <remarks/>
        public void GetTicketsCancelledAsync(
                    string strOrigin, 
                    string strDestination, 
                    string strAgency, 
                    string strAirline, 
                    string strFlight, 
                    System.DateTime dtReportFrom, 
                    System.DateTime dtReportTo, 
                    System.DateTime dtFlightFrom, 
                    System.DateTime dtFlightTo, 
                    int intTicketonly, 
                    int intRefundable, 
                    string strProfileID, 
                    string strTicketNumber, 
                    string strFirstName, 
                    string strLastName, 
                    string strPassengerId, 
                    string strBookingSegmentID, 
                    object userState) {
            if ((this.GetTicketsCancelledOperationCompleted == null)) {
                this.GetTicketsCancelledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTicketsCancelledOperationCompleted);
            }
            this.InvokeAsync("GetTicketsCancelled", new object[] {
                        strOrigin,
                        strDestination,
                        strAgency,
                        strAirline,
                        strFlight,
                        dtReportFrom,
                        dtReportTo,
                        dtFlightFrom,
                        dtFlightTo,
                        intTicketonly,
                        intRefundable,
                        strProfileID,
                        strTicketNumber,
                        strFirstName,
                        strLastName,
                        strPassengerId,
                        strBookingSegmentID}, this.GetTicketsCancelledOperationCompleted, userState);
        }
        
        private void OnGetTicketsCancelledOperationCompleted(object arg) {
            if ((this.GetTicketsCancelledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTicketsCancelledCompleted(this, new GetTicketsCancelledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetTicketsNotFlown", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetTicketsNotFlown(string strOrigin, string strDestination, string strAgency, string strAirline, string strFlight, System.DateTime dtReportFrom, System.DateTime dtReportTo, System.DateTime dtFlightFrom, System.DateTime dtFlightTo, bool bUnflown, bool bNoShow) {
            object[] results = this.Invoke("GetTicketsNotFlown", new object[] {
                        strOrigin,
                        strDestination,
                        strAgency,
                        strAirline,
                        strFlight,
                        dtReportFrom,
                        dtReportTo,
                        dtFlightFrom,
                        dtFlightTo,
                        bUnflown,
                        bNoShow});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetTicketsNotFlownAsync(string strOrigin, string strDestination, string strAgency, string strAirline, string strFlight, System.DateTime dtReportFrom, System.DateTime dtReportTo, System.DateTime dtFlightFrom, System.DateTime dtFlightTo, bool bUnflown, bool bNoShow) {
            this.GetTicketsNotFlownAsync(strOrigin, strDestination, strAgency, strAirline, strFlight, dtReportFrom, dtReportTo, dtFlightFrom, dtFlightTo, bUnflown, bNoShow, null);
        }
        
        /// <remarks/>
        public void GetTicketsNotFlownAsync(string strOrigin, string strDestination, string strAgency, string strAirline, string strFlight, System.DateTime dtReportFrom, System.DateTime dtReportTo, System.DateTime dtFlightFrom, System.DateTime dtFlightTo, bool bUnflown, bool bNoShow, object userState) {
            if ((this.GetTicketsNotFlownOperationCompleted == null)) {
                this.GetTicketsNotFlownOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTicketsNotFlownOperationCompleted);
            }
            this.InvokeAsync("GetTicketsNotFlown", new object[] {
                        strOrigin,
                        strDestination,
                        strAgency,
                        strAirline,
                        strFlight,
                        dtReportFrom,
                        dtReportTo,
                        dtFlightFrom,
                        dtFlightTo,
                        bUnflown,
                        bNoShow}, this.GetTicketsNotFlownOperationCompleted, userState);
        }
        
        private void OnGetTicketsNotFlownOperationCompleted(object arg) {
            if ((this.GetTicketsNotFlownCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTicketsNotFlownCompleted(this, new GetTicketsNotFlownCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetPaymentApprovals", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPaymentApprovals(System.DateTime dtPaymentFrom, System.DateTime dtPaymentTo, string strDocumentFirst, string strDocumentlast, string strApprovalCode, string strPaymentReference, string strBookingReference, string strNameOnCard, string strStatus, string strType, string strError, string strSubTypes, long lPaymentNumber, double dPaymentAmount, bool bExcludeSubTypes) {
            object[] results = this.Invoke("GetPaymentApprovals", new object[] {
                        dtPaymentFrom,
                        dtPaymentTo,
                        strDocumentFirst,
                        strDocumentlast,
                        strApprovalCode,
                        strPaymentReference,
                        strBookingReference,
                        strNameOnCard,
                        strStatus,
                        strType,
                        strError,
                        strSubTypes,
                        lPaymentNumber,
                        dPaymentAmount,
                        bExcludeSubTypes});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPaymentApprovalsAsync(System.DateTime dtPaymentFrom, System.DateTime dtPaymentTo, string strDocumentFirst, string strDocumentlast, string strApprovalCode, string strPaymentReference, string strBookingReference, string strNameOnCard, string strStatus, string strType, string strError, string strSubTypes, long lPaymentNumber, double dPaymentAmount, bool bExcludeSubTypes) {
            this.GetPaymentApprovalsAsync(dtPaymentFrom, dtPaymentTo, strDocumentFirst, strDocumentlast, strApprovalCode, strPaymentReference, strBookingReference, strNameOnCard, strStatus, strType, strError, strSubTypes, lPaymentNumber, dPaymentAmount, bExcludeSubTypes, null);
        }
        
        /// <remarks/>
        public void GetPaymentApprovalsAsync(
                    System.DateTime dtPaymentFrom, 
                    System.DateTime dtPaymentTo, 
                    string strDocumentFirst, 
                    string strDocumentlast, 
                    string strApprovalCode, 
                    string strPaymentReference, 
                    string strBookingReference, 
                    string strNameOnCard, 
                    string strStatus, 
                    string strType, 
                    string strError, 
                    string strSubTypes, 
                    long lPaymentNumber, 
                    double dPaymentAmount, 
                    bool bExcludeSubTypes, 
                    object userState) {
            if ((this.GetPaymentApprovalsOperationCompleted == null)) {
                this.GetPaymentApprovalsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPaymentApprovalsOperationCompleted);
            }
            this.InvokeAsync("GetPaymentApprovals", new object[] {
                        dtPaymentFrom,
                        dtPaymentTo,
                        strDocumentFirst,
                        strDocumentlast,
                        strApprovalCode,
                        strPaymentReference,
                        strBookingReference,
                        strNameOnCard,
                        strStatus,
                        strType,
                        strError,
                        strSubTypes,
                        lPaymentNumber,
                        dPaymentAmount,
                        bExcludeSubTypes}, this.GetPaymentApprovalsOperationCompleted, userState);
        }
        
        private void OnGetPaymentApprovalsOperationCompleted(object arg) {
            if ((this.GetPaymentApprovalsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPaymentApprovalsCompleted(this, new GetPaymentApprovalsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/TicketRead", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TicketRead(ref string strBookingId, ref string strPassengerId, ref string strSegmentId, ref string strTicketNumber, ref string xmlTaxes, ref bool bReadOnly, ref bool bReturnTax) {
            object[] results = this.Invoke("TicketRead", new object[] {
                        strBookingId,
                        strPassengerId,
                        strSegmentId,
                        strTicketNumber,
                        xmlTaxes,
                        bReadOnly,
                        bReturnTax});
            strBookingId = ((string)(results[1]));
            strPassengerId = ((string)(results[2]));
            strSegmentId = ((string)(results[3]));
            strTicketNumber = ((string)(results[4]));
            xmlTaxes = ((string)(results[5]));
            bReadOnly = ((bool)(results[6]));
            bReturnTax = ((bool)(results[7]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TicketReadAsync(string strBookingId, string strPassengerId, string strSegmentId, string strTicketNumber, string xmlTaxes, bool bReadOnly, bool bReturnTax) {
            this.TicketReadAsync(strBookingId, strPassengerId, strSegmentId, strTicketNumber, xmlTaxes, bReadOnly, bReturnTax, null);
        }
        
        /// <remarks/>
        public void TicketReadAsync(string strBookingId, string strPassengerId, string strSegmentId, string strTicketNumber, string xmlTaxes, bool bReadOnly, bool bReturnTax, object userState) {
            if ((this.TicketReadOperationCompleted == null)) {
                this.TicketReadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTicketReadOperationCompleted);
            }
            this.InvokeAsync("TicketRead", new object[] {
                        strBookingId,
                        strPassengerId,
                        strSegmentId,
                        strTicketNumber,
                        xmlTaxes,
                        bReadOnly,
                        bReturnTax}, this.TicketReadOperationCompleted, userState);
        }
        
        private void OnTicketReadOperationCompleted(object arg) {
            if ((this.TicketReadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TicketReadCompleted(this, new TicketReadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetCashbookPayments", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetCashbookPayments(string strAgency, string strGroup, string strUserId, System.DateTime dtPaymentFrom, System.DateTime dtPaymentTo, string strCashbookId) {
            object[] results = this.Invoke("GetCashbookPayments", new object[] {
                        strAgency,
                        strGroup,
                        strUserId,
                        dtPaymentFrom,
                        dtPaymentTo,
                        strCashbookId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetCashbookPaymentsAsync(string strAgency, string strGroup, string strUserId, System.DateTime dtPaymentFrom, System.DateTime dtPaymentTo, string strCashbookId) {
            this.GetCashbookPaymentsAsync(strAgency, strGroup, strUserId, dtPaymentFrom, dtPaymentTo, strCashbookId, null);
        }
        
        /// <remarks/>
        public void GetCashbookPaymentsAsync(string strAgency, string strGroup, string strUserId, System.DateTime dtPaymentFrom, System.DateTime dtPaymentTo, string strCashbookId, object userState) {
            if ((this.GetCashbookPaymentsOperationCompleted == null)) {
                this.GetCashbookPaymentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCashbookPaymentsOperationCompleted);
            }
            this.InvokeAsync("GetCashbookPayments", new object[] {
                        strAgency,
                        strGroup,
                        strUserId,
                        dtPaymentFrom,
                        dtPaymentTo,
                        strCashbookId}, this.GetCashbookPaymentsOperationCompleted, userState);
        }
        
        private void OnGetCashbookPaymentsOperationCompleted(object arg) {
            if ((this.GetCashbookPaymentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCashbookPaymentsCompleted(this, new GetCashbookPaymentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetCashbookPaymentsSummary", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetCashbookPaymentsSummary(string XmlCashbookPaymentsAll) {
            object[] results = this.Invoke("GetCashbookPaymentsSummary", new object[] {
                        XmlCashbookPaymentsAll});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetCashbookPaymentsSummaryAsync(string XmlCashbookPaymentsAll) {
            this.GetCashbookPaymentsSummaryAsync(XmlCashbookPaymentsAll, null);
        }
        
        /// <remarks/>
        public void GetCashbookPaymentsSummaryAsync(string XmlCashbookPaymentsAll, object userState) {
            if ((this.GetCashbookPaymentsSummaryOperationCompleted == null)) {
                this.GetCashbookPaymentsSummaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCashbookPaymentsSummaryOperationCompleted);
            }
            this.InvokeAsync("GetCashbookPaymentsSummary", new object[] {
                        XmlCashbookPaymentsAll}, this.GetCashbookPaymentsSummaryOperationCompleted, userState);
        }
        
        private void OnGetCashbookPaymentsSummaryOperationCompleted(object arg) {
            if ((this.GetCashbookPaymentsSummaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCashbookPaymentsSummaryCompleted(this, new GetCashbookPaymentsSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetCashbookCharges", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetCashbookCharges(string XmlCashbookCharges, string strCashbookId) {
            object[] results = this.Invoke("GetCashbookCharges", new object[] {
                        XmlCashbookCharges,
                        strCashbookId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetCashbookChargesAsync(string XmlCashbookCharges, string strCashbookId) {
            this.GetCashbookChargesAsync(XmlCashbookCharges, strCashbookId, null);
        }
        
        /// <remarks/>
        public void GetCashbookChargesAsync(string XmlCashbookCharges, string strCashbookId, object userState) {
            if ((this.GetCashbookChargesOperationCompleted == null)) {
                this.GetCashbookChargesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCashbookChargesOperationCompleted);
            }
            this.InvokeAsync("GetCashbookCharges", new object[] {
                        XmlCashbookCharges,
                        strCashbookId}, this.GetCashbookChargesOperationCompleted, userState);
        }
        
        private void OnGetCashbookChargesOperationCompleted(object arg) {
            if ((this.GetCashbookChargesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCashbookChargesCompleted(this, new GetCashbookChargesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetBookingFeeAccounted", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetBookingFeeAccounted(string strAgencyCode, string strUserId, string strFee, System.DateTime dtFrom, System.DateTime dtTo) {
            object[] results = this.Invoke("GetBookingFeeAccounted", new object[] {
                        strAgencyCode,
                        strUserId,
                        strFee,
                        dtFrom,
                        dtTo});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetBookingFeeAccountedAsync(string strAgencyCode, string strUserId, string strFee, System.DateTime dtFrom, System.DateTime dtTo) {
            this.GetBookingFeeAccountedAsync(strAgencyCode, strUserId, strFee, dtFrom, dtTo, null);
        }
        
        /// <remarks/>
        public void GetBookingFeeAccountedAsync(string strAgencyCode, string strUserId, string strFee, System.DateTime dtFrom, System.DateTime dtTo, object userState) {
            if ((this.GetBookingFeeAccountedOperationCompleted == null)) {
                this.GetBookingFeeAccountedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBookingFeeAccountedOperationCompleted);
            }
            this.InvokeAsync("GetBookingFeeAccounted", new object[] {
                        strAgencyCode,
                        strUserId,
                        strFee,
                        dtFrom,
                        dtTo}, this.GetBookingFeeAccountedOperationCompleted, userState);
        }
        
        private void OnGetBookingFeeAccountedOperationCompleted(object arg) {
            if ((this.GetBookingFeeAccountedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBookingFeeAccountedCompleted(this, new GetBookingFeeAccountedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetBookingFeeBooked", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetBookingFeeBooked(string strAgencyCode, string strUserId, string strFee, System.DateTime dtFrom, System.DateTime dtTo) {
            object[] results = this.Invoke("GetBookingFeeBooked", new object[] {
                        strAgencyCode,
                        strUserId,
                        strFee,
                        dtFrom,
                        dtTo});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetBookingFeeBookedAsync(string strAgencyCode, string strUserId, string strFee, System.DateTime dtFrom, System.DateTime dtTo) {
            this.GetBookingFeeBookedAsync(strAgencyCode, strUserId, strFee, dtFrom, dtTo, null);
        }
        
        /// <remarks/>
        public void GetBookingFeeBookedAsync(string strAgencyCode, string strUserId, string strFee, System.DateTime dtFrom, System.DateTime dtTo, object userState) {
            if ((this.GetBookingFeeBookedOperationCompleted == null)) {
                this.GetBookingFeeBookedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBookingFeeBookedOperationCompleted);
            }
            this.InvokeAsync("GetBookingFeeBooked", new object[] {
                        strAgencyCode,
                        strUserId,
                        strFee,
                        dtFrom,
                        dtTo}, this.GetBookingFeeBookedOperationCompleted, userState);
        }
        
        private void OnGetBookingFeeBookedOperationCompleted(object arg) {
            if ((this.GetBookingFeeBookedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBookingFeeBookedCompleted(this, new GetBookingFeeBookedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetBookingFeeVoided", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetBookingFeeVoided(string strAgencyCode, string strUserId, string strFee, System.DateTime dtFrom, System.DateTime dtTo) {
            object[] results = this.Invoke("GetBookingFeeVoided", new object[] {
                        strAgencyCode,
                        strUserId,
                        strFee,
                        dtFrom,
                        dtTo});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetBookingFeeVoidedAsync(string strAgencyCode, string strUserId, string strFee, System.DateTime dtFrom, System.DateTime dtTo) {
            this.GetBookingFeeVoidedAsync(strAgencyCode, strUserId, strFee, dtFrom, dtTo, null);
        }
        
        /// <remarks/>
        public void GetBookingFeeVoidedAsync(string strAgencyCode, string strUserId, string strFee, System.DateTime dtFrom, System.DateTime dtTo, object userState) {
            if ((this.GetBookingFeeVoidedOperationCompleted == null)) {
                this.GetBookingFeeVoidedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBookingFeeVoidedOperationCompleted);
            }
            this.InvokeAsync("GetBookingFeeVoided", new object[] {
                        strAgencyCode,
                        strUserId,
                        strFee,
                        dtFrom,
                        dtTo}, this.GetBookingFeeVoidedOperationCompleted, userState);
        }
        
        private void OnGetBookingFeeVoidedOperationCompleted(object arg) {
            if ((this.GetBookingFeeVoidedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBookingFeeVoidedCompleted(this, new GetBookingFeeVoidedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/CreditCardPayment", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CreditCardPayment(ref string strCCNumber, ref string strTransType, ref string strTransStatus, ref System.DateTime dtFrom, ref System.DateTime dtTo, ref string strCCType, ref string strAgency) {
            object[] results = this.Invoke("CreditCardPayment", new object[] {
                        strCCNumber,
                        strTransType,
                        strTransStatus,
                        dtFrom,
                        dtTo,
                        strCCType,
                        strAgency});
            strCCNumber = ((string)(results[1]));
            strTransType = ((string)(results[2]));
            strTransStatus = ((string)(results[3]));
            dtFrom = ((System.DateTime)(results[4]));
            dtTo = ((System.DateTime)(results[5]));
            strCCType = ((string)(results[6]));
            strAgency = ((string)(results[7]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CreditCardPaymentAsync(string strCCNumber, string strTransType, string strTransStatus, System.DateTime dtFrom, System.DateTime dtTo, string strCCType, string strAgency) {
            this.CreditCardPaymentAsync(strCCNumber, strTransType, strTransStatus, dtFrom, dtTo, strCCType, strAgency, null);
        }
        
        /// <remarks/>
        public void CreditCardPaymentAsync(string strCCNumber, string strTransType, string strTransStatus, System.DateTime dtFrom, System.DateTime dtTo, string strCCType, string strAgency, object userState) {
            if ((this.CreditCardPaymentOperationCompleted == null)) {
                this.CreditCardPaymentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreditCardPaymentOperationCompleted);
            }
            this.InvokeAsync("CreditCardPayment", new object[] {
                        strCCNumber,
                        strTransType,
                        strTransStatus,
                        dtFrom,
                        dtTo,
                        strCCType,
                        strAgency}, this.CreditCardPaymentOperationCompleted, userState);
        }
        
        private void OnCreditCardPaymentOperationCompleted(object arg) {
            if ((this.CreditCardPaymentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreditCardPaymentCompleted(this, new CreditCardPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetServiceFees", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetServiceFees(ref string strOrigin, ref string strDestination, ref string strCurrency, ref string strAgency, ref string strServiceGroup, ref System.DateTime dtFee) {
            object[] results = this.Invoke("GetServiceFees", new object[] {
                        strOrigin,
                        strDestination,
                        strCurrency,
                        strAgency,
                        strServiceGroup,
                        dtFee});
            strOrigin = ((string)(results[1]));
            strDestination = ((string)(results[2]));
            strCurrency = ((string)(results[3]));
            strAgency = ((string)(results[4]));
            strServiceGroup = ((string)(results[5]));
            dtFee = ((System.DateTime)(results[6]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceFeesAsync(string strOrigin, string strDestination, string strCurrency, string strAgency, string strServiceGroup, System.DateTime dtFee) {
            this.GetServiceFeesAsync(strOrigin, strDestination, strCurrency, strAgency, strServiceGroup, dtFee, null);
        }
        
        /// <remarks/>
        public void GetServiceFeesAsync(string strOrigin, string strDestination, string strCurrency, string strAgency, string strServiceGroup, System.DateTime dtFee, object userState) {
            if ((this.GetServiceFeesOperationCompleted == null)) {
                this.GetServiceFeesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceFeesOperationCompleted);
            }
            this.InvokeAsync("GetServiceFees", new object[] {
                        strOrigin,
                        strDestination,
                        strCurrency,
                        strAgency,
                        strServiceGroup,
                        dtFee}, this.GetServiceFeesOperationCompleted, userState);
        }
        
        private void OnGetServiceFeesOperationCompleted(object arg) {
            if ((this.GetServiceFeesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceFeesCompleted(this, new GetServiceFeesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetServiceFeesByGroups", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServiceFeesByGroups(string strXml) {
            object[] results = this.Invoke("GetServiceFeesByGroups", new object[] {
                        strXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceFeesByGroupsAsync(string strXml) {
            this.GetServiceFeesByGroupsAsync(strXml, null);
        }
        
        /// <remarks/>
        public void GetServiceFeesByGroupsAsync(string strXml, object userState) {
            if ((this.GetServiceFeesByGroupsOperationCompleted == null)) {
                this.GetServiceFeesByGroupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceFeesByGroupsOperationCompleted);
            }
            this.InvokeAsync("GetServiceFeesByGroups", new object[] {
                        strXml}, this.GetServiceFeesByGroupsOperationCompleted, userState);
        }
        
        private void OnGetServiceFeesByGroupsOperationCompleted(object arg) {
            if ((this.GetServiceFeesByGroupsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceFeesByGroupsCompleted(this, new GetServiceFeesByGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetBookingsThisUser", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetBookingsThisUser(ref string strAgencyCode, ref string strUserId, ref string strAirline, ref string strFlightNumber, ref System.DateTime dtFlightFrom, ref System.DateTime dtFlightTo, ref string strRecordLocator, ref string strOrigin, ref string strDestination, ref string strPassengerName, ref string strSeatNumber, ref string strTicketNumber, ref string strPhoneNumber, ref System.DateTime dtCreateFrom, ref System.DateTime dtCreateTo) {
            object[] results = this.Invoke("GetBookingsThisUser", new object[] {
                        strAgencyCode,
                        strUserId,
                        strAirline,
                        strFlightNumber,
                        dtFlightFrom,
                        dtFlightTo,
                        strRecordLocator,
                        strOrigin,
                        strDestination,
                        strPassengerName,
                        strSeatNumber,
                        strTicketNumber,
                        strPhoneNumber,
                        dtCreateFrom,
                        dtCreateTo});
            strAgencyCode = ((string)(results[1]));
            strUserId = ((string)(results[2]));
            strAirline = ((string)(results[3]));
            strFlightNumber = ((string)(results[4]));
            dtFlightFrom = ((System.DateTime)(results[5]));
            dtFlightTo = ((System.DateTime)(results[6]));
            strRecordLocator = ((string)(results[7]));
            strOrigin = ((string)(results[8]));
            strDestination = ((string)(results[9]));
            strPassengerName = ((string)(results[10]));
            strSeatNumber = ((string)(results[11]));
            strTicketNumber = ((string)(results[12]));
            strPhoneNumber = ((string)(results[13]));
            dtCreateFrom = ((System.DateTime)(results[14]));
            dtCreateTo = ((System.DateTime)(results[15]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetBookingsThisUserAsync(string strAgencyCode, string strUserId, string strAirline, string strFlightNumber, System.DateTime dtFlightFrom, System.DateTime dtFlightTo, string strRecordLocator, string strOrigin, string strDestination, string strPassengerName, string strSeatNumber, string strTicketNumber, string strPhoneNumber, System.DateTime dtCreateFrom, System.DateTime dtCreateTo) {
            this.GetBookingsThisUserAsync(strAgencyCode, strUserId, strAirline, strFlightNumber, dtFlightFrom, dtFlightTo, strRecordLocator, strOrigin, strDestination, strPassengerName, strSeatNumber, strTicketNumber, strPhoneNumber, dtCreateFrom, dtCreateTo, null);
        }
        
        /// <remarks/>
        public void GetBookingsThisUserAsync(
                    string strAgencyCode, 
                    string strUserId, 
                    string strAirline, 
                    string strFlightNumber, 
                    System.DateTime dtFlightFrom, 
                    System.DateTime dtFlightTo, 
                    string strRecordLocator, 
                    string strOrigin, 
                    string strDestination, 
                    string strPassengerName, 
                    string strSeatNumber, 
                    string strTicketNumber, 
                    string strPhoneNumber, 
                    System.DateTime dtCreateFrom, 
                    System.DateTime dtCreateTo, 
                    object userState) {
            if ((this.GetBookingsThisUserOperationCompleted == null)) {
                this.GetBookingsThisUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBookingsThisUserOperationCompleted);
            }
            this.InvokeAsync("GetBookingsThisUser", new object[] {
                        strAgencyCode,
                        strUserId,
                        strAirline,
                        strFlightNumber,
                        dtFlightFrom,
                        dtFlightTo,
                        strRecordLocator,
                        strOrigin,
                        strDestination,
                        strPassengerName,
                        strSeatNumber,
                        strTicketNumber,
                        strPhoneNumber,
                        dtCreateFrom,
                        dtCreateTo}, this.GetBookingsThisUserOperationCompleted, userState);
        }
        
        private void OnGetBookingsThisUserOperationCompleted(object arg) {
            if ((this.GetBookingsThisUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBookingsThisUserCompleted(this, new GetBookingsThisUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetPassengerProfileSegments", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPassengerProfileSegments(ref string strPassengerProfileId) {
            object[] results = this.Invoke("GetPassengerProfileSegments", new object[] {
                        strPassengerProfileId});
            strPassengerProfileId = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPassengerProfileSegmentsAsync(string strPassengerProfileId) {
            this.GetPassengerProfileSegmentsAsync(strPassengerProfileId, null);
        }
        
        /// <remarks/>
        public void GetPassengerProfileSegmentsAsync(string strPassengerProfileId, object userState) {
            if ((this.GetPassengerProfileSegmentsOperationCompleted == null)) {
                this.GetPassengerProfileSegmentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPassengerProfileSegmentsOperationCompleted);
            }
            this.InvokeAsync("GetPassengerProfileSegments", new object[] {
                        strPassengerProfileId}, this.GetPassengerProfileSegmentsOperationCompleted, userState);
        }
        
        private void OnGetPassengerProfileSegmentsOperationCompleted(object arg) {
            if ((this.GetPassengerProfileSegmentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPassengerProfileSegmentsCompleted(this, new GetPassengerProfileSegmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetOutstanding", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetOutstanding(string strAgencyCode, string strAirline, string strFlightNumber, System.DateTime dtFlightFrom, System.DateTime dtFlightTo, string strOrigin, string strDestination, bool bOffices, bool bAgencies, bool bLastTwentyFourHours, bool bTicketedOnly, int iOlderThanHours, string strLanguage, bool bAccountsPayable) {
            object[] results = this.Invoke("GetOutstanding", new object[] {
                        strAgencyCode,
                        strAirline,
                        strFlightNumber,
                        dtFlightFrom,
                        dtFlightTo,
                        strOrigin,
                        strDestination,
                        bOffices,
                        bAgencies,
                        bLastTwentyFourHours,
                        bTicketedOnly,
                        iOlderThanHours,
                        strLanguage,
                        bAccountsPayable});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetOutstandingAsync(string strAgencyCode, string strAirline, string strFlightNumber, System.DateTime dtFlightFrom, System.DateTime dtFlightTo, string strOrigin, string strDestination, bool bOffices, bool bAgencies, bool bLastTwentyFourHours, bool bTicketedOnly, int iOlderThanHours, string strLanguage, bool bAccountsPayable) {
            this.GetOutstandingAsync(strAgencyCode, strAirline, strFlightNumber, dtFlightFrom, dtFlightTo, strOrigin, strDestination, bOffices, bAgencies, bLastTwentyFourHours, bTicketedOnly, iOlderThanHours, strLanguage, bAccountsPayable, null);
        }
        
        /// <remarks/>
        public void GetOutstandingAsync(string strAgencyCode, string strAirline, string strFlightNumber, System.DateTime dtFlightFrom, System.DateTime dtFlightTo, string strOrigin, string strDestination, bool bOffices, bool bAgencies, bool bLastTwentyFourHours, bool bTicketedOnly, int iOlderThanHours, string strLanguage, bool bAccountsPayable, object userState) {
            if ((this.GetOutstandingOperationCompleted == null)) {
                this.GetOutstandingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOutstandingOperationCompleted);
            }
            this.InvokeAsync("GetOutstanding", new object[] {
                        strAgencyCode,
                        strAirline,
                        strFlightNumber,
                        dtFlightFrom,
                        dtFlightTo,
                        strOrigin,
                        strDestination,
                        bOffices,
                        bAgencies,
                        bLastTwentyFourHours,
                        bTicketedOnly,
                        iOlderThanHours,
                        strLanguage,
                        bAccountsPayable}, this.GetOutstandingOperationCompleted, userState);
        }
        
        private void OnGetOutstandingOperationCompleted(object arg) {
            if ((this.GetOutstandingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOutstandingCompleted(this, new GetOutstandingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetCorporateAgencyClients", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetCorporateAgencyClients(ref string AgencyCode) {
            object[] results = this.Invoke("GetCorporateAgencyClients", new object[] {
                        AgencyCode});
            AgencyCode = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetCorporateAgencyClientsAsync(string AgencyCode) {
            this.GetCorporateAgencyClientsAsync(AgencyCode, null);
        }
        
        /// <remarks/>
        public void GetCorporateAgencyClientsAsync(string AgencyCode, object userState) {
            if ((this.GetCorporateAgencyClientsOperationCompleted == null)) {
                this.GetCorporateAgencyClientsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCorporateAgencyClientsOperationCompleted);
            }
            this.InvokeAsync("GetCorporateAgencyClients", new object[] {
                        AgencyCode}, this.GetCorporateAgencyClientsOperationCompleted, userState);
        }
        
        private void OnGetCorporateAgencyClientsOperationCompleted(object arg) {
            if ((this.GetCorporateAgencyClientsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCorporateAgencyClientsCompleted(this, new GetCorporateAgencyClientsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/InitializeUserAccountID", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InitializeUserAccountID(string UserAccountId) {
            this.Invoke("InitializeUserAccountID", new object[] {
                        UserAccountId});
        }
        
        /// <remarks/>
        public void InitializeUserAccountIDAsync(string UserAccountId) {
            this.InitializeUserAccountIDAsync(UserAccountId, null);
        }
        
        /// <remarks/>
        public void InitializeUserAccountIDAsync(string UserAccountId, object userState) {
            if ((this.InitializeUserAccountIDOperationCompleted == null)) {
                this.InitializeUserAccountIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitializeUserAccountIDOperationCompleted);
            }
            this.InvokeAsync("InitializeUserAccountID", new object[] {
                        UserAccountId}, this.InitializeUserAccountIDOperationCompleted, userState);
        }
        
        private void OnInitializeUserAccountIDOperationCompleted(object arg) {
            if ((this.InitializeUserAccountIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitializeUserAccountIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/AgencyRegistrationInsert", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AgencyRegistrationInsert(
                    string strAgencyName, 
                    string strLegalName, 
                    string strAgencyType, 
                    string strIATA, 
                    string strTaxId, 
                    string strMail, 
                    string strFax, 
                    string strPhone, 
                    string strAddress1, 
                    string strAddress2, 
                    string strStreet, 
                    string strState, 
                    string strDistrict, 
                    string strProvince, 
                    string strCity, 
                    string strZipCode, 
                    string strPoBox, 
                    string strWebsite, 
                    string strContactPerson, 
                    string strLastName, 
                    string strFirstName, 
                    string strTitle, 
                    string strUserLogon, 
                    string strPassword, 
                    string strCountry, 
                    string strCurrency, 
                    string strLanguage, 
                    string strComment) {
            object[] results = this.Invoke("AgencyRegistrationInsert", new object[] {
                        strAgencyName,
                        strLegalName,
                        strAgencyType,
                        strIATA,
                        strTaxId,
                        strMail,
                        strFax,
                        strPhone,
                        strAddress1,
                        strAddress2,
                        strStreet,
                        strState,
                        strDistrict,
                        strProvince,
                        strCity,
                        strZipCode,
                        strPoBox,
                        strWebsite,
                        strContactPerson,
                        strLastName,
                        strFirstName,
                        strTitle,
                        strUserLogon,
                        strPassword,
                        strCountry,
                        strCurrency,
                        strLanguage,
                        strComment});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AgencyRegistrationInsertAsync(
                    string strAgencyName, 
                    string strLegalName, 
                    string strAgencyType, 
                    string strIATA, 
                    string strTaxId, 
                    string strMail, 
                    string strFax, 
                    string strPhone, 
                    string strAddress1, 
                    string strAddress2, 
                    string strStreet, 
                    string strState, 
                    string strDistrict, 
                    string strProvince, 
                    string strCity, 
                    string strZipCode, 
                    string strPoBox, 
                    string strWebsite, 
                    string strContactPerson, 
                    string strLastName, 
                    string strFirstName, 
                    string strTitle, 
                    string strUserLogon, 
                    string strPassword, 
                    string strCountry, 
                    string strCurrency, 
                    string strLanguage, 
                    string strComment) {
            this.AgencyRegistrationInsertAsync(strAgencyName, strLegalName, strAgencyType, strIATA, strTaxId, strMail, strFax, strPhone, strAddress1, strAddress2, strStreet, strState, strDistrict, strProvince, strCity, strZipCode, strPoBox, strWebsite, strContactPerson, strLastName, strFirstName, strTitle, strUserLogon, strPassword, strCountry, strCurrency, strLanguage, strComment, null);
        }
        
        /// <remarks/>
        public void AgencyRegistrationInsertAsync(
                    string strAgencyName, 
                    string strLegalName, 
                    string strAgencyType, 
                    string strIATA, 
                    string strTaxId, 
                    string strMail, 
                    string strFax, 
                    string strPhone, 
                    string strAddress1, 
                    string strAddress2, 
                    string strStreet, 
                    string strState, 
                    string strDistrict, 
                    string strProvince, 
                    string strCity, 
                    string strZipCode, 
                    string strPoBox, 
                    string strWebsite, 
                    string strContactPerson, 
                    string strLastName, 
                    string strFirstName, 
                    string strTitle, 
                    string strUserLogon, 
                    string strPassword, 
                    string strCountry, 
                    string strCurrency, 
                    string strLanguage, 
                    string strComment, 
                    object userState) {
            if ((this.AgencyRegistrationInsertOperationCompleted == null)) {
                this.AgencyRegistrationInsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAgencyRegistrationInsertOperationCompleted);
            }
            this.InvokeAsync("AgencyRegistrationInsert", new object[] {
                        strAgencyName,
                        strLegalName,
                        strAgencyType,
                        strIATA,
                        strTaxId,
                        strMail,
                        strFax,
                        strPhone,
                        strAddress1,
                        strAddress2,
                        strStreet,
                        strState,
                        strDistrict,
                        strProvince,
                        strCity,
                        strZipCode,
                        strPoBox,
                        strWebsite,
                        strContactPerson,
                        strLastName,
                        strFirstName,
                        strTitle,
                        strUserLogon,
                        strPassword,
                        strCountry,
                        strCurrency,
                        strLanguage,
                        strComment}, this.AgencyRegistrationInsertOperationCompleted, userState);
        }
        
        private void OnAgencyRegistrationInsertOperationCompleted(object arg) {
            if ((this.AgencyRegistrationInsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AgencyRegistrationInsertCompleted(this, new AgencyRegistrationInsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/QueueMail", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool QueueMail(
                    string strFromAddress, 
                    string strFromName, 
                    string strToAddress, 
                    string strToAddressCC, 
                    string strToAddressBCC, 
                    string strReplyToAddress, 
                    string strSubject, 
                    string strBody, 
                    string strDocumentType, 
                    string strAttachmentStream, 
                    string strAttachmentFileName, 
                    string strAttachmentFileType, 
                    string strAttachmentParser, 
                    bool bHtmlBody, 
                    bool bConvertAttachmentFromHTML2PDF, 
                    bool bRemoveFromQueue, 
                    string strUserId, 
                    string strBookingId, 
                    string strVoucherId, 
                    string strBookingSegmentID, 
                    string strPassengerId, 
                    string strClientProfileId, 
                    string strDocumentId, 
                    string strLanguageCode) {
            object[] results = this.Invoke("QueueMail", new object[] {
                        strFromAddress,
                        strFromName,
                        strToAddress,
                        strToAddressCC,
                        strToAddressBCC,
                        strReplyToAddress,
                        strSubject,
                        strBody,
                        strDocumentType,
                        strAttachmentStream,
                        strAttachmentFileName,
                        strAttachmentFileType,
                        strAttachmentParser,
                        bHtmlBody,
                        bConvertAttachmentFromHTML2PDF,
                        bRemoveFromQueue,
                        strUserId,
                        strBookingId,
                        strVoucherId,
                        strBookingSegmentID,
                        strPassengerId,
                        strClientProfileId,
                        strDocumentId,
                        strLanguageCode});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void QueueMailAsync(
                    string strFromAddress, 
                    string strFromName, 
                    string strToAddress, 
                    string strToAddressCC, 
                    string strToAddressBCC, 
                    string strReplyToAddress, 
                    string strSubject, 
                    string strBody, 
                    string strDocumentType, 
                    string strAttachmentStream, 
                    string strAttachmentFileName, 
                    string strAttachmentFileType, 
                    string strAttachmentParser, 
                    bool bHtmlBody, 
                    bool bConvertAttachmentFromHTML2PDF, 
                    bool bRemoveFromQueue, 
                    string strUserId, 
                    string strBookingId, 
                    string strVoucherId, 
                    string strBookingSegmentID, 
                    string strPassengerId, 
                    string strClientProfileId, 
                    string strDocumentId, 
                    string strLanguageCode) {
            this.QueueMailAsync(strFromAddress, strFromName, strToAddress, strToAddressCC, strToAddressBCC, strReplyToAddress, strSubject, strBody, strDocumentType, strAttachmentStream, strAttachmentFileName, strAttachmentFileType, strAttachmentParser, bHtmlBody, bConvertAttachmentFromHTML2PDF, bRemoveFromQueue, strUserId, strBookingId, strVoucherId, strBookingSegmentID, strPassengerId, strClientProfileId, strDocumentId, strLanguageCode, null);
        }
        
        /// <remarks/>
        public void QueueMailAsync(
                    string strFromAddress, 
                    string strFromName, 
                    string strToAddress, 
                    string strToAddressCC, 
                    string strToAddressBCC, 
                    string strReplyToAddress, 
                    string strSubject, 
                    string strBody, 
                    string strDocumentType, 
                    string strAttachmentStream, 
                    string strAttachmentFileName, 
                    string strAttachmentFileType, 
                    string strAttachmentParser, 
                    bool bHtmlBody, 
                    bool bConvertAttachmentFromHTML2PDF, 
                    bool bRemoveFromQueue, 
                    string strUserId, 
                    string strBookingId, 
                    string strVoucherId, 
                    string strBookingSegmentID, 
                    string strPassengerId, 
                    string strClientProfileId, 
                    string strDocumentId, 
                    string strLanguageCode, 
                    object userState) {
            if ((this.QueueMailOperationCompleted == null)) {
                this.QueueMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueueMailOperationCompleted);
            }
            this.InvokeAsync("QueueMail", new object[] {
                        strFromAddress,
                        strFromName,
                        strToAddress,
                        strToAddressCC,
                        strToAddressBCC,
                        strReplyToAddress,
                        strSubject,
                        strBody,
                        strDocumentType,
                        strAttachmentStream,
                        strAttachmentFileName,
                        strAttachmentFileType,
                        strAttachmentParser,
                        bHtmlBody,
                        bConvertAttachmentFromHTML2PDF,
                        bRemoveFromQueue,
                        strUserId,
                        strBookingId,
                        strVoucherId,
                        strBookingSegmentID,
                        strPassengerId,
                        strClientProfileId,
                        strDocumentId,
                        strLanguageCode}, this.QueueMailOperationCompleted, userState);
        }
        
        private void OnQueueMailOperationCompleted(object arg) {
            if ((this.QueueMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueueMailCompleted(this, new QueueMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetTransaction", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTransaction(
                    string strOrigin, 
                    string strDestination, 
                    string strAirline, 
                    string strFlight, 
                    string strSegmentType, 
                    string strClientProfileId, 
                    string strPassengerProfileId, 
                    string strVendor, 
                    string strCreditDebit, 
                    System.DateTime dtFlightFrom, 
                    System.DateTime dtFlightTo, 
                    System.DateTime dtTransactionFrom, 
                    System.DateTime dtTransactionTo, 
                    System.DateTime dtExpiryFrom, 
                    System.DateTime dtExpiryTo, 
                    System.DateTime dtVoidFrom, 
                    System.DateTime dtVoidTo, 
                    int iBatch, 
                    bool bAllVoid, 
                    bool bAllExpired, 
                    bool bAuto, 
                    bool bManual, 
                    bool bAllPoint) {
            object[] results = this.Invoke("GetTransaction", new object[] {
                        strOrigin,
                        strDestination,
                        strAirline,
                        strFlight,
                        strSegmentType,
                        strClientProfileId,
                        strPassengerProfileId,
                        strVendor,
                        strCreditDebit,
                        dtFlightFrom,
                        dtFlightTo,
                        dtTransactionFrom,
                        dtTransactionTo,
                        dtExpiryFrom,
                        dtExpiryTo,
                        dtVoidFrom,
                        dtVoidTo,
                        iBatch,
                        bAllVoid,
                        bAllExpired,
                        bAuto,
                        bManual,
                        bAllPoint});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTransactionAsync(
                    string strOrigin, 
                    string strDestination, 
                    string strAirline, 
                    string strFlight, 
                    string strSegmentType, 
                    string strClientProfileId, 
                    string strPassengerProfileId, 
                    string strVendor, 
                    string strCreditDebit, 
                    System.DateTime dtFlightFrom, 
                    System.DateTime dtFlightTo, 
                    System.DateTime dtTransactionFrom, 
                    System.DateTime dtTransactionTo, 
                    System.DateTime dtExpiryFrom, 
                    System.DateTime dtExpiryTo, 
                    System.DateTime dtVoidFrom, 
                    System.DateTime dtVoidTo, 
                    int iBatch, 
                    bool bAllVoid, 
                    bool bAllExpired, 
                    bool bAuto, 
                    bool bManual, 
                    bool bAllPoint) {
            this.GetTransactionAsync(strOrigin, strDestination, strAirline, strFlight, strSegmentType, strClientProfileId, strPassengerProfileId, strVendor, strCreditDebit, dtFlightFrom, dtFlightTo, dtTransactionFrom, dtTransactionTo, dtExpiryFrom, dtExpiryTo, dtVoidFrom, dtVoidTo, iBatch, bAllVoid, bAllExpired, bAuto, bManual, bAllPoint, null);
        }
        
        /// <remarks/>
        public void GetTransactionAsync(
                    string strOrigin, 
                    string strDestination, 
                    string strAirline, 
                    string strFlight, 
                    string strSegmentType, 
                    string strClientProfileId, 
                    string strPassengerProfileId, 
                    string strVendor, 
                    string strCreditDebit, 
                    System.DateTime dtFlightFrom, 
                    System.DateTime dtFlightTo, 
                    System.DateTime dtTransactionFrom, 
                    System.DateTime dtTransactionTo, 
                    System.DateTime dtExpiryFrom, 
                    System.DateTime dtExpiryTo, 
                    System.DateTime dtVoidFrom, 
                    System.DateTime dtVoidTo, 
                    int iBatch, 
                    bool bAllVoid, 
                    bool bAllExpired, 
                    bool bAuto, 
                    bool bManual, 
                    bool bAllPoint, 
                    object userState) {
            if ((this.GetTransactionOperationCompleted == null)) {
                this.GetTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransactionOperationCompleted);
            }
            this.InvokeAsync("GetTransaction", new object[] {
                        strOrigin,
                        strDestination,
                        strAirline,
                        strFlight,
                        strSegmentType,
                        strClientProfileId,
                        strPassengerProfileId,
                        strVendor,
                        strCreditDebit,
                        dtFlightFrom,
                        dtFlightTo,
                        dtTransactionFrom,
                        dtTransactionTo,
                        dtExpiryFrom,
                        dtExpiryTo,
                        dtVoidFrom,
                        dtVoidTo,
                        iBatch,
                        bAllVoid,
                        bAllExpired,
                        bAuto,
                        bManual,
                        bAllPoint}, this.GetTransactionOperationCompleted, userState);
        }
        
        private void OnGetTransactionOperationCompleted(object arg) {
            if ((this.GetTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTransactionCompleted(this, new GetTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/PassengerRoleRead", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet PassengerRoleRead(string strPaxRoleCode, string strPaxRole, string strStatus, bool bWrite, string strLanguage) {
            object[] results = this.Invoke("PassengerRoleRead", new object[] {
                        strPaxRoleCode,
                        strPaxRole,
                        strStatus,
                        bWrite,
                        strLanguage});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void PassengerRoleReadAsync(string strPaxRoleCode, string strPaxRole, string strStatus, bool bWrite, string strLanguage) {
            this.PassengerRoleReadAsync(strPaxRoleCode, strPaxRole, strStatus, bWrite, strLanguage, null);
        }
        
        /// <remarks/>
        public void PassengerRoleReadAsync(string strPaxRoleCode, string strPaxRole, string strStatus, bool bWrite, string strLanguage, object userState) {
            if ((this.PassengerRoleReadOperationCompleted == null)) {
                this.PassengerRoleReadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPassengerRoleReadOperationCompleted);
            }
            this.InvokeAsync("PassengerRoleRead", new object[] {
                        strPaxRoleCode,
                        strPaxRole,
                        strStatus,
                        bWrite,
                        strLanguage}, this.PassengerRoleReadOperationCompleted, userState);
        }
        
        private void OnPassengerRoleReadOperationCompleted(object arg) {
            if ((this.PassengerRoleReadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PassengerRoleReadCompleted(this, new PassengerRoleReadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetAgencyCommissionDetails", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAgencyCommissionDetails(string strAgency, string strOrigin, string strDestination, string strAirline, string strFlight, System.DateTime dtFlightFrom, System.DateTime dtFlightTo, System.DateTime dtSalesFrom, System.DateTime dtSalesTo, string strLanguage, string strStatus, string strOwner, string strCurrency) {
            object[] results = this.Invoke("GetAgencyCommissionDetails", new object[] {
                        strAgency,
                        strOrigin,
                        strDestination,
                        strAirline,
                        strFlight,
                        dtFlightFrom,
                        dtFlightTo,
                        dtSalesFrom,
                        dtSalesTo,
                        strLanguage,
                        strStatus,
                        strOwner,
                        strCurrency});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAgencyCommissionDetailsAsync(string strAgency, string strOrigin, string strDestination, string strAirline, string strFlight, System.DateTime dtFlightFrom, System.DateTime dtFlightTo, System.DateTime dtSalesFrom, System.DateTime dtSalesTo, string strLanguage, string strStatus, string strOwner, string strCurrency) {
            this.GetAgencyCommissionDetailsAsync(strAgency, strOrigin, strDestination, strAirline, strFlight, dtFlightFrom, dtFlightTo, dtSalesFrom, dtSalesTo, strLanguage, strStatus, strOwner, strCurrency, null);
        }
        
        /// <remarks/>
        public void GetAgencyCommissionDetailsAsync(string strAgency, string strOrigin, string strDestination, string strAirline, string strFlight, System.DateTime dtFlightFrom, System.DateTime dtFlightTo, System.DateTime dtSalesFrom, System.DateTime dtSalesTo, string strLanguage, string strStatus, string strOwner, string strCurrency, object userState) {
            if ((this.GetAgencyCommissionDetailsOperationCompleted == null)) {
                this.GetAgencyCommissionDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAgencyCommissionDetailsOperationCompleted);
            }
            this.InvokeAsync("GetAgencyCommissionDetails", new object[] {
                        strAgency,
                        strOrigin,
                        strDestination,
                        strAirline,
                        strFlight,
                        dtFlightFrom,
                        dtFlightTo,
                        dtSalesFrom,
                        dtSalesTo,
                        strLanguage,
                        strStatus,
                        strOwner,
                        strCurrency}, this.GetAgencyCommissionDetailsOperationCompleted, userState);
        }
        
        private void OnGetAgencyCommissionDetailsOperationCompleted(object arg) {
            if ((this.GetAgencyCommissionDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAgencyCommissionDetailsCompleted(this, new GetAgencyCommissionDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetAgencyTicketSales", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAgencyTicketSales(string strAgency, string strCurrency, System.DateTime dtSalesFrom, System.DateTime dtSalesTo) {
            object[] results = this.Invoke("GetAgencyTicketSales", new object[] {
                        strAgency,
                        strCurrency,
                        dtSalesFrom,
                        dtSalesTo});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAgencyTicketSalesAsync(string strAgency, string strCurrency, System.DateTime dtSalesFrom, System.DateTime dtSalesTo) {
            this.GetAgencyTicketSalesAsync(strAgency, strCurrency, dtSalesFrom, dtSalesTo, null);
        }
        
        /// <remarks/>
        public void GetAgencyTicketSalesAsync(string strAgency, string strCurrency, System.DateTime dtSalesFrom, System.DateTime dtSalesTo, object userState) {
            if ((this.GetAgencyTicketSalesOperationCompleted == null)) {
                this.GetAgencyTicketSalesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAgencyTicketSalesOperationCompleted);
            }
            this.InvokeAsync("GetAgencyTicketSales", new object[] {
                        strAgency,
                        strCurrency,
                        dtSalesFrom,
                        dtSalesTo}, this.GetAgencyTicketSalesOperationCompleted, userState);
        }
        
        private void OnGetAgencyTicketSalesOperationCompleted(object arg) {
            if ((this.GetAgencyTicketSalesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAgencyTicketSalesCompleted(this, new GetAgencyTicketSalesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/MemberLevelRead", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet MemberLevelRead(string strMemberLevelCode, string strMemberLevel, string strStatus, bool bWrite) {
            object[] results = this.Invoke("MemberLevelRead", new object[] {
                        strMemberLevelCode,
                        strMemberLevel,
                        strStatus,
                        bWrite});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void MemberLevelReadAsync(string strMemberLevelCode, string strMemberLevel, string strStatus, bool bWrite) {
            this.MemberLevelReadAsync(strMemberLevelCode, strMemberLevel, strStatus, bWrite, null);
        }
        
        /// <remarks/>
        public void MemberLevelReadAsync(string strMemberLevelCode, string strMemberLevel, string strStatus, bool bWrite, object userState) {
            if ((this.MemberLevelReadOperationCompleted == null)) {
                this.MemberLevelReadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMemberLevelReadOperationCompleted);
            }
            this.InvokeAsync("MemberLevelRead", new object[] {
                        strMemberLevelCode,
                        strMemberLevel,
                        strStatus,
                        bWrite}, this.MemberLevelReadOperationCompleted, userState);
        }
        
        private void OnMemberLevelReadOperationCompleted(object arg) {
            if ((this.MemberLevelReadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MemberLevelReadCompleted(this, new MemberLevelReadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/CheckUniqueMailAddress", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckUniqueMailAddress(string strMail, string strClientProfileId) {
            object[] results = this.Invoke("CheckUniqueMailAddress", new object[] {
                        strMail,
                        strClientProfileId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckUniqueMailAddressAsync(string strMail, string strClientProfileId) {
            this.CheckUniqueMailAddressAsync(strMail, strClientProfileId, null);
        }
        
        /// <remarks/>
        public void CheckUniqueMailAddressAsync(string strMail, string strClientProfileId, object userState) {
            if ((this.CheckUniqueMailAddressOperationCompleted == null)) {
                this.CheckUniqueMailAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckUniqueMailAddressOperationCompleted);
            }
            this.InvokeAsync("CheckUniqueMailAddress", new object[] {
                        strMail,
                        strClientProfileId}, this.CheckUniqueMailAddressOperationCompleted, userState);
        }
        
        private void OnCheckUniqueMailAddressOperationCompleted(object arg) {
            if ((this.CheckUniqueMailAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckUniqueMailAddressCompleted(this, new CheckUniqueMailAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetAgencyAccountTransactions", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAgencyAccountTransactions(string agencyCode, System.DateTime dateFrom, System.DateTime dateTo) {
            object[] results = this.Invoke("GetAgencyAccountTransactions", new object[] {
                        agencyCode,
                        dateFrom,
                        dateTo});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAgencyAccountTransactionsAsync(string agencyCode, System.DateTime dateFrom, System.DateTime dateTo) {
            this.GetAgencyAccountTransactionsAsync(agencyCode, dateFrom, dateTo, null);
        }
        
        /// <remarks/>
        public void GetAgencyAccountTransactionsAsync(string agencyCode, System.DateTime dateFrom, System.DateTime dateTo, object userState) {
            if ((this.GetAgencyAccountTransactionsOperationCompleted == null)) {
                this.GetAgencyAccountTransactionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAgencyAccountTransactionsOperationCompleted);
            }
            this.InvokeAsync("GetAgencyAccountTransactions", new object[] {
                        agencyCode,
                        dateFrom,
                        dateTo}, this.GetAgencyAccountTransactionsOperationCompleted, userState);
        }
        
        private void OnGetAgencyAccountTransactionsOperationCompleted(object arg) {
            if ((this.GetAgencyAccountTransactionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAgencyAccountTransactionsCompleted(this, new GetAgencyAccountTransactionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/SaveBookingCreditCard", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SaveBookingCreditCard(
                    string BookingId, 
                    string XmlHeader, 
                    string XmlSegments, 
                    string XmlPassengers, 
                    string XmlPayments, 
                    string XmlRemarks, 
                    string XmlMapping, 
                    string XmlFees, 
                    string XmlPaymentFees, 
                    string XmlTaxes, 
                    string XmlServices, 
                    bool CreateTickets, 
                    string securityToken, 
                    string authenticationToken, 
                    string commerceIndicator, 
                    string strRequestSource, 
                    string strLanguage) {
            object[] results = this.Invoke("SaveBookingCreditCard", new object[] {
                        BookingId,
                        XmlHeader,
                        XmlSegments,
                        XmlPassengers,
                        XmlPayments,
                        XmlRemarks,
                        XmlMapping,
                        XmlFees,
                        XmlPaymentFees,
                        XmlTaxes,
                        XmlServices,
                        CreateTickets,
                        securityToken,
                        authenticationToken,
                        commerceIndicator,
                        strRequestSource,
                        strLanguage});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SaveBookingCreditCardAsync(
                    string BookingId, 
                    string XmlHeader, 
                    string XmlSegments, 
                    string XmlPassengers, 
                    string XmlPayments, 
                    string XmlRemarks, 
                    string XmlMapping, 
                    string XmlFees, 
                    string XmlPaymentFees, 
                    string XmlTaxes, 
                    string XmlServices, 
                    bool CreateTickets, 
                    string securityToken, 
                    string authenticationToken, 
                    string commerceIndicator, 
                    string strRequestSource, 
                    string strLanguage) {
            this.SaveBookingCreditCardAsync(BookingId, XmlHeader, XmlSegments, XmlPassengers, XmlPayments, XmlRemarks, XmlMapping, XmlFees, XmlPaymentFees, XmlTaxes, XmlServices, CreateTickets, securityToken, authenticationToken, commerceIndicator, strRequestSource, strLanguage, null);
        }
        
        /// <remarks/>
        public void SaveBookingCreditCardAsync(
                    string BookingId, 
                    string XmlHeader, 
                    string XmlSegments, 
                    string XmlPassengers, 
                    string XmlPayments, 
                    string XmlRemarks, 
                    string XmlMapping, 
                    string XmlFees, 
                    string XmlPaymentFees, 
                    string XmlTaxes, 
                    string XmlServices, 
                    bool CreateTickets, 
                    string securityToken, 
                    string authenticationToken, 
                    string commerceIndicator, 
                    string strRequestSource, 
                    string strLanguage, 
                    object userState) {
            if ((this.SaveBookingCreditCardOperationCompleted == null)) {
                this.SaveBookingCreditCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveBookingCreditCardOperationCompleted);
            }
            this.InvokeAsync("SaveBookingCreditCard", new object[] {
                        BookingId,
                        XmlHeader,
                        XmlSegments,
                        XmlPassengers,
                        XmlPayments,
                        XmlRemarks,
                        XmlMapping,
                        XmlFees,
                        XmlPaymentFees,
                        XmlTaxes,
                        XmlServices,
                        CreateTickets,
                        securityToken,
                        authenticationToken,
                        commerceIndicator,
                        strRequestSource,
                        strLanguage}, this.SaveBookingCreditCardOperationCompleted, userState);
        }
        
        private void OnSaveBookingCreditCardOperationCompleted(object arg) {
            if ((this.SaveBookingCreditCardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveBookingCreditCardCompleted(this, new SaveBookingCreditCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/SaveBookingPayment", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SaveBookingPayment(string BookingId, string XmlHeader, string XmlSegments, string XmlPassengers, string XmlPayments, string XmlRemarks, string XmlMapping, string XmlFees, string XmlPaymentFees, string XmlTaxes, string XMLServices, bool CreateTickets, string strLanguage) {
            object[] results = this.Invoke("SaveBookingPayment", new object[] {
                        BookingId,
                        XmlHeader,
                        XmlSegments,
                        XmlPassengers,
                        XmlPayments,
                        XmlRemarks,
                        XmlMapping,
                        XmlFees,
                        XmlPaymentFees,
                        XmlTaxes,
                        XMLServices,
                        CreateTickets,
                        strLanguage});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SaveBookingPaymentAsync(string BookingId, string XmlHeader, string XmlSegments, string XmlPassengers, string XmlPayments, string XmlRemarks, string XmlMapping, string XmlFees, string XmlPaymentFees, string XmlTaxes, string XMLServices, bool CreateTickets, string strLanguage) {
            this.SaveBookingPaymentAsync(BookingId, XmlHeader, XmlSegments, XmlPassengers, XmlPayments, XmlRemarks, XmlMapping, XmlFees, XmlPaymentFees, XmlTaxes, XMLServices, CreateTickets, strLanguage, null);
        }
        
        /// <remarks/>
        public void SaveBookingPaymentAsync(string BookingId, string XmlHeader, string XmlSegments, string XmlPassengers, string XmlPayments, string XmlRemarks, string XmlMapping, string XmlFees, string XmlPaymentFees, string XmlTaxes, string XMLServices, bool CreateTickets, string strLanguage, object userState) {
            if ((this.SaveBookingPaymentOperationCompleted == null)) {
                this.SaveBookingPaymentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveBookingPaymentOperationCompleted);
            }
            this.InvokeAsync("SaveBookingPayment", new object[] {
                        BookingId,
                        XmlHeader,
                        XmlSegments,
                        XmlPassengers,
                        XmlPayments,
                        XmlRemarks,
                        XmlMapping,
                        XmlFees,
                        XmlPaymentFees,
                        XmlTaxes,
                        XMLServices,
                        CreateTickets,
                        strLanguage}, this.SaveBookingPaymentOperationCompleted, userState);
        }
        
        private void OnSaveBookingPaymentOperationCompleted(object arg) {
            if ((this.SaveBookingPaymentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveBookingPaymentCompleted(this, new SaveBookingPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/SavePayment", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SavePayment(string BookingId, string XmlHeader, string XmlSegments, string XmlPassengers, string XmlPayments, string XmlMapping, string XmlFees, string XmlPaymentFees, bool CreateTickets) {
            object[] results = this.Invoke("SavePayment", new object[] {
                        BookingId,
                        XmlHeader,
                        XmlSegments,
                        XmlPassengers,
                        XmlPayments,
                        XmlMapping,
                        XmlFees,
                        XmlPaymentFees,
                        CreateTickets});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SavePaymentAsync(string BookingId, string XmlHeader, string XmlSegments, string XmlPassengers, string XmlPayments, string XmlMapping, string XmlFees, string XmlPaymentFees, bool CreateTickets) {
            this.SavePaymentAsync(BookingId, XmlHeader, XmlSegments, XmlPassengers, XmlPayments, XmlMapping, XmlFees, XmlPaymentFees, CreateTickets, null);
        }
        
        /// <remarks/>
        public void SavePaymentAsync(string BookingId, string XmlHeader, string XmlSegments, string XmlPassengers, string XmlPayments, string XmlMapping, string XmlFees, string XmlPaymentFees, bool CreateTickets, object userState) {
            if ((this.SavePaymentOperationCompleted == null)) {
                this.SavePaymentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSavePaymentOperationCompleted);
            }
            this.InvokeAsync("SavePayment", new object[] {
                        BookingId,
                        XmlHeader,
                        XmlSegments,
                        XmlPassengers,
                        XmlPayments,
                        XmlMapping,
                        XmlFees,
                        XmlPaymentFees,
                        CreateTickets}, this.SavePaymentOperationCompleted, userState);
        }
        
        private void OnSavePaymentOperationCompleted(object arg) {
            if ((this.SavePaymentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SavePaymentCompleted(this, new SavePaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetAgencyAccountTopUp", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAgencyAccountTopUp(string strAgencyCode, string strCurrency, System.DateTime dtFrom, System.DateTime dtTo) {
            object[] results = this.Invoke("GetAgencyAccountTopUp", new object[] {
                        strAgencyCode,
                        strCurrency,
                        dtFrom,
                        dtTo});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAgencyAccountTopUpAsync(string strAgencyCode, string strCurrency, System.DateTime dtFrom, System.DateTime dtTo) {
            this.GetAgencyAccountTopUpAsync(strAgencyCode, strCurrency, dtFrom, dtTo, null);
        }
        
        /// <remarks/>
        public void GetAgencyAccountTopUpAsync(string strAgencyCode, string strCurrency, System.DateTime dtFrom, System.DateTime dtTo, object userState) {
            if ((this.GetAgencyAccountTopUpOperationCompleted == null)) {
                this.GetAgencyAccountTopUpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAgencyAccountTopUpOperationCompleted);
            }
            this.InvokeAsync("GetAgencyAccountTopUp", new object[] {
                        strAgencyCode,
                        strCurrency,
                        dtFrom,
                        dtTo}, this.GetAgencyAccountTopUpOperationCompleted, userState);
        }
        
        private void OnGetAgencyAccountTopUpOperationCompleted(object arg) {
            if ((this.GetAgencyAccountTopUpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAgencyAccountTopUpCompleted(this, new GetAgencyAccountTopUpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetAgencyAccountBalance", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAgencyAccountBalance(string strAgencyCode, string strAgencyName, string strCurrency, string strConsolidatorAgency) {
            object[] results = this.Invoke("GetAgencyAccountBalance", new object[] {
                        strAgencyCode,
                        strAgencyName,
                        strCurrency,
                        strConsolidatorAgency});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAgencyAccountBalanceAsync(string strAgencyCode, string strAgencyName, string strCurrency, string strConsolidatorAgency) {
            this.GetAgencyAccountBalanceAsync(strAgencyCode, strAgencyName, strCurrency, strConsolidatorAgency, null);
        }
        
        /// <remarks/>
        public void GetAgencyAccountBalanceAsync(string strAgencyCode, string strAgencyName, string strCurrency, string strConsolidatorAgency, object userState) {
            if ((this.GetAgencyAccountBalanceOperationCompleted == null)) {
                this.GetAgencyAccountBalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAgencyAccountBalanceOperationCompleted);
            }
            this.InvokeAsync("GetAgencyAccountBalance", new object[] {
                        strAgencyCode,
                        strAgencyName,
                        strCurrency,
                        strConsolidatorAgency}, this.GetAgencyAccountBalanceOperationCompleted, userState);
        }
        
        private void OnGetAgencyAccountBalanceOperationCompleted(object arg) {
            if ((this.GetAgencyAccountBalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAgencyAccountBalanceCompleted(this, new GetAgencyAccountBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/AdjustSubAgencyAccountBalance", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AdjustSubAgencyAccountBalance(string strXmlChildAccountBalance, string strXmlParentAccountBalance) {
            object[] results = this.Invoke("AdjustSubAgencyAccountBalance", new object[] {
                        strXmlChildAccountBalance,
                        strXmlParentAccountBalance});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AdjustSubAgencyAccountBalanceAsync(string strXmlChildAccountBalance, string strXmlParentAccountBalance) {
            this.AdjustSubAgencyAccountBalanceAsync(strXmlChildAccountBalance, strXmlParentAccountBalance, null);
        }
        
        /// <remarks/>
        public void AdjustSubAgencyAccountBalanceAsync(string strXmlChildAccountBalance, string strXmlParentAccountBalance, object userState) {
            if ((this.AdjustSubAgencyAccountBalanceOperationCompleted == null)) {
                this.AdjustSubAgencyAccountBalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdjustSubAgencyAccountBalanceOperationCompleted);
            }
            this.InvokeAsync("AdjustSubAgencyAccountBalance", new object[] {
                        strXmlChildAccountBalance,
                        strXmlParentAccountBalance}, this.AdjustSubAgencyAccountBalanceOperationCompleted, userState);
        }
        
        private void OnAdjustSubAgencyAccountBalanceOperationCompleted(object arg) {
            if ((this.AdjustSubAgencyAccountBalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdjustSubAgencyAccountBalanceCompleted(this, new AdjustSubAgencyAccountBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/AddNewAgency", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddNewAgency(string strXmlAgency, string strAgencyCode, string strDefaultUserLogon, string strDefaultPassword, string strDefaultLastname, string strDefaultFirstname, string strCreateUser, short iChangeBooking, short iChangeSegment, short iDeleteSegment, short iTicketIssue) {
            object[] results = this.Invoke("AddNewAgency", new object[] {
                        strXmlAgency,
                        strAgencyCode,
                        strDefaultUserLogon,
                        strDefaultPassword,
                        strDefaultLastname,
                        strDefaultFirstname,
                        strCreateUser,
                        iChangeBooking,
                        iChangeSegment,
                        iDeleteSegment,
                        iTicketIssue});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddNewAgencyAsync(string strXmlAgency, string strAgencyCode, string strDefaultUserLogon, string strDefaultPassword, string strDefaultLastname, string strDefaultFirstname, string strCreateUser, short iChangeBooking, short iChangeSegment, short iDeleteSegment, short iTicketIssue) {
            this.AddNewAgencyAsync(strXmlAgency, strAgencyCode, strDefaultUserLogon, strDefaultPassword, strDefaultLastname, strDefaultFirstname, strCreateUser, iChangeBooking, iChangeSegment, iDeleteSegment, iTicketIssue, null);
        }
        
        /// <remarks/>
        public void AddNewAgencyAsync(string strXmlAgency, string strAgencyCode, string strDefaultUserLogon, string strDefaultPassword, string strDefaultLastname, string strDefaultFirstname, string strCreateUser, short iChangeBooking, short iChangeSegment, short iDeleteSegment, short iTicketIssue, object userState) {
            if ((this.AddNewAgencyOperationCompleted == null)) {
                this.AddNewAgencyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddNewAgencyOperationCompleted);
            }
            this.InvokeAsync("AddNewAgency", new object[] {
                        strXmlAgency,
                        strAgencyCode,
                        strDefaultUserLogon,
                        strDefaultPassword,
                        strDefaultLastname,
                        strDefaultFirstname,
                        strCreateUser,
                        iChangeBooking,
                        iChangeSegment,
                        iDeleteSegment,
                        iTicketIssue}, this.AddNewAgencyOperationCompleted, userState);
        }
        
        private void OnAddNewAgencyOperationCompleted(object arg) {
            if ((this.AddNewAgencyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddNewAgencyCompleted(this, new AddNewAgencyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/AgencyRead", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet AgencyRead(string strAgencyCode, bool bKeepSession) {
            object[] results = this.Invoke("AgencyRead", new object[] {
                        strAgencyCode,
                        bKeepSession});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void AgencyReadAsync(string strAgencyCode, bool bKeepSession) {
            this.AgencyReadAsync(strAgencyCode, bKeepSession, null);
        }
        
        /// <remarks/>
        public void AgencyReadAsync(string strAgencyCode, bool bKeepSession, object userState) {
            if ((this.AgencyReadOperationCompleted == null)) {
                this.AgencyReadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAgencyReadOperationCompleted);
            }
            this.InvokeAsync("AgencyRead", new object[] {
                        strAgencyCode,
                        bKeepSession}, this.AgencyReadOperationCompleted, userState);
        }
        
        private void OnAgencyReadOperationCompleted(object arg) {
            if ((this.AgencyReadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AgencyReadCompleted(this, new AgencyReadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/ExchangeRateRead", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public double ExchangeRateRead(string strOriginCurrencyCode, string strDestCurrencyCode) {
            object[] results = this.Invoke("ExchangeRateRead", new object[] {
                        strOriginCurrencyCode,
                        strDestCurrencyCode});
            return ((double)(results[0]));
        }
        
        /// <remarks/>
        public void ExchangeRateReadAsync(string strOriginCurrencyCode, string strDestCurrencyCode) {
            this.ExchangeRateReadAsync(strOriginCurrencyCode, strDestCurrencyCode, null);
        }
        
        /// <remarks/>
        public void ExchangeRateReadAsync(string strOriginCurrencyCode, string strDestCurrencyCode, object userState) {
            if ((this.ExchangeRateReadOperationCompleted == null)) {
                this.ExchangeRateReadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExchangeRateReadOperationCompleted);
            }
            this.InvokeAsync("ExchangeRateRead", new object[] {
                        strOriginCurrencyCode,
                        strDestCurrencyCode}, this.ExchangeRateReadOperationCompleted, userState);
        }
        
        private void OnExchangeRateReadOperationCompleted(object arg) {
            if ((this.ExchangeRateReadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExchangeRateReadCompleted(this, new ExchangeRateReadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/UpdateAgency", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateAgency(string strXmlAgency) {
            object[] results = this.Invoke("UpdateAgency", new object[] {
                        strXmlAgency});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateAgencyAsync(string strXmlAgency) {
            this.UpdateAgencyAsync(strXmlAgency, null);
        }
        
        /// <remarks/>
        public void UpdateAgencyAsync(string strXmlAgency, object userState) {
            if ((this.UpdateAgencyOperationCompleted == null)) {
                this.UpdateAgencyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateAgencyOperationCompleted);
            }
            this.InvokeAsync("UpdateAgency", new object[] {
                        strXmlAgency}, this.UpdateAgencyOperationCompleted, userState);
        }
        
        private void OnUpdateAgencyOperationCompleted(object arg) {
            if ((this.UpdateAgencyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateAgencyCompleted(this, new UpdateAgencyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/AgencyAccountAdd", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AgencyAccountAdd(string strAgencyCode, string strCurrency, string strUserId, string strComment, double dAmount, string strExternalReference, string strInternalReference, string strTransactionReference, bool bExternalTopup) {
            object[] results = this.Invoke("AgencyAccountAdd", new object[] {
                        strAgencyCode,
                        strCurrency,
                        strUserId,
                        strComment,
                        dAmount,
                        strExternalReference,
                        strInternalReference,
                        strTransactionReference,
                        bExternalTopup});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AgencyAccountAddAsync(string strAgencyCode, string strCurrency, string strUserId, string strComment, double dAmount, string strExternalReference, string strInternalReference, string strTransactionReference, bool bExternalTopup) {
            this.AgencyAccountAddAsync(strAgencyCode, strCurrency, strUserId, strComment, dAmount, strExternalReference, strInternalReference, strTransactionReference, bExternalTopup, null);
        }
        
        /// <remarks/>
        public void AgencyAccountAddAsync(string strAgencyCode, string strCurrency, string strUserId, string strComment, double dAmount, string strExternalReference, string strInternalReference, string strTransactionReference, bool bExternalTopup, object userState) {
            if ((this.AgencyAccountAddOperationCompleted == null)) {
                this.AgencyAccountAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAgencyAccountAddOperationCompleted);
            }
            this.InvokeAsync("AgencyAccountAdd", new object[] {
                        strAgencyCode,
                        strCurrency,
                        strUserId,
                        strComment,
                        dAmount,
                        strExternalReference,
                        strInternalReference,
                        strTransactionReference,
                        bExternalTopup}, this.AgencyAccountAddOperationCompleted, userState);
        }
        
        private void OnAgencyAccountAddOperationCompleted(object arg) {
            if ((this.AgencyAccountAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AgencyAccountAddCompleted(this, new AgencyAccountAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/AgencyAccountVoid", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AgencyAccountVoid(string strAgencyAccountId, string strUserId) {
            object[] results = this.Invoke("AgencyAccountVoid", new object[] {
                        strAgencyAccountId,
                        strUserId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AgencyAccountVoidAsync(string strAgencyAccountId, string strUserId) {
            this.AgencyAccountVoidAsync(strAgencyAccountId, strUserId, null);
        }
        
        /// <remarks/>
        public void AgencyAccountVoidAsync(string strAgencyAccountId, string strUserId, object userState) {
            if ((this.AgencyAccountVoidOperationCompleted == null)) {
                this.AgencyAccountVoidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAgencyAccountVoidOperationCompleted);
            }
            this.InvokeAsync("AgencyAccountVoid", new object[] {
                        strAgencyAccountId,
                        strUserId}, this.AgencyAccountVoidOperationCompleted, userState);
        }
        
        private void OnAgencyAccountVoidOperationCompleted(object arg) {
            if ((this.AgencyAccountVoidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AgencyAccountVoidCompleted(this, new AgencyAccountVoidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/ExternalPaymentListAgencyTopUp", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ExternalPaymentListAgencyTopUp(string strAgencyCode) {
            object[] results = this.Invoke("ExternalPaymentListAgencyTopUp", new object[] {
                        strAgencyCode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ExternalPaymentListAgencyTopUpAsync(string strAgencyCode) {
            this.ExternalPaymentListAgencyTopUpAsync(strAgencyCode, null);
        }
        
        /// <remarks/>
        public void ExternalPaymentListAgencyTopUpAsync(string strAgencyCode, object userState) {
            if ((this.ExternalPaymentListAgencyTopUpOperationCompleted == null)) {
                this.ExternalPaymentListAgencyTopUpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExternalPaymentListAgencyTopUpOperationCompleted);
            }
            this.InvokeAsync("ExternalPaymentListAgencyTopUp", new object[] {
                        strAgencyCode}, this.ExternalPaymentListAgencyTopUpOperationCompleted, userState);
        }
        
        private void OnExternalPaymentListAgencyTopUpOperationCompleted(object arg) {
            if ((this.ExternalPaymentListAgencyTopUpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExternalPaymentListAgencyTopUpCompleted(this, new ExternalPaymentListAgencyTopUpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/UpdateApproval", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateApproval(string strBookingId, int iApproval) {
            this.Invoke("UpdateApproval", new object[] {
                        strBookingId,
                        iApproval});
        }
        
        /// <remarks/>
        public void UpdateApprovalAsync(string strBookingId, int iApproval) {
            this.UpdateApprovalAsync(strBookingId, iApproval, null);
        }
        
        /// <remarks/>
        public void UpdateApprovalAsync(string strBookingId, int iApproval, object userState) {
            if ((this.UpdateApprovalOperationCompleted == null)) {
                this.UpdateApprovalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateApprovalOperationCompleted);
            }
            this.InvokeAsync("UpdateApproval", new object[] {
                        strBookingId,
                        iApproval}, this.UpdateApprovalOperationCompleted, userState);
        }
        
        private void OnUpdateApprovalOperationCompleted(object arg) {
            if ((this.UpdateApprovalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateApprovalCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/SingleFlightQuoteSummary", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SingleFlightQuoteSummary(string strFlightXml, string strPassengerXml, string strAgencyCode, string strLanguage, string strCurrencyCode, bool bNoVat) {
            object[] results = this.Invoke("SingleFlightQuoteSummary", new object[] {
                        strFlightXml,
                        strPassengerXml,
                        strAgencyCode,
                        strLanguage,
                        strCurrencyCode,
                        bNoVat});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SingleFlightQuoteSummaryAsync(string strFlightXml, string strPassengerXml, string strAgencyCode, string strLanguage, string strCurrencyCode, bool bNoVat) {
            this.SingleFlightQuoteSummaryAsync(strFlightXml, strPassengerXml, strAgencyCode, strLanguage, strCurrencyCode, bNoVat, null);
        }
        
        /// <remarks/>
        public void SingleFlightQuoteSummaryAsync(string strFlightXml, string strPassengerXml, string strAgencyCode, string strLanguage, string strCurrencyCode, bool bNoVat, object userState) {
            if ((this.SingleFlightQuoteSummaryOperationCompleted == null)) {
                this.SingleFlightQuoteSummaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSingleFlightQuoteSummaryOperationCompleted);
            }
            this.InvokeAsync("SingleFlightQuoteSummary", new object[] {
                        strFlightXml,
                        strPassengerXml,
                        strAgencyCode,
                        strLanguage,
                        strCurrencyCode,
                        bNoVat}, this.SingleFlightQuoteSummaryOperationCompleted, userState);
        }
        
        private void OnSingleFlightQuoteSummaryOperationCompleted(object arg) {
            if ((this.SingleFlightQuoteSummaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SingleFlightQuoteSummaryCompleted(this, new SingleFlightQuoteSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetRecordLocator", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetRecordLocator(ref string strRecordLocator, ref int iBookingNumber) {
            object[] results = this.Invoke("GetRecordLocator", new object[] {
                        strRecordLocator,
                        iBookingNumber});
            strRecordLocator = ((string)(results[1]));
            iBookingNumber = ((int)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetRecordLocatorAsync(string strRecordLocator, int iBookingNumber) {
            this.GetRecordLocatorAsync(strRecordLocator, iBookingNumber, null);
        }
        
        /// <remarks/>
        public void GetRecordLocatorAsync(string strRecordLocator, int iBookingNumber, object userState) {
            if ((this.GetRecordLocatorOperationCompleted == null)) {
                this.GetRecordLocatorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRecordLocatorOperationCompleted);
            }
            this.InvokeAsync("GetRecordLocator", new object[] {
                        strRecordLocator,
                        iBookingNumber}, this.GetRecordLocatorOperationCompleted, userState);
        }
        
        private void OnGetRecordLocatorOperationCompleted(object arg) {
            if ((this.GetRecordLocatorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRecordLocatorCompleted(this, new GetRecordLocatorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/SegmentFee", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SegmentFee(string strAgencyCode, string strCurrency, string xmlSegmentFee, string strLanguage, bool bNoVat) {
            object[] results = this.Invoke("SegmentFee", new object[] {
                        strAgencyCode,
                        strCurrency,
                        xmlSegmentFee,
                        strLanguage,
                        bNoVat});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SegmentFeeAsync(string strAgencyCode, string strCurrency, string xmlSegmentFee, string strLanguage, bool bNoVat) {
            this.SegmentFeeAsync(strAgencyCode, strCurrency, xmlSegmentFee, strLanguage, bNoVat, null);
        }
        
        /// <remarks/>
        public void SegmentFeeAsync(string strAgencyCode, string strCurrency, string xmlSegmentFee, string strLanguage, bool bNoVat, object userState) {
            if ((this.SegmentFeeOperationCompleted == null)) {
                this.SegmentFeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSegmentFeeOperationCompleted);
            }
            this.InvokeAsync("SegmentFee", new object[] {
                        strAgencyCode,
                        strCurrency,
                        xmlSegmentFee,
                        strLanguage,
                        bNoVat}, this.SegmentFeeOperationCompleted, userState);
        }
        
        private void OnSegmentFeeOperationCompleted(object arg) {
            if ((this.SegmentFeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SegmentFeeCompleted(this, new SegmentFeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/SpecialServiceFee", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SpecialServiceFee(string strAgencyCode, string strCurrency, string xmlSegmentFee, string strLanguage, bool bNoVat) {
            object[] results = this.Invoke("SpecialServiceFee", new object[] {
                        strAgencyCode,
                        strCurrency,
                        xmlSegmentFee,
                        strLanguage,
                        bNoVat});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SpecialServiceFeeAsync(string strAgencyCode, string strCurrency, string xmlSegmentFee, string strLanguage, bool bNoVat) {
            this.SpecialServiceFeeAsync(strAgencyCode, strCurrency, xmlSegmentFee, strLanguage, bNoVat, null);
        }
        
        /// <remarks/>
        public void SpecialServiceFeeAsync(string strAgencyCode, string strCurrency, string xmlSegmentFee, string strLanguage, bool bNoVat, object userState) {
            if ((this.SpecialServiceFeeOperationCompleted == null)) {
                this.SpecialServiceFeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSpecialServiceFeeOperationCompleted);
            }
            this.InvokeAsync("SpecialServiceFee", new object[] {
                        strAgencyCode,
                        strCurrency,
                        xmlSegmentFee,
                        strLanguage,
                        bNoVat}, this.SpecialServiceFeeOperationCompleted, userState);
        }
        
        private void OnSpecialServiceFeeOperationCompleted(object arg) {
            if ((this.SpecialServiceFeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SpecialServiceFeeCompleted(this, new SpecialServiceFeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/SpecialServiceRead", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SpecialServiceRead(string strSpecialServiceCode, string strSpecialServiceGroupCode, string strSpecialService, string strStatus, bool bTextAllowed, bool bTextRequired, bool bInventoryControl, bool bServiceOnRequest, bool bManifest, bool bWrite, string strLanguage) {
            object[] results = this.Invoke("SpecialServiceRead", new object[] {
                        strSpecialServiceCode,
                        strSpecialServiceGroupCode,
                        strSpecialService,
                        strStatus,
                        bTextAllowed,
                        bTextRequired,
                        bInventoryControl,
                        bServiceOnRequest,
                        bManifest,
                        bWrite,
                        strLanguage});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SpecialServiceReadAsync(string strSpecialServiceCode, string strSpecialServiceGroupCode, string strSpecialService, string strStatus, bool bTextAllowed, bool bTextRequired, bool bInventoryControl, bool bServiceOnRequest, bool bManifest, bool bWrite, string strLanguage) {
            this.SpecialServiceReadAsync(strSpecialServiceCode, strSpecialServiceGroupCode, strSpecialService, strStatus, bTextAllowed, bTextRequired, bInventoryControl, bServiceOnRequest, bManifest, bWrite, strLanguage, null);
        }
        
        /// <remarks/>
        public void SpecialServiceReadAsync(string strSpecialServiceCode, string strSpecialServiceGroupCode, string strSpecialService, string strStatus, bool bTextAllowed, bool bTextRequired, bool bInventoryControl, bool bServiceOnRequest, bool bManifest, bool bWrite, string strLanguage, object userState) {
            if ((this.SpecialServiceReadOperationCompleted == null)) {
                this.SpecialServiceReadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSpecialServiceReadOperationCompleted);
            }
            this.InvokeAsync("SpecialServiceRead", new object[] {
                        strSpecialServiceCode,
                        strSpecialServiceGroupCode,
                        strSpecialService,
                        strStatus,
                        bTextAllowed,
                        bTextRequired,
                        bInventoryControl,
                        bServiceOnRequest,
                        bManifest,
                        bWrite,
                        strLanguage}, this.SpecialServiceReadOperationCompleted, userState);
        }
        
        private void OnSpecialServiceReadOperationCompleted(object arg) {
            if ((this.SpecialServiceReadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SpecialServiceReadCompleted(this, new SpecialServiceReadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/InsertPaymentApproval", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool InsertPaymentApproval(string strPaymentApprovalID, string strCardRcd, string strCardNumber, string strNameOnCard, int iExpiryMonth, int iExpiryYear, int iIssueMonth, int iIssueYear, int iIssueNumber, string strPaymentStateCode, string strBookingPaymentId, string strCurrencyRcd, double dPaymentAmount, string strIpAddress) {
            object[] results = this.Invoke("InsertPaymentApproval", new object[] {
                        strPaymentApprovalID,
                        strCardRcd,
                        strCardNumber,
                        strNameOnCard,
                        iExpiryMonth,
                        iExpiryYear,
                        iIssueMonth,
                        iIssueYear,
                        iIssueNumber,
                        strPaymentStateCode,
                        strBookingPaymentId,
                        strCurrencyRcd,
                        dPaymentAmount,
                        strIpAddress});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InsertPaymentApprovalAsync(string strPaymentApprovalID, string strCardRcd, string strCardNumber, string strNameOnCard, int iExpiryMonth, int iExpiryYear, int iIssueMonth, int iIssueYear, int iIssueNumber, string strPaymentStateCode, string strBookingPaymentId, string strCurrencyRcd, double dPaymentAmount, string strIpAddress) {
            this.InsertPaymentApprovalAsync(strPaymentApprovalID, strCardRcd, strCardNumber, strNameOnCard, iExpiryMonth, iExpiryYear, iIssueMonth, iIssueYear, iIssueNumber, strPaymentStateCode, strBookingPaymentId, strCurrencyRcd, dPaymentAmount, strIpAddress, null);
        }
        
        /// <remarks/>
        public void InsertPaymentApprovalAsync(string strPaymentApprovalID, string strCardRcd, string strCardNumber, string strNameOnCard, int iExpiryMonth, int iExpiryYear, int iIssueMonth, int iIssueYear, int iIssueNumber, string strPaymentStateCode, string strBookingPaymentId, string strCurrencyRcd, double dPaymentAmount, string strIpAddress, object userState) {
            if ((this.InsertPaymentApprovalOperationCompleted == null)) {
                this.InsertPaymentApprovalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertPaymentApprovalOperationCompleted);
            }
            this.InvokeAsync("InsertPaymentApproval", new object[] {
                        strPaymentApprovalID,
                        strCardRcd,
                        strCardNumber,
                        strNameOnCard,
                        iExpiryMonth,
                        iExpiryYear,
                        iIssueMonth,
                        iIssueYear,
                        iIssueNumber,
                        strPaymentStateCode,
                        strBookingPaymentId,
                        strCurrencyRcd,
                        dPaymentAmount,
                        strIpAddress}, this.InsertPaymentApprovalOperationCompleted, userState);
        }
        
        private void OnInsertPaymentApprovalOperationCompleted(object arg) {
            if ((this.InsertPaymentApprovalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertPaymentApprovalCompleted(this, new InsertPaymentApprovalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/UpdatePaymentApproval", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdatePaymentApproval(
                    string strApprovalCode, 
                    string strPaymentReference, 
                    string strTransactionReference, 
                    string strTransactionDescription, 
                    string strAvsCode, 
                    string strAvsResponse, 
                    string strCvvCode, 
                    string strCvvResponse, 
                    string strErrorCode, 
                    string strErrorResponse, 
                    string strPaymentStateCode, 
                    string strResponseCode, 
                    string strReturnCode, 
                    string strResponseText, 
                    string strPaymentApprovalId, 
                    string strRequestStreamText, 
                    string strReplyStreamText, 
                    string strCardNumber, 
                    string strCardType) {
            object[] results = this.Invoke("UpdatePaymentApproval", new object[] {
                        strApprovalCode,
                        strPaymentReference,
                        strTransactionReference,
                        strTransactionDescription,
                        strAvsCode,
                        strAvsResponse,
                        strCvvCode,
                        strCvvResponse,
                        strErrorCode,
                        strErrorResponse,
                        strPaymentStateCode,
                        strResponseCode,
                        strReturnCode,
                        strResponseText,
                        strPaymentApprovalId,
                        strRequestStreamText,
                        strReplyStreamText,
                        strCardNumber,
                        strCardType});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePaymentApprovalAsync(
                    string strApprovalCode, 
                    string strPaymentReference, 
                    string strTransactionReference, 
                    string strTransactionDescription, 
                    string strAvsCode, 
                    string strAvsResponse, 
                    string strCvvCode, 
                    string strCvvResponse, 
                    string strErrorCode, 
                    string strErrorResponse, 
                    string strPaymentStateCode, 
                    string strResponseCode, 
                    string strReturnCode, 
                    string strResponseText, 
                    string strPaymentApprovalId, 
                    string strRequestStreamText, 
                    string strReplyStreamText, 
                    string strCardNumber, 
                    string strCardType) {
            this.UpdatePaymentApprovalAsync(strApprovalCode, strPaymentReference, strTransactionReference, strTransactionDescription, strAvsCode, strAvsResponse, strCvvCode, strCvvResponse, strErrorCode, strErrorResponse, strPaymentStateCode, strResponseCode, strReturnCode, strResponseText, strPaymentApprovalId, strRequestStreamText, strReplyStreamText, strCardNumber, strCardType, null);
        }
        
        /// <remarks/>
        public void UpdatePaymentApprovalAsync(
                    string strApprovalCode, 
                    string strPaymentReference, 
                    string strTransactionReference, 
                    string strTransactionDescription, 
                    string strAvsCode, 
                    string strAvsResponse, 
                    string strCvvCode, 
                    string strCvvResponse, 
                    string strErrorCode, 
                    string strErrorResponse, 
                    string strPaymentStateCode, 
                    string strResponseCode, 
                    string strReturnCode, 
                    string strResponseText, 
                    string strPaymentApprovalId, 
                    string strRequestStreamText, 
                    string strReplyStreamText, 
                    string strCardNumber, 
                    string strCardType, 
                    object userState) {
            if ((this.UpdatePaymentApprovalOperationCompleted == null)) {
                this.UpdatePaymentApprovalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePaymentApprovalOperationCompleted);
            }
            this.InvokeAsync("UpdatePaymentApproval", new object[] {
                        strApprovalCode,
                        strPaymentReference,
                        strTransactionReference,
                        strTransactionDescription,
                        strAvsCode,
                        strAvsResponse,
                        strCvvCode,
                        strCvvResponse,
                        strErrorCode,
                        strErrorResponse,
                        strPaymentStateCode,
                        strResponseCode,
                        strReturnCode,
                        strResponseText,
                        strPaymentApprovalId,
                        strRequestStreamText,
                        strReplyStreamText,
                        strCardNumber,
                        strCardType}, this.UpdatePaymentApprovalOperationCompleted, userState);
        }
        
        private void OnUpdatePaymentApprovalOperationCompleted(object arg) {
            if ((this.UpdatePaymentApprovalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePaymentApprovalCompleted(this, new UpdatePaymentApprovalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/TourOperators", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTourOperators(string strLanguage) {
            object[] results = this.Invoke("GetTourOperators", new object[] {
                        strLanguage});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTourOperatorsAsync(string strLanguage) {
            this.GetTourOperatorsAsync(strLanguage, null);
        }
        
        /// <remarks/>
        public void GetTourOperatorsAsync(string strLanguage, object userState) {
            if ((this.GetTourOperatorsOperationCompleted == null)) {
                this.GetTourOperatorsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTourOperatorsOperationCompleted);
            }
            this.InvokeAsync("GetTourOperators", new object[] {
                        strLanguage}, this.GetTourOperatorsOperationCompleted, userState);
        }
        
        private void OnGetTourOperatorsOperationCompleted(object arg) {
            if ((this.GetTourOperatorsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTourOperatorsCompleted(this, new GetTourOperatorsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetVendorTourOperator", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetVendorTourOperator(string strVendorRcd) {
            object[] results = this.Invoke("GetVendorTourOperator", new object[] {
                        strVendorRcd});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetVendorTourOperatorAsync(string strVendorRcd) {
            this.GetVendorTourOperatorAsync(strVendorRcd, null);
        }
        
        /// <remarks/>
        public void GetVendorTourOperatorAsync(string strVendorRcd, object userState) {
            if ((this.GetVendorTourOperatorOperationCompleted == null)) {
                this.GetVendorTourOperatorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVendorTourOperatorOperationCompleted);
            }
            this.InvokeAsync("GetVendorTourOperator", new object[] {
                        strVendorRcd}, this.GetVendorTourOperatorOperationCompleted, userState);
        }
        
        private void OnGetVendorTourOperatorOperationCompleted(object arg) {
            if ((this.GetVendorTourOperatorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVendorTourOperatorCompleted(this, new GetVendorTourOperatorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetTourOperatorCodeMappingRead", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTourOperatorCodeMappingRead(string strTourOperatorId, bool bInclude) {
            object[] results = this.Invoke("GetTourOperatorCodeMappingRead", new object[] {
                        strTourOperatorId,
                        bInclude});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTourOperatorCodeMappingReadAsync(string strTourOperatorId, bool bInclude) {
            this.GetTourOperatorCodeMappingReadAsync(strTourOperatorId, bInclude, null);
        }
        
        /// <remarks/>
        public void GetTourOperatorCodeMappingReadAsync(string strTourOperatorId, bool bInclude, object userState) {
            if ((this.GetTourOperatorCodeMappingReadOperationCompleted == null)) {
                this.GetTourOperatorCodeMappingReadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTourOperatorCodeMappingReadOperationCompleted);
            }
            this.InvokeAsync("GetTourOperatorCodeMappingRead", new object[] {
                        strTourOperatorId,
                        bInclude}, this.GetTourOperatorCodeMappingReadOperationCompleted, userState);
        }
        
        private void OnGetTourOperatorCodeMappingReadOperationCompleted(object arg) {
            if ((this.GetTourOperatorCodeMappingReadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTourOperatorCodeMappingReadCompleted(this, new GetTourOperatorCodeMappingReadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetSessionlessFlightAvailability", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSessionlessFlightAvailability(
                    string Origin, 
                    string Destination, 
                    System.DateTime DateDepartFrom, 
                    System.DateTime DateDepartTo, 
                    System.DateTime DateReturnFrom, 
                    System.DateTime DateReturnTo, 
                    System.DateTime DateBooking, 
                    short Adult, 
                    short Child, 
                    short Infant, 
                    short Other, 
                    string OtherPassengerType, 
                    string BoardingClass, 
                    string BookingClass, 
                    string DayTimeIndicator, 
                    string AgencyCode, 
                    string CurrencyCode, 
                    string FlightId, 
                    string FareId, 
                    double MaxAmount, 
                    bool NonStopOnly, 
                    bool IncludeDeparted, 
                    bool IncludeCancelled, 
                    bool IncludeWaitlisted, 
                    bool IncludeSoldOut, 
                    bool Refundable, 
                    bool GroupFares, 
                    bool ItFaresOnly, 
                    string PromotionCode, 
                    string FareType, 
                    bool FareLogic, 
                    bool ReturnFlight, 
                    bool bLowest, 
                    bool bLowestClass, 
                    bool bLowestGroup, 
                    bool bShowClosed, 
                    bool bSort, 
                    bool bDelete, 
                    bool bSkipFareLogic, 
                    string strLanguage, 
                    string strIpAddress, 
                    string strToken, 
                    bool bReturnRefundable, 
                    bool bNoVat, 
                    int iDayRange) {
            object[] results = this.Invoke("GetSessionlessFlightAvailability", new object[] {
                        Origin,
                        Destination,
                        DateDepartFrom,
                        DateDepartTo,
                        DateReturnFrom,
                        DateReturnTo,
                        DateBooking,
                        Adult,
                        Child,
                        Infant,
                        Other,
                        OtherPassengerType,
                        BoardingClass,
                        BookingClass,
                        DayTimeIndicator,
                        AgencyCode,
                        CurrencyCode,
                        FlightId,
                        FareId,
                        MaxAmount,
                        NonStopOnly,
                        IncludeDeparted,
                        IncludeCancelled,
                        IncludeWaitlisted,
                        IncludeSoldOut,
                        Refundable,
                        GroupFares,
                        ItFaresOnly,
                        PromotionCode,
                        FareType,
                        FareLogic,
                        ReturnFlight,
                        bLowest,
                        bLowestClass,
                        bLowestGroup,
                        bShowClosed,
                        bSort,
                        bDelete,
                        bSkipFareLogic,
                        strLanguage,
                        strIpAddress,
                        strToken,
                        bReturnRefundable,
                        bNoVat,
                        iDayRange});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSessionlessFlightAvailabilityAsync(
                    string Origin, 
                    string Destination, 
                    System.DateTime DateDepartFrom, 
                    System.DateTime DateDepartTo, 
                    System.DateTime DateReturnFrom, 
                    System.DateTime DateReturnTo, 
                    System.DateTime DateBooking, 
                    short Adult, 
                    short Child, 
                    short Infant, 
                    short Other, 
                    string OtherPassengerType, 
                    string BoardingClass, 
                    string BookingClass, 
                    string DayTimeIndicator, 
                    string AgencyCode, 
                    string CurrencyCode, 
                    string FlightId, 
                    string FareId, 
                    double MaxAmount, 
                    bool NonStopOnly, 
                    bool IncludeDeparted, 
                    bool IncludeCancelled, 
                    bool IncludeWaitlisted, 
                    bool IncludeSoldOut, 
                    bool Refundable, 
                    bool GroupFares, 
                    bool ItFaresOnly, 
                    string PromotionCode, 
                    string FareType, 
                    bool FareLogic, 
                    bool ReturnFlight, 
                    bool bLowest, 
                    bool bLowestClass, 
                    bool bLowestGroup, 
                    bool bShowClosed, 
                    bool bSort, 
                    bool bDelete, 
                    bool bSkipFareLogic, 
                    string strLanguage, 
                    string strIpAddress, 
                    string strToken, 
                    bool bReturnRefundable, 
                    bool bNoVat, 
                    int iDayRange) {
            this.GetSessionlessFlightAvailabilityAsync(Origin, Destination, DateDepartFrom, DateDepartTo, DateReturnFrom, DateReturnTo, DateBooking, Adult, Child, Infant, Other, OtherPassengerType, BoardingClass, BookingClass, DayTimeIndicator, AgencyCode, CurrencyCode, FlightId, FareId, MaxAmount, NonStopOnly, IncludeDeparted, IncludeCancelled, IncludeWaitlisted, IncludeSoldOut, Refundable, GroupFares, ItFaresOnly, PromotionCode, FareType, FareLogic, ReturnFlight, bLowest, bLowestClass, bLowestGroup, bShowClosed, bSort, bDelete, bSkipFareLogic, strLanguage, strIpAddress, strToken, bReturnRefundable, bNoVat, iDayRange, null);
        }
        
        /// <remarks/>
        public void GetSessionlessFlightAvailabilityAsync(
                    string Origin, 
                    string Destination, 
                    System.DateTime DateDepartFrom, 
                    System.DateTime DateDepartTo, 
                    System.DateTime DateReturnFrom, 
                    System.DateTime DateReturnTo, 
                    System.DateTime DateBooking, 
                    short Adult, 
                    short Child, 
                    short Infant, 
                    short Other, 
                    string OtherPassengerType, 
                    string BoardingClass, 
                    string BookingClass, 
                    string DayTimeIndicator, 
                    string AgencyCode, 
                    string CurrencyCode, 
                    string FlightId, 
                    string FareId, 
                    double MaxAmount, 
                    bool NonStopOnly, 
                    bool IncludeDeparted, 
                    bool IncludeCancelled, 
                    bool IncludeWaitlisted, 
                    bool IncludeSoldOut, 
                    bool Refundable, 
                    bool GroupFares, 
                    bool ItFaresOnly, 
                    string PromotionCode, 
                    string FareType, 
                    bool FareLogic, 
                    bool ReturnFlight, 
                    bool bLowest, 
                    bool bLowestClass, 
                    bool bLowestGroup, 
                    bool bShowClosed, 
                    bool bSort, 
                    bool bDelete, 
                    bool bSkipFareLogic, 
                    string strLanguage, 
                    string strIpAddress, 
                    string strToken, 
                    bool bReturnRefundable, 
                    bool bNoVat, 
                    int iDayRange, 
                    object userState) {
            if ((this.GetSessionlessFlightAvailabilityOperationCompleted == null)) {
                this.GetSessionlessFlightAvailabilityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSessionlessFlightAvailabilityOperationCompleted);
            }
            this.InvokeAsync("GetSessionlessFlightAvailability", new object[] {
                        Origin,
                        Destination,
                        DateDepartFrom,
                        DateDepartTo,
                        DateReturnFrom,
                        DateReturnTo,
                        DateBooking,
                        Adult,
                        Child,
                        Infant,
                        Other,
                        OtherPassengerType,
                        BoardingClass,
                        BookingClass,
                        DayTimeIndicator,
                        AgencyCode,
                        CurrencyCode,
                        FlightId,
                        FareId,
                        MaxAmount,
                        NonStopOnly,
                        IncludeDeparted,
                        IncludeCancelled,
                        IncludeWaitlisted,
                        IncludeSoldOut,
                        Refundable,
                        GroupFares,
                        ItFaresOnly,
                        PromotionCode,
                        FareType,
                        FareLogic,
                        ReturnFlight,
                        bLowest,
                        bLowestClass,
                        bLowestGroup,
                        bShowClosed,
                        bSort,
                        bDelete,
                        bSkipFareLogic,
                        strLanguage,
                        strIpAddress,
                        strToken,
                        bReturnRefundable,
                        bNoVat,
                        iDayRange}, this.GetSessionlessFlightAvailabilityOperationCompleted, userState);
        }
        
        private void OnGetSessionlessFlightAvailabilityOperationCompleted(object arg) {
            if ((this.GetSessionlessFlightAvailabilityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSessionlessFlightAvailabilityCompleted(this, new GetSessionlessFlightAvailabilityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetSessionlessLowFareFinder", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSessionlessLowFareFinder(
                    string Origin, 
                    string Destination, 
                    System.DateTime DateDepartFrom, 
                    System.DateTime DateDepartTo, 
                    System.DateTime DateReturnFrom, 
                    System.DateTime DateReturnTo, 
                    System.DateTime DateBooking, 
                    short Adult, 
                    short Child, 
                    short Infant, 
                    short Other, 
                    string OtherPassengerType, 
                    string BoardingClass, 
                    string BookingClass, 
                    string DayTimeIndicator, 
                    string AgencyCode, 
                    string CurrencyCode, 
                    string FlightId, 
                    string FareId, 
                    double MaxAmount, 
                    bool NonStopOnly, 
                    bool IncludeDeparted, 
                    bool IncludeCancelled, 
                    bool IncludeWaitlisted, 
                    bool IncludeSoldOut, 
                    bool Refundable, 
                    bool GroupFares, 
                    bool ItFaresOnly, 
                    string PromotionCode, 
                    string FareType, 
                    bool FareLogic, 
                    bool ReturnFlight, 
                    bool bLowest, 
                    bool bLowestClass, 
                    bool bLowestGroup, 
                    bool bShowClosed, 
                    bool bSort, 
                    bool bDelete, 
                    bool bSkipFareLogin, 
                    string strLanguage, 
                    string strIpAddress, 
                    string strToken, 
                    bool bReturnRefundable, 
                    bool bNoVat, 
                    int iDayRange) {
            object[] results = this.Invoke("GetSessionlessLowFareFinder", new object[] {
                        Origin,
                        Destination,
                        DateDepartFrom,
                        DateDepartTo,
                        DateReturnFrom,
                        DateReturnTo,
                        DateBooking,
                        Adult,
                        Child,
                        Infant,
                        Other,
                        OtherPassengerType,
                        BoardingClass,
                        BookingClass,
                        DayTimeIndicator,
                        AgencyCode,
                        CurrencyCode,
                        FlightId,
                        FareId,
                        MaxAmount,
                        NonStopOnly,
                        IncludeDeparted,
                        IncludeCancelled,
                        IncludeWaitlisted,
                        IncludeSoldOut,
                        Refundable,
                        GroupFares,
                        ItFaresOnly,
                        PromotionCode,
                        FareType,
                        FareLogic,
                        ReturnFlight,
                        bLowest,
                        bLowestClass,
                        bLowestGroup,
                        bShowClosed,
                        bSort,
                        bDelete,
                        bSkipFareLogin,
                        strLanguage,
                        strIpAddress,
                        strToken,
                        bReturnRefundable,
                        bNoVat,
                        iDayRange});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSessionlessLowFareFinderAsync(
                    string Origin, 
                    string Destination, 
                    System.DateTime DateDepartFrom, 
                    System.DateTime DateDepartTo, 
                    System.DateTime DateReturnFrom, 
                    System.DateTime DateReturnTo, 
                    System.DateTime DateBooking, 
                    short Adult, 
                    short Child, 
                    short Infant, 
                    short Other, 
                    string OtherPassengerType, 
                    string BoardingClass, 
                    string BookingClass, 
                    string DayTimeIndicator, 
                    string AgencyCode, 
                    string CurrencyCode, 
                    string FlightId, 
                    string FareId, 
                    double MaxAmount, 
                    bool NonStopOnly, 
                    bool IncludeDeparted, 
                    bool IncludeCancelled, 
                    bool IncludeWaitlisted, 
                    bool IncludeSoldOut, 
                    bool Refundable, 
                    bool GroupFares, 
                    bool ItFaresOnly, 
                    string PromotionCode, 
                    string FareType, 
                    bool FareLogic, 
                    bool ReturnFlight, 
                    bool bLowest, 
                    bool bLowestClass, 
                    bool bLowestGroup, 
                    bool bShowClosed, 
                    bool bSort, 
                    bool bDelete, 
                    bool bSkipFareLogin, 
                    string strLanguage, 
                    string strIpAddress, 
                    string strToken, 
                    bool bReturnRefundable, 
                    bool bNoVat, 
                    int iDayRange) {
            this.GetSessionlessLowFareFinderAsync(Origin, Destination, DateDepartFrom, DateDepartTo, DateReturnFrom, DateReturnTo, DateBooking, Adult, Child, Infant, Other, OtherPassengerType, BoardingClass, BookingClass, DayTimeIndicator, AgencyCode, CurrencyCode, FlightId, FareId, MaxAmount, NonStopOnly, IncludeDeparted, IncludeCancelled, IncludeWaitlisted, IncludeSoldOut, Refundable, GroupFares, ItFaresOnly, PromotionCode, FareType, FareLogic, ReturnFlight, bLowest, bLowestClass, bLowestGroup, bShowClosed, bSort, bDelete, bSkipFareLogin, strLanguage, strIpAddress, strToken, bReturnRefundable, bNoVat, iDayRange, null);
        }
        
        /// <remarks/>
        public void GetSessionlessLowFareFinderAsync(
                    string Origin, 
                    string Destination, 
                    System.DateTime DateDepartFrom, 
                    System.DateTime DateDepartTo, 
                    System.DateTime DateReturnFrom, 
                    System.DateTime DateReturnTo, 
                    System.DateTime DateBooking, 
                    short Adult, 
                    short Child, 
                    short Infant, 
                    short Other, 
                    string OtherPassengerType, 
                    string BoardingClass, 
                    string BookingClass, 
                    string DayTimeIndicator, 
                    string AgencyCode, 
                    string CurrencyCode, 
                    string FlightId, 
                    string FareId, 
                    double MaxAmount, 
                    bool NonStopOnly, 
                    bool IncludeDeparted, 
                    bool IncludeCancelled, 
                    bool IncludeWaitlisted, 
                    bool IncludeSoldOut, 
                    bool Refundable, 
                    bool GroupFares, 
                    bool ItFaresOnly, 
                    string PromotionCode, 
                    string FareType, 
                    bool FareLogic, 
                    bool ReturnFlight, 
                    bool bLowest, 
                    bool bLowestClass, 
                    bool bLowestGroup, 
                    bool bShowClosed, 
                    bool bSort, 
                    bool bDelete, 
                    bool bSkipFareLogin, 
                    string strLanguage, 
                    string strIpAddress, 
                    string strToken, 
                    bool bReturnRefundable, 
                    bool bNoVat, 
                    int iDayRange, 
                    object userState) {
            if ((this.GetSessionlessLowFareFinderOperationCompleted == null)) {
                this.GetSessionlessLowFareFinderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSessionlessLowFareFinderOperationCompleted);
            }
            this.InvokeAsync("GetSessionlessLowFareFinder", new object[] {
                        Origin,
                        Destination,
                        DateDepartFrom,
                        DateDepartTo,
                        DateReturnFrom,
                        DateReturnTo,
                        DateBooking,
                        Adult,
                        Child,
                        Infant,
                        Other,
                        OtherPassengerType,
                        BoardingClass,
                        BookingClass,
                        DayTimeIndicator,
                        AgencyCode,
                        CurrencyCode,
                        FlightId,
                        FareId,
                        MaxAmount,
                        NonStopOnly,
                        IncludeDeparted,
                        IncludeCancelled,
                        IncludeWaitlisted,
                        IncludeSoldOut,
                        Refundable,
                        GroupFares,
                        ItFaresOnly,
                        PromotionCode,
                        FareType,
                        FareLogic,
                        ReturnFlight,
                        bLowest,
                        bLowestClass,
                        bLowestGroup,
                        bShowClosed,
                        bSort,
                        bDelete,
                        bSkipFareLogin,
                        strLanguage,
                        strIpAddress,
                        strToken,
                        bReturnRefundable,
                        bNoVat,
                        iDayRange}, this.GetSessionlessLowFareFinderOperationCompleted, userState);
        }
        
        private void OnGetSessionlessLowFareFinderOperationCompleted(object arg) {
            if ((this.GetSessionlessLowFareFinderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSessionlessLowFareFinderCompleted(this, new GetSessionlessLowFareFinderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetSessionlessAirportOrigins", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetSessionlessAirportOrigins(string Language, bool b2cFlag, bool b2bFlag, bool b2eFlag, bool b2sFlag, bool apiFlag, string strToken) {
            object[] results = this.Invoke("GetSessionlessAirportOrigins", new object[] {
                        Language,
                        b2cFlag,
                        b2bFlag,
                        b2eFlag,
                        b2sFlag,
                        apiFlag,
                        strToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetSessionlessAirportOriginsAsync(string Language, bool b2cFlag, bool b2bFlag, bool b2eFlag, bool b2sFlag, bool apiFlag, string strToken) {
            this.GetSessionlessAirportOriginsAsync(Language, b2cFlag, b2bFlag, b2eFlag, b2sFlag, apiFlag, strToken, null);
        }
        
        /// <remarks/>
        public void GetSessionlessAirportOriginsAsync(string Language, bool b2cFlag, bool b2bFlag, bool b2eFlag, bool b2sFlag, bool apiFlag, string strToken, object userState) {
            if ((this.GetSessionlessAirportOriginsOperationCompleted == null)) {
                this.GetSessionlessAirportOriginsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSessionlessAirportOriginsOperationCompleted);
            }
            this.InvokeAsync("GetSessionlessAirportOrigins", new object[] {
                        Language,
                        b2cFlag,
                        b2bFlag,
                        b2eFlag,
                        b2sFlag,
                        apiFlag,
                        strToken}, this.GetSessionlessAirportOriginsOperationCompleted, userState);
        }
        
        private void OnGetSessionlessAirportOriginsOperationCompleted(object arg) {
            if ((this.GetSessionlessAirportOriginsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSessionlessAirportOriginsCompleted(this, new GetSessionlessAirportOriginsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetSessionlessAirportDestination", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetSessionlessAirportDestinations(string Language, bool b2cFlag, bool b2bFlag, bool b2eFlag, bool b2sFlag, bool apiFlag, string strToken) {
            object[] results = this.Invoke("GetSessionlessAirportDestinations", new object[] {
                        Language,
                        b2cFlag,
                        b2bFlag,
                        b2eFlag,
                        b2sFlag,
                        apiFlag,
                        strToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetSessionlessAirportDestinationsAsync(string Language, bool b2cFlag, bool b2bFlag, bool b2eFlag, bool b2sFlag, bool apiFlag, string strToken) {
            this.GetSessionlessAirportDestinationsAsync(Language, b2cFlag, b2bFlag, b2eFlag, b2sFlag, apiFlag, strToken, null);
        }
        
        /// <remarks/>
        public void GetSessionlessAirportDestinationsAsync(string Language, bool b2cFlag, bool b2bFlag, bool b2eFlag, bool b2sFlag, bool apiFlag, string strToken, object userState) {
            if ((this.GetSessionlessAirportDestinationsOperationCompleted == null)) {
                this.GetSessionlessAirportDestinationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSessionlessAirportDestinationsOperationCompleted);
            }
            this.InvokeAsync("GetSessionlessAirportDestinations", new object[] {
                        Language,
                        b2cFlag,
                        b2bFlag,
                        b2eFlag,
                        b2sFlag,
                        apiFlag,
                        strToken}, this.GetSessionlessAirportDestinationsOperationCompleted, userState);
        }
        
        private void OnGetSessionlessAirportDestinationsOperationCompleted(object arg) {
            if ((this.GetSessionlessAirportDestinationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSessionlessAirportDestinationsCompleted(this, new GetSessionlessAirportDestinationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetSessionlessCurrencies", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetSessionlessCurrencies(string strLanguage, string strToken) {
            object[] results = this.Invoke("GetSessionlessCurrencies", new object[] {
                        strLanguage,
                        strToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetSessionlessCurrenciesAsync(string strLanguage, string strToken) {
            this.GetSessionlessCurrenciesAsync(strLanguage, strToken, null);
        }
        
        /// <remarks/>
        public void GetSessionlessCurrenciesAsync(string strLanguage, string strToken, object userState) {
            if ((this.GetSessionlessCurrenciesOperationCompleted == null)) {
                this.GetSessionlessCurrenciesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSessionlessCurrenciesOperationCompleted);
            }
            this.InvokeAsync("GetSessionlessCurrencies", new object[] {
                        strLanguage,
                        strToken}, this.GetSessionlessCurrenciesOperationCompleted, userState);
        }
        
        private void OnGetSessionlessCurrenciesOperationCompleted(object arg) {
            if ((this.GetSessionlessCurrenciesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSessionlessCurrenciesCompleted(this, new GetSessionlessCurrenciesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetSessionlessCountry", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetSessionlessCountry(string strLanguage, string strToken) {
            object[] results = this.Invoke("GetSessionlessCountry", new object[] {
                        strLanguage,
                        strToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetSessionlessCountryAsync(string strLanguage, string strToken) {
            this.GetSessionlessCountryAsync(strLanguage, strToken, null);
        }
        
        /// <remarks/>
        public void GetSessionlessCountryAsync(string strLanguage, string strToken, object userState) {
            if ((this.GetSessionlessCountryOperationCompleted == null)) {
                this.GetSessionlessCountryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSessionlessCountryOperationCompleted);
            }
            this.InvokeAsync("GetSessionlessCountry", new object[] {
                        strLanguage,
                        strToken}, this.GetSessionlessCountryOperationCompleted, userState);
        }
        
        private void OnGetSessionlessCountryOperationCompleted(object arg) {
            if ((this.GetSessionlessCountryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSessionlessCountryCompleted(this, new GetSessionlessCountryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/ReleaseSessionlessFlightInventorySess" +
            "ion", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ReleaseSessionlessFlightInventorySession(string BookingId, string strToken) {
            object[] results = this.Invoke("ReleaseSessionlessFlightInventorySession", new object[] {
                        BookingId,
                        strToken});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ReleaseSessionlessFlightInventorySessionAsync(string BookingId, string strToken) {
            this.ReleaseSessionlessFlightInventorySessionAsync(BookingId, strToken, null);
        }
        
        /// <remarks/>
        public void ReleaseSessionlessFlightInventorySessionAsync(string BookingId, string strToken, object userState) {
            if ((this.ReleaseSessionlessFlightInventorySessionOperationCompleted == null)) {
                this.ReleaseSessionlessFlightInventorySessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReleaseSessionlessFlightInventorySessionOperationCompleted);
            }
            this.InvokeAsync("ReleaseSessionlessFlightInventorySession", new object[] {
                        BookingId,
                        strToken}, this.ReleaseSessionlessFlightInventorySessionOperationCompleted, userState);
        }
        
        private void OnReleaseSessionlessFlightInventorySessionOperationCompleted(object arg) {
            if ((this.ReleaseSessionlessFlightInventorySessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReleaseSessionlessFlightInventorySessionCompleted(this, new ReleaseSessionlessFlightInventorySessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/SessionlessSingleFlightQuoteSummary", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SessionlessSingleFlightQuoteSummary(string strFlightXml, string strPassengerXml, string strAgencyCode, string strToken, string strLanguage, string strCurrencyCode, bool bNoVat) {
            object[] results = this.Invoke("SessionlessSingleFlightQuoteSummary", new object[] {
                        strFlightXml,
                        strPassengerXml,
                        strAgencyCode,
                        strToken,
                        strLanguage,
                        strCurrencyCode,
                        bNoVat});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SessionlessSingleFlightQuoteSummaryAsync(string strFlightXml, string strPassengerXml, string strAgencyCode, string strToken, string strLanguage, string strCurrencyCode, bool bNoVat) {
            this.SessionlessSingleFlightQuoteSummaryAsync(strFlightXml, strPassengerXml, strAgencyCode, strToken, strLanguage, strCurrencyCode, bNoVat, null);
        }
        
        /// <remarks/>
        public void SessionlessSingleFlightQuoteSummaryAsync(string strFlightXml, string strPassengerXml, string strAgencyCode, string strToken, string strLanguage, string strCurrencyCode, bool bNoVat, object userState) {
            if ((this.SessionlessSingleFlightQuoteSummaryOperationCompleted == null)) {
                this.SessionlessSingleFlightQuoteSummaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSessionlessSingleFlightQuoteSummaryOperationCompleted);
            }
            this.InvokeAsync("SessionlessSingleFlightQuoteSummary", new object[] {
                        strFlightXml,
                        strPassengerXml,
                        strAgencyCode,
                        strToken,
                        strLanguage,
                        strCurrencyCode,
                        bNoVat}, this.SessionlessSingleFlightQuoteSummaryOperationCompleted, userState);
        }
        
        private void OnSessionlessSingleFlightQuoteSummaryOperationCompleted(object arg) {
            if ((this.SessionlessSingleFlightQuoteSummaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SessionlessSingleFlightQuoteSummaryCompleted(this, new SessionlessSingleFlightQuoteSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetSessionlessCompactFlightAvailabili" +
            "ty", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSessionlessCompactFlightAvailability(
                    bool FirstSegment, 
                    string bookingId, 
                    string Origin, 
                    string Destination, 
                    System.DateTime DateFrom, 
                    System.DateTime DateTo, 
                    System.DateTime DateBooking, 
                    short Adult, 
                    short Child, 
                    short Infant, 
                    short Other, 
                    string OtherPassengerType, 
                    string BoardingClass, 
                    string BookingClass, 
                    string DayTimeIndicator, 
                    string AgencyCode, 
                    string CurrencyCode, 
                    string FlightId, 
                    string FareId, 
                    double MaxAmount, 
                    bool NonStopOnly, 
                    bool IncludeDeparted, 
                    bool IncludeCancelled, 
                    bool IncludeWaitlisted, 
                    bool IncludeSoldOut, 
                    bool Refundable, 
                    bool GroupFares, 
                    bool ItFaresOnly, 
                    string PromotionCode, 
                    string FareType, 
                    string strToken) {
            object[] results = this.Invoke("GetSessionlessCompactFlightAvailability", new object[] {
                        FirstSegment,
                        bookingId,
                        Origin,
                        Destination,
                        DateFrom,
                        DateTo,
                        DateBooking,
                        Adult,
                        Child,
                        Infant,
                        Other,
                        OtherPassengerType,
                        BoardingClass,
                        BookingClass,
                        DayTimeIndicator,
                        AgencyCode,
                        CurrencyCode,
                        FlightId,
                        FareId,
                        MaxAmount,
                        NonStopOnly,
                        IncludeDeparted,
                        IncludeCancelled,
                        IncludeWaitlisted,
                        IncludeSoldOut,
                        Refundable,
                        GroupFares,
                        ItFaresOnly,
                        PromotionCode,
                        FareType,
                        strToken});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSessionlessCompactFlightAvailabilityAsync(
                    bool FirstSegment, 
                    string bookingId, 
                    string Origin, 
                    string Destination, 
                    System.DateTime DateFrom, 
                    System.DateTime DateTo, 
                    System.DateTime DateBooking, 
                    short Adult, 
                    short Child, 
                    short Infant, 
                    short Other, 
                    string OtherPassengerType, 
                    string BoardingClass, 
                    string BookingClass, 
                    string DayTimeIndicator, 
                    string AgencyCode, 
                    string CurrencyCode, 
                    string FlightId, 
                    string FareId, 
                    double MaxAmount, 
                    bool NonStopOnly, 
                    bool IncludeDeparted, 
                    bool IncludeCancelled, 
                    bool IncludeWaitlisted, 
                    bool IncludeSoldOut, 
                    bool Refundable, 
                    bool GroupFares, 
                    bool ItFaresOnly, 
                    string PromotionCode, 
                    string FareType, 
                    string strToken) {
            this.GetSessionlessCompactFlightAvailabilityAsync(FirstSegment, bookingId, Origin, Destination, DateFrom, DateTo, DateBooking, Adult, Child, Infant, Other, OtherPassengerType, BoardingClass, BookingClass, DayTimeIndicator, AgencyCode, CurrencyCode, FlightId, FareId, MaxAmount, NonStopOnly, IncludeDeparted, IncludeCancelled, IncludeWaitlisted, IncludeSoldOut, Refundable, GroupFares, ItFaresOnly, PromotionCode, FareType, strToken, null);
        }
        
        /// <remarks/>
        public void GetSessionlessCompactFlightAvailabilityAsync(
                    bool FirstSegment, 
                    string bookingId, 
                    string Origin, 
                    string Destination, 
                    System.DateTime DateFrom, 
                    System.DateTime DateTo, 
                    System.DateTime DateBooking, 
                    short Adult, 
                    short Child, 
                    short Infant, 
                    short Other, 
                    string OtherPassengerType, 
                    string BoardingClass, 
                    string BookingClass, 
                    string DayTimeIndicator, 
                    string AgencyCode, 
                    string CurrencyCode, 
                    string FlightId, 
                    string FareId, 
                    double MaxAmount, 
                    bool NonStopOnly, 
                    bool IncludeDeparted, 
                    bool IncludeCancelled, 
                    bool IncludeWaitlisted, 
                    bool IncludeSoldOut, 
                    bool Refundable, 
                    bool GroupFares, 
                    bool ItFaresOnly, 
                    string PromotionCode, 
                    string FareType, 
                    string strToken, 
                    object userState) {
            if ((this.GetSessionlessCompactFlightAvailabilityOperationCompleted == null)) {
                this.GetSessionlessCompactFlightAvailabilityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSessionlessCompactFlightAvailabilityOperationCompleted);
            }
            this.InvokeAsync("GetSessionlessCompactFlightAvailability", new object[] {
                        FirstSegment,
                        bookingId,
                        Origin,
                        Destination,
                        DateFrom,
                        DateTo,
                        DateBooking,
                        Adult,
                        Child,
                        Infant,
                        Other,
                        OtherPassengerType,
                        BoardingClass,
                        BookingClass,
                        DayTimeIndicator,
                        AgencyCode,
                        CurrencyCode,
                        FlightId,
                        FareId,
                        MaxAmount,
                        NonStopOnly,
                        IncludeDeparted,
                        IncludeCancelled,
                        IncludeWaitlisted,
                        IncludeSoldOut,
                        Refundable,
                        GroupFares,
                        ItFaresOnly,
                        PromotionCode,
                        FareType,
                        strToken}, this.GetSessionlessCompactFlightAvailabilityOperationCompleted, userState);
        }
        
        private void OnGetSessionlessCompactFlightAvailabilityOperationCompleted(object arg) {
            if ((this.GetSessionlessCompactFlightAvailabilityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSessionlessCompactFlightAvailabilityCompleted(this, new GetSessionlessCompactFlightAvailabilityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetSessionlessBinRangeSearch", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetSessionlessBinRangeSearch(string strCardType, string strStatusCode, string strToken) {
            object[] results = this.Invoke("GetSessionlessBinRangeSearch", new object[] {
                        strCardType,
                        strStatusCode,
                        strToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetSessionlessBinRangeSearchAsync(string strCardType, string strStatusCode, string strToken) {
            this.GetSessionlessBinRangeSearchAsync(strCardType, strStatusCode, strToken, null);
        }
        
        /// <remarks/>
        public void GetSessionlessBinRangeSearchAsync(string strCardType, string strStatusCode, string strToken, object userState) {
            if ((this.GetSessionlessBinRangeSearchOperationCompleted == null)) {
                this.GetSessionlessBinRangeSearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSessionlessBinRangeSearchOperationCompleted);
            }
            this.InvokeAsync("GetSessionlessBinRangeSearch", new object[] {
                        strCardType,
                        strStatusCode,
                        strToken}, this.GetSessionlessBinRangeSearchOperationCompleted, userState);
        }
        
        private void OnGetSessionlessBinRangeSearchOperationCompleted(object arg) {
            if ((this.GetSessionlessBinRangeSearchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSessionlessBinRangeSearchCompleted(this, new GetSessionlessBinRangeSearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetSessionlessFeesDefinition", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSessionlessFeesDefinition(string strLanguage, string strToken) {
            object[] results = this.Invoke("GetSessionlessFeesDefinition", new object[] {
                        strLanguage,
                        strToken});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSessionlessFeesDefinitionAsync(string strLanguage, string strToken) {
            this.GetSessionlessFeesDefinitionAsync(strLanguage, strToken, null);
        }
        
        /// <remarks/>
        public void GetSessionlessFeesDefinitionAsync(string strLanguage, string strToken, object userState) {
            if ((this.GetSessionlessFeesDefinitionOperationCompleted == null)) {
                this.GetSessionlessFeesDefinitionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSessionlessFeesDefinitionOperationCompleted);
            }
            this.InvokeAsync("GetSessionlessFeesDefinition", new object[] {
                        strLanguage,
                        strToken}, this.GetSessionlessFeesDefinitionOperationCompleted, userState);
        }
        
        private void OnGetSessionlessFeesDefinitionOperationCompleted(object arg) {
            if ((this.GetSessionlessFeesDefinitionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSessionlessFeesDefinitionCompleted(this, new GetSessionlessFeesDefinitionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/SessionlessExternalPaymentAddPayment", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SessionlessExternalPaymentAddPayment(string strBookingId, string strAgencyCode, string strFormOfPayment, string strCurrencyCode, decimal dAmount, string strFormOfPaymentSubtype, string strUserId, string strDocumentNumber, string strApprovalCode, string strRemark, string strLanguage, System.DateTime dtPayment, bool bReturnItinerary, string strToken) {
            object[] results = this.Invoke("SessionlessExternalPaymentAddPayment", new object[] {
                        strBookingId,
                        strAgencyCode,
                        strFormOfPayment,
                        strCurrencyCode,
                        dAmount,
                        strFormOfPaymentSubtype,
                        strUserId,
                        strDocumentNumber,
                        strApprovalCode,
                        strRemark,
                        strLanguage,
                        dtPayment,
                        bReturnItinerary,
                        strToken});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SessionlessExternalPaymentAddPaymentAsync(string strBookingId, string strAgencyCode, string strFormOfPayment, string strCurrencyCode, decimal dAmount, string strFormOfPaymentSubtype, string strUserId, string strDocumentNumber, string strApprovalCode, string strRemark, string strLanguage, System.DateTime dtPayment, bool bReturnItinerary, string strToken) {
            this.SessionlessExternalPaymentAddPaymentAsync(strBookingId, strAgencyCode, strFormOfPayment, strCurrencyCode, dAmount, strFormOfPaymentSubtype, strUserId, strDocumentNumber, strApprovalCode, strRemark, strLanguage, dtPayment, bReturnItinerary, strToken, null);
        }
        
        /// <remarks/>
        public void SessionlessExternalPaymentAddPaymentAsync(string strBookingId, string strAgencyCode, string strFormOfPayment, string strCurrencyCode, decimal dAmount, string strFormOfPaymentSubtype, string strUserId, string strDocumentNumber, string strApprovalCode, string strRemark, string strLanguage, System.DateTime dtPayment, bool bReturnItinerary, string strToken, object userState) {
            if ((this.SessionlessExternalPaymentAddPaymentOperationCompleted == null)) {
                this.SessionlessExternalPaymentAddPaymentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSessionlessExternalPaymentAddPaymentOperationCompleted);
            }
            this.InvokeAsync("SessionlessExternalPaymentAddPayment", new object[] {
                        strBookingId,
                        strAgencyCode,
                        strFormOfPayment,
                        strCurrencyCode,
                        dAmount,
                        strFormOfPaymentSubtype,
                        strUserId,
                        strDocumentNumber,
                        strApprovalCode,
                        strRemark,
                        strLanguage,
                        dtPayment,
                        bReturnItinerary,
                        strToken}, this.SessionlessExternalPaymentAddPaymentOperationCompleted, userState);
        }
        
        private void OnSessionlessExternalPaymentAddPaymentOperationCompleted(object arg) {
            if ((this.SessionlessExternalPaymentAddPaymentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SessionlessExternalPaymentAddPaymentCompleted(this, new SessionlessExternalPaymentAddPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetBaggageFeeOptions", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBaggageFeeOptions(string xmlMapping, string strSegmentId, string strPassengerId, string strAgencyCode, string strLanguage, long lMaxUnits, string xmlFees, bool bApplySegmentFee, bool bNoVat) {
            object[] results = this.Invoke("GetBaggageFeeOptions", new object[] {
                        xmlMapping,
                        strSegmentId,
                        strPassengerId,
                        strAgencyCode,
                        strLanguage,
                        lMaxUnits,
                        xmlFees,
                        bApplySegmentFee,
                        bNoVat});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBaggageFeeOptionsAsync(string xmlMapping, string strSegmentId, string strPassengerId, string strAgencyCode, string strLanguage, long lMaxUnits, string xmlFees, bool bApplySegmentFee, bool bNoVat) {
            this.GetBaggageFeeOptionsAsync(xmlMapping, strSegmentId, strPassengerId, strAgencyCode, strLanguage, lMaxUnits, xmlFees, bApplySegmentFee, bNoVat, null);
        }
        
        /// <remarks/>
        public void GetBaggageFeeOptionsAsync(string xmlMapping, string strSegmentId, string strPassengerId, string strAgencyCode, string strLanguage, long lMaxUnits, string xmlFees, bool bApplySegmentFee, bool bNoVat, object userState) {
            if ((this.GetBaggageFeeOptionsOperationCompleted == null)) {
                this.GetBaggageFeeOptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBaggageFeeOptionsOperationCompleted);
            }
            this.InvokeAsync("GetBaggageFeeOptions", new object[] {
                        xmlMapping,
                        strSegmentId,
                        strPassengerId,
                        strAgencyCode,
                        strLanguage,
                        lMaxUnits,
                        xmlFees,
                        bApplySegmentFee,
                        bNoVat}, this.GetBaggageFeeOptionsOperationCompleted, userState);
        }
        
        private void OnGetBaggageFeeOptionsOperationCompleted(object arg) {
            if ((this.GetBaggageFeeOptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBaggageFeeOptionsCompleted(this, new GetBaggageFeeOptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/ExternalPaymentAddPayment", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExternalPaymentAddPayment(string strBookingId, string strAgencyCode, string strFormOfPayment, string strCurrencyCode, decimal dAmount, string strFormOfPaymentSubtype, string strUserId, string strDocumentNumber, string strApprovalCode, string strRemark, string strLanguage, System.DateTime dtPayment, bool bReturnItinerary) {
            object[] results = this.Invoke("ExternalPaymentAddPayment", new object[] {
                        strBookingId,
                        strAgencyCode,
                        strFormOfPayment,
                        strCurrencyCode,
                        dAmount,
                        strFormOfPaymentSubtype,
                        strUserId,
                        strDocumentNumber,
                        strApprovalCode,
                        strRemark,
                        strLanguage,
                        dtPayment,
                        bReturnItinerary});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExternalPaymentAddPaymentAsync(string strBookingId, string strAgencyCode, string strFormOfPayment, string strCurrencyCode, decimal dAmount, string strFormOfPaymentSubtype, string strUserId, string strDocumentNumber, string strApprovalCode, string strRemark, string strLanguage, System.DateTime dtPayment, bool bReturnItinerary) {
            this.ExternalPaymentAddPaymentAsync(strBookingId, strAgencyCode, strFormOfPayment, strCurrencyCode, dAmount, strFormOfPaymentSubtype, strUserId, strDocumentNumber, strApprovalCode, strRemark, strLanguage, dtPayment, bReturnItinerary, null);
        }
        
        /// <remarks/>
        public void ExternalPaymentAddPaymentAsync(string strBookingId, string strAgencyCode, string strFormOfPayment, string strCurrencyCode, decimal dAmount, string strFormOfPaymentSubtype, string strUserId, string strDocumentNumber, string strApprovalCode, string strRemark, string strLanguage, System.DateTime dtPayment, bool bReturnItinerary, object userState) {
            if ((this.ExternalPaymentAddPaymentOperationCompleted == null)) {
                this.ExternalPaymentAddPaymentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExternalPaymentAddPaymentOperationCompleted);
            }
            this.InvokeAsync("ExternalPaymentAddPayment", new object[] {
                        strBookingId,
                        strAgencyCode,
                        strFormOfPayment,
                        strCurrencyCode,
                        dAmount,
                        strFormOfPaymentSubtype,
                        strUserId,
                        strDocumentNumber,
                        strApprovalCode,
                        strRemark,
                        strLanguage,
                        dtPayment,
                        bReturnItinerary}, this.ExternalPaymentAddPaymentOperationCompleted, userState);
        }
        
        private void OnExternalPaymentAddPaymentOperationCompleted(object arg) {
            if ((this.ExternalPaymentAddPaymentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExternalPaymentAddPaymentCompleted(this, new ExternalPaymentAddPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/SaveBookingMultipleFormOfPayment", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SaveBookingMultipleFormOfPayment(
                    string BookingId, 
                    string XmlHeader, 
                    string XmlSegments, 
                    string XmlPassengers, 
                    string XmlPayments, 
                    string XmlRemarks, 
                    string XmlMapping, 
                    string XmlFees, 
                    string XmlPaymentFees, 
                    string XmlTaxes, 
                    string XMLServices, 
                    bool CreateTickets, 
                    string securityToken, 
                    string authenticationToken, 
                    string commerceIndicator, 
                    string strRequestSource, 
                    string strLanguage) {
            object[] results = this.Invoke("SaveBookingMultipleFormOfPayment", new object[] {
                        BookingId,
                        XmlHeader,
                        XmlSegments,
                        XmlPassengers,
                        XmlPayments,
                        XmlRemarks,
                        XmlMapping,
                        XmlFees,
                        XmlPaymentFees,
                        XmlTaxes,
                        XMLServices,
                        CreateTickets,
                        securityToken,
                        authenticationToken,
                        commerceIndicator,
                        strRequestSource,
                        strLanguage});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SaveBookingMultipleFormOfPaymentAsync(
                    string BookingId, 
                    string XmlHeader, 
                    string XmlSegments, 
                    string XmlPassengers, 
                    string XmlPayments, 
                    string XmlRemarks, 
                    string XmlMapping, 
                    string XmlFees, 
                    string XmlPaymentFees, 
                    string XmlTaxes, 
                    string XMLServices, 
                    bool CreateTickets, 
                    string securityToken, 
                    string authenticationToken, 
                    string commerceIndicator, 
                    string strRequestSource, 
                    string strLanguage) {
            this.SaveBookingMultipleFormOfPaymentAsync(BookingId, XmlHeader, XmlSegments, XmlPassengers, XmlPayments, XmlRemarks, XmlMapping, XmlFees, XmlPaymentFees, XmlTaxes, XMLServices, CreateTickets, securityToken, authenticationToken, commerceIndicator, strRequestSource, strLanguage, null);
        }
        
        /// <remarks/>
        public void SaveBookingMultipleFormOfPaymentAsync(
                    string BookingId, 
                    string XmlHeader, 
                    string XmlSegments, 
                    string XmlPassengers, 
                    string XmlPayments, 
                    string XmlRemarks, 
                    string XmlMapping, 
                    string XmlFees, 
                    string XmlPaymentFees, 
                    string XmlTaxes, 
                    string XMLServices, 
                    bool CreateTickets, 
                    string securityToken, 
                    string authenticationToken, 
                    string commerceIndicator, 
                    string strRequestSource, 
                    string strLanguage, 
                    object userState) {
            if ((this.SaveBookingMultipleFormOfPaymentOperationCompleted == null)) {
                this.SaveBookingMultipleFormOfPaymentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveBookingMultipleFormOfPaymentOperationCompleted);
            }
            this.InvokeAsync("SaveBookingMultipleFormOfPayment", new object[] {
                        BookingId,
                        XmlHeader,
                        XmlSegments,
                        XmlPassengers,
                        XmlPayments,
                        XmlRemarks,
                        XmlMapping,
                        XmlFees,
                        XmlPaymentFees,
                        XmlTaxes,
                        XMLServices,
                        CreateTickets,
                        securityToken,
                        authenticationToken,
                        commerceIndicator,
                        strRequestSource,
                        strLanguage}, this.SaveBookingMultipleFormOfPaymentOperationCompleted, userState);
        }
        
        private void OnSaveBookingMultipleFormOfPaymentOperationCompleted(object arg) {
            if ((this.SaveBookingMultipleFormOfPaymentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveBookingMultipleFormOfPaymentCompleted(this, new SaveBookingMultipleFormOfPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetAvailabilety", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvailabilety(string strFlightID, string strOriginRcd, string strDestinationRcd, string strSpecialServiceRcd, string strBoardingClassRcd) {
            object[] results = this.Invoke("GetAvailabilety", new object[] {
                        strFlightID,
                        strOriginRcd,
                        strDestinationRcd,
                        strSpecialServiceRcd,
                        strBoardingClassRcd});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailabiletyAsync(string strFlightID, string strOriginRcd, string strDestinationRcd, string strSpecialServiceRcd, string strBoardingClassRcd) {
            this.GetAvailabiletyAsync(strFlightID, strOriginRcd, strDestinationRcd, strSpecialServiceRcd, strBoardingClassRcd, null);
        }
        
        /// <remarks/>
        public void GetAvailabiletyAsync(string strFlightID, string strOriginRcd, string strDestinationRcd, string strSpecialServiceRcd, string strBoardingClassRcd, object userState) {
            if ((this.GetAvailabiletyOperationCompleted == null)) {
                this.GetAvailabiletyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailabiletyOperationCompleted);
            }
            this.InvokeAsync("GetAvailabilety", new object[] {
                        strFlightID,
                        strOriginRcd,
                        strDestinationRcd,
                        strSpecialServiceRcd,
                        strBoardingClassRcd}, this.GetAvailabiletyOperationCompleted, userState);
        }
        
        private void OnGetAvailabiletyOperationCompleted(object arg) {
            if ((this.GetAvailabiletyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailabiletyCompleted(this, new GetAvailabiletyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/SpecialServiceInventoryRead", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SpecialServiceInventoryRead(string strFlightID, bool bWrite) {
            object[] results = this.Invoke("SpecialServiceInventoryRead", new object[] {
                        strFlightID,
                        bWrite});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SpecialServiceInventoryReadAsync(string strFlightID, bool bWrite) {
            this.SpecialServiceInventoryReadAsync(strFlightID, bWrite, null);
        }
        
        /// <remarks/>
        public void SpecialServiceInventoryReadAsync(string strFlightID, bool bWrite, object userState) {
            if ((this.SpecialServiceInventoryReadOperationCompleted == null)) {
                this.SpecialServiceInventoryReadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSpecialServiceInventoryReadOperationCompleted);
            }
            this.InvokeAsync("SpecialServiceInventoryRead", new object[] {
                        strFlightID,
                        bWrite}, this.SpecialServiceInventoryReadOperationCompleted, userState);
        }
        
        private void OnSpecialServiceInventoryReadOperationCompleted(object arg) {
            if ((this.SpecialServiceInventoryReadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SpecialServiceInventoryReadCompleted(this, new SpecialServiceInventoryReadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/AddFee", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddFee(string AgencyCode, string strCurrency, string strBookingId, string strFee, string XmlHeader, string XmlSegments, string XmlPassengers, string XmlFees, string XmlRemarks, string XmlPayments, string XmlMapping, string XMLServices, string XmlTaxes, string strLanguage, bool bNoVat) {
            object[] results = this.Invoke("AddFee", new object[] {
                        AgencyCode,
                        strCurrency,
                        strBookingId,
                        strFee,
                        XmlHeader,
                        XmlSegments,
                        XmlPassengers,
                        XmlFees,
                        XmlRemarks,
                        XmlPayments,
                        XmlMapping,
                        XMLServices,
                        XmlTaxes,
                        strLanguage,
                        bNoVat});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddFeeAsync(string AgencyCode, string strCurrency, string strBookingId, string strFee, string XmlHeader, string XmlSegments, string XmlPassengers, string XmlFees, string XmlRemarks, string XmlPayments, string XmlMapping, string XMLServices, string XmlTaxes, string strLanguage, bool bNoVat) {
            this.AddFeeAsync(AgencyCode, strCurrency, strBookingId, strFee, XmlHeader, XmlSegments, XmlPassengers, XmlFees, XmlRemarks, XmlPayments, XmlMapping, XMLServices, XmlTaxes, strLanguage, bNoVat, null);
        }
        
        /// <remarks/>
        public void AddFeeAsync(
                    string AgencyCode, 
                    string strCurrency, 
                    string strBookingId, 
                    string strFee, 
                    string XmlHeader, 
                    string XmlSegments, 
                    string XmlPassengers, 
                    string XmlFees, 
                    string XmlRemarks, 
                    string XmlPayments, 
                    string XmlMapping, 
                    string XMLServices, 
                    string XmlTaxes, 
                    string strLanguage, 
                    bool bNoVat, 
                    object userState) {
            if ((this.AddFeeOperationCompleted == null)) {
                this.AddFeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddFeeOperationCompleted);
            }
            this.InvokeAsync("AddFee", new object[] {
                        AgencyCode,
                        strCurrency,
                        strBookingId,
                        strFee,
                        XmlHeader,
                        XmlSegments,
                        XmlPassengers,
                        XmlFees,
                        XmlRemarks,
                        XmlPayments,
                        XmlMapping,
                        XMLServices,
                        XmlTaxes,
                        strLanguage,
                        bNoVat}, this.AddFeeOperationCompleted, userState);
        }
        
        private void OnAddFeeOperationCompleted(object arg) {
            if ((this.AddFeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddFeeCompleted(this, new AddFeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetPassengerRole", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPassengerRole(string strLanguage) {
            object[] results = this.Invoke("GetPassengerRole", new object[] {
                        strLanguage});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPassengerRoleAsync(string strLanguage) {
            this.GetPassengerRoleAsync(strLanguage, null);
        }
        
        /// <remarks/>
        public void GetPassengerRoleAsync(string strLanguage, object userState) {
            if ((this.GetPassengerRoleOperationCompleted == null)) {
                this.GetPassengerRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPassengerRoleOperationCompleted);
            }
            this.InvokeAsync("GetPassengerRole", new object[] {
                        strLanguage}, this.GetPassengerRoleOperationCompleted, userState);
        }
        
        private void OnGetPassengerRoleOperationCompleted(object arg) {
            if ((this.GetPassengerRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPassengerRoleCompleted(this, new GetPassengerRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetSpecialServices", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSpecialServices(string strLanguage) {
            object[] results = this.Invoke("GetSpecialServices", new object[] {
                        strLanguage});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSpecialServicesAsync(string strLanguage) {
            this.GetSpecialServicesAsync(strLanguage, null);
        }
        
        /// <remarks/>
        public void GetSpecialServicesAsync(string strLanguage, object userState) {
            if ((this.GetSpecialServicesOperationCompleted == null)) {
                this.GetSpecialServicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSpecialServicesOperationCompleted);
            }
            this.InvokeAsync("GetSpecialServices", new object[] {
                        strLanguage}, this.GetSpecialServicesOperationCompleted, userState);
        }
        
        private void OnGetSpecialServicesOperationCompleted(object arg) {
            if ((this.GetSpecialServicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSpecialServicesCompleted(this, new GetSpecialServicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/ProcessRefundVoucher", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcessRefundVoucher(
                    string strBookingPaymentId, 
                    string strBookingId, 
                    string strUserId, 
                    string strFormOfPayment, 
                    string strAgencyCode, 
                    string strSaleCurrency, 
                    string strPaymentCurrency, 
                    decimal dSaleAmount, 
                    decimal dPaymentAmount, 
                    string strVoucherId, 
                    string strRefundVoucher, 
                    string strClientId, 
                    string strNameOnVoucher, 
                    string strDebitAgencyCode, 
                    string strOriginBookingPaymentId, 
                    string strDocumentNumber, 
                    System.DateTime dtPayment) {
            object[] results = this.Invoke("ProcessRefundVoucher", new object[] {
                        strBookingPaymentId,
                        strBookingId,
                        strUserId,
                        strFormOfPayment,
                        strAgencyCode,
                        strSaleCurrency,
                        strPaymentCurrency,
                        dSaleAmount,
                        dPaymentAmount,
                        strVoucherId,
                        strRefundVoucher,
                        strClientId,
                        strNameOnVoucher,
                        strDebitAgencyCode,
                        strOriginBookingPaymentId,
                        strDocumentNumber,
                        dtPayment});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessRefundVoucherAsync(
                    string strBookingPaymentId, 
                    string strBookingId, 
                    string strUserId, 
                    string strFormOfPayment, 
                    string strAgencyCode, 
                    string strSaleCurrency, 
                    string strPaymentCurrency, 
                    decimal dSaleAmount, 
                    decimal dPaymentAmount, 
                    string strVoucherId, 
                    string strRefundVoucher, 
                    string strClientId, 
                    string strNameOnVoucher, 
                    string strDebitAgencyCode, 
                    string strOriginBookingPaymentId, 
                    string strDocumentNumber, 
                    System.DateTime dtPayment) {
            this.ProcessRefundVoucherAsync(strBookingPaymentId, strBookingId, strUserId, strFormOfPayment, strAgencyCode, strSaleCurrency, strPaymentCurrency, dSaleAmount, dPaymentAmount, strVoucherId, strRefundVoucher, strClientId, strNameOnVoucher, strDebitAgencyCode, strOriginBookingPaymentId, strDocumentNumber, dtPayment, null);
        }
        
        /// <remarks/>
        public void ProcessRefundVoucherAsync(
                    string strBookingPaymentId, 
                    string strBookingId, 
                    string strUserId, 
                    string strFormOfPayment, 
                    string strAgencyCode, 
                    string strSaleCurrency, 
                    string strPaymentCurrency, 
                    decimal dSaleAmount, 
                    decimal dPaymentAmount, 
                    string strVoucherId, 
                    string strRefundVoucher, 
                    string strClientId, 
                    string strNameOnVoucher, 
                    string strDebitAgencyCode, 
                    string strOriginBookingPaymentId, 
                    string strDocumentNumber, 
                    System.DateTime dtPayment, 
                    object userState) {
            if ((this.ProcessRefundVoucherOperationCompleted == null)) {
                this.ProcessRefundVoucherOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessRefundVoucherOperationCompleted);
            }
            this.InvokeAsync("ProcessRefundVoucher", new object[] {
                        strBookingPaymentId,
                        strBookingId,
                        strUserId,
                        strFormOfPayment,
                        strAgencyCode,
                        strSaleCurrency,
                        strPaymentCurrency,
                        dSaleAmount,
                        dPaymentAmount,
                        strVoucherId,
                        strRefundVoucher,
                        strClientId,
                        strNameOnVoucher,
                        strDebitAgencyCode,
                        strOriginBookingPaymentId,
                        strDocumentNumber,
                        dtPayment}, this.ProcessRefundVoucherOperationCompleted, userState);
        }
        
        private void OnProcessRefundVoucherOperationCompleted(object arg) {
            if ((this.ProcessRefundVoucherCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessRefundVoucherCompleted(this, new ProcessRefundVoucherCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/ViewBookingChange", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ViewBookingChange(string BookingId, string strLanguage, string strAgencyCode) {
            object[] results = this.Invoke("ViewBookingChange", new object[] {
                        BookingId,
                        strLanguage,
                        strAgencyCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ViewBookingChangeAsync(string BookingId, string strLanguage, string strAgencyCode) {
            this.ViewBookingChangeAsync(BookingId, strLanguage, strAgencyCode, null);
        }
        
        /// <remarks/>
        public void ViewBookingChangeAsync(string BookingId, string strLanguage, string strAgencyCode, object userState) {
            if ((this.ViewBookingChangeOperationCompleted == null)) {
                this.ViewBookingChangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnViewBookingChangeOperationCompleted);
            }
            this.InvokeAsync("ViewBookingChange", new object[] {
                        BookingId,
                        strLanguage,
                        strAgencyCode}, this.ViewBookingChangeOperationCompleted, userState);
        }
        
        private void OnViewBookingChangeOperationCompleted(object arg) {
            if ((this.ViewBookingChangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ViewBookingChangeCompleted(this, new ViewBookingChangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/InitiateBookingChange", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool InitiateBookingChange(string BookingId) {
            object[] results = this.Invoke("InitiateBookingChange", new object[] {
                        BookingId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InitiateBookingChangeAsync(string BookingId) {
            this.InitiateBookingChangeAsync(BookingId, null);
        }
        
        /// <remarks/>
        public void InitiateBookingChangeAsync(string BookingId, object userState) {
            if ((this.InitiateBookingChangeOperationCompleted == null)) {
                this.InitiateBookingChangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateBookingChangeOperationCompleted);
            }
            this.InvokeAsync("InitiateBookingChange", new object[] {
                        BookingId}, this.InitiateBookingChangeOperationCompleted, userState);
        }
        
        private void OnInitiateBookingChangeOperationCompleted(object arg) {
            if ((this.InitiateBookingChangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateBookingChangeCompleted(this, new InitiateBookingChangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/InitiateBookingChangeXML", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InitiateBookingChangeXML(string BookingId) {
            object[] results = this.Invoke("InitiateBookingChangeXML", new object[] {
                        BookingId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InitiateBookingChangeXMLAsync(string BookingId) {
            this.InitiateBookingChangeXMLAsync(BookingId, null);
        }
        
        /// <remarks/>
        public void InitiateBookingChangeXMLAsync(string BookingId, object userState) {
            if ((this.InitiateBookingChangeXMLOperationCompleted == null)) {
                this.InitiateBookingChangeXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitiateBookingChangeXMLOperationCompleted);
            }
            this.InvokeAsync("InitiateBookingChangeXML", new object[] {
                        BookingId}, this.InitiateBookingChangeXMLOperationCompleted, userState);
        }
        
        private void OnInitiateBookingChangeXMLOperationCompleted(object arg) {
            if ((this.InitiateBookingChangeXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitiateBookingChangeXMLCompleted(this, new InitiateBookingChangeXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetActiveBookings", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetActiveBookings(string strClientProfileId) {
            object[] results = this.Invoke("GetActiveBookings", new object[] {
                        strClientProfileId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetActiveBookingsAsync(string strClientProfileId) {
            this.GetActiveBookingsAsync(strClientProfileId, null);
        }
        
        /// <remarks/>
        public void GetActiveBookingsAsync(string strClientProfileId, object userState) {
            if ((this.GetActiveBookingsOperationCompleted == null)) {
                this.GetActiveBookingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActiveBookingsOperationCompleted);
            }
            this.InvokeAsync("GetActiveBookings", new object[] {
                        strClientProfileId}, this.GetActiveBookingsOperationCompleted, userState);
        }
        
        private void OnGetActiveBookingsOperationCompleted(object arg) {
            if ((this.GetActiveBookingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActiveBookingsCompleted(this, new GetActiveBookingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetFlownBookings", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFlownBookings(string strClientProfileId) {
            object[] results = this.Invoke("GetFlownBookings", new object[] {
                        strClientProfileId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFlownBookingsAsync(string strClientProfileId) {
            this.GetFlownBookingsAsync(strClientProfileId, null);
        }
        
        /// <remarks/>
        public void GetFlownBookingsAsync(string strClientProfileId, object userState) {
            if ((this.GetFlownBookingsOperationCompleted == null)) {
                this.GetFlownBookingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFlownBookingsOperationCompleted);
            }
            this.InvokeAsync("GetFlownBookings", new object[] {
                        strClientProfileId}, this.GetFlownBookingsOperationCompleted, userState);
        }
        
        private void OnGetFlownBookingsOperationCompleted(object arg) {
            if ((this.GetFlownBookingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFlownBookingsCompleted(this, new GetFlownBookingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetBookingHistorysList", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBookingHistorysList(string strClientProfileId) {
            object[] results = this.Invoke("GetBookingHistorysList", new object[] {
                        strClientProfileId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBookingHistorysListAsync(string strClientProfileId) {
            this.GetBookingHistorysListAsync(strClientProfileId, null);
        }
        
        /// <remarks/>
        public void GetBookingHistorysListAsync(string strClientProfileId, object userState) {
            if ((this.GetBookingHistorysListOperationCompleted == null)) {
                this.GetBookingHistorysListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBookingHistorysListOperationCompleted);
            }
            this.InvokeAsync("GetBookingHistorysList", new object[] {
                        strClientProfileId}, this.GetBookingHistorysListOperationCompleted, userState);
        }
        
        private void OnGetBookingHistorysListOperationCompleted(object arg) {
            if ((this.GetBookingHistorysListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBookingHistorysListCompleted(this, new GetBookingHistorysListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/UpdatePassengerCheckinDetails", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdatePassengerCheckinDetails(Passenger[] passengers) {
            object[] results = this.Invoke("UpdatePassengerCheckinDetails", new object[] {
                        passengers});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePassengerCheckinDetailsAsync(Passenger[] passengers) {
            this.UpdatePassengerCheckinDetailsAsync(passengers, null);
        }
        
        /// <remarks/>
        public void UpdatePassengerCheckinDetailsAsync(Passenger[] passengers, object userState) {
            if ((this.UpdatePassengerCheckinDetailsOperationCompleted == null)) {
                this.UpdatePassengerCheckinDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePassengerCheckinDetailsOperationCompleted);
            }
            this.InvokeAsync("UpdatePassengerCheckinDetails", new object[] {
                        passengers}, this.UpdatePassengerCheckinDetailsOperationCompleted, userState);
        }
        
        private void OnUpdatePassengerCheckinDetailsOperationCompleted(object arg) {
            if ((this.UpdatePassengerCheckinDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePassengerCheckinDetailsCompleted(this, new UpdatePassengerCheckinDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetBookingClasses", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetBookingClasses(string strBoardingclass, string strLanguage) {
            object[] results = this.Invoke("GetBookingClasses", new object[] {
                        strBoardingclass,
                        strLanguage});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetBookingClassesAsync(string strBoardingclass, string strLanguage) {
            this.GetBookingClassesAsync(strBoardingclass, strLanguage, null);
        }
        
        /// <remarks/>
        public void GetBookingClassesAsync(string strBoardingclass, string strLanguage, object userState) {
            if ((this.GetBookingClassesOperationCompleted == null)) {
                this.GetBookingClassesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBookingClassesOperationCompleted);
            }
            this.InvokeAsync("GetBookingClasses", new object[] {
                        strBoardingclass,
                        strLanguage}, this.GetBookingClassesOperationCompleted, userState);
        }
        
        private void OnGetBookingClassesOperationCompleted(object arg) {
            if ((this.GetBookingClassesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBookingClassesCompleted(this, new GetBookingClassesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetFlightsFLIFO", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFlightsFLIFO(string OriginCode, string DestinationCode, string AirlineCode, string FlightNumber, System.DateTime dtFlightFrom, System.DateTime dtFlightTo, string strLanguage, string strToken) {
            object[] results = this.Invoke("GetFlightsFLIFO", new object[] {
                        OriginCode,
                        DestinationCode,
                        AirlineCode,
                        FlightNumber,
                        dtFlightFrom,
                        dtFlightTo,
                        strLanguage,
                        strToken});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFlightsFLIFOAsync(string OriginCode, string DestinationCode, string AirlineCode, string FlightNumber, System.DateTime dtFlightFrom, System.DateTime dtFlightTo, string strLanguage, string strToken) {
            this.GetFlightsFLIFOAsync(OriginCode, DestinationCode, AirlineCode, FlightNumber, dtFlightFrom, dtFlightTo, strLanguage, strToken, null);
        }
        
        /// <remarks/>
        public void GetFlightsFLIFOAsync(string OriginCode, string DestinationCode, string AirlineCode, string FlightNumber, System.DateTime dtFlightFrom, System.DateTime dtFlightTo, string strLanguage, string strToken, object userState) {
            if ((this.GetFlightsFLIFOOperationCompleted == null)) {
                this.GetFlightsFLIFOOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFlightsFLIFOOperationCompleted);
            }
            this.InvokeAsync("GetFlightsFLIFO", new object[] {
                        OriginCode,
                        DestinationCode,
                        AirlineCode,
                        FlightNumber,
                        dtFlightFrom,
                        dtFlightTo,
                        strLanguage,
                        strToken}, this.GetFlightsFLIFOOperationCompleted, userState);
        }
        
        private void OnGetFlightsFLIFOOperationCompleted(object arg) {
            if ((this.GetFlightsFLIFOCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFlightsFLIFOCompleted(this, new GetFlightsFLIFOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/LowFareFinderAllow", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LowFareFinderAllow(string AgencyCode, string strToken) {
            object[] results = this.Invoke("LowFareFinderAllow", new object[] {
                        AgencyCode,
                        strToken});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LowFareFinderAllowAsync(string AgencyCode, string strToken) {
            this.LowFareFinderAllowAsync(AgencyCode, strToken, null);
        }
        
        /// <remarks/>
        public void LowFareFinderAllowAsync(string AgencyCode, string strToken, object userState) {
            if ((this.LowFareFinderAllowOperationCompleted == null)) {
                this.LowFareFinderAllowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLowFareFinderAllowOperationCompleted);
            }
            this.InvokeAsync("LowFareFinderAllow", new object[] {
                        AgencyCode,
                        strToken}, this.LowFareFinderAllowOperationCompleted, userState);
        }
        
        private void OnLowFareFinderAllowOperationCompleted(object arg) {
            if ((this.LowFareFinderAllowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LowFareFinderAllowCompleted(this, new LowFareFinderAllowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetBookingHistory", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetBookingHistory(string strBookingId) {
            object[] results = this.Invoke("GetBookingHistory", new object[] {
                        strBookingId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetBookingHistoryAsync(string strBookingId) {
            this.GetBookingHistoryAsync(strBookingId, null);
        }
        
        /// <remarks/>
        public void GetBookingHistoryAsync(string strBookingId, object userState) {
            if ((this.GetBookingHistoryOperationCompleted == null)) {
                this.GetBookingHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBookingHistoryOperationCompleted);
            }
            this.InvokeAsync("GetBookingHistory", new object[] {
                        strBookingId}, this.GetBookingHistoryOperationCompleted, userState);
        }
        
        private void OnGetBookingHistoryOperationCompleted(object arg) {
            if ((this.GetBookingHistoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBookingHistoryCompleted(this, new GetBookingHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetBinRangeSearch", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetBinRangeSearch(string strCardType, string strStatusCode) {
            object[] results = this.Invoke("GetBinRangeSearch", new object[] {
                        strCardType,
                        strStatusCode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetBinRangeSearchAsync(string strCardType, string strStatusCode) {
            this.GetBinRangeSearchAsync(strCardType, strStatusCode, null);
        }
        
        /// <remarks/>
        public void GetBinRangeSearchAsync(string strCardType, string strStatusCode, object userState) {
            if ((this.GetBinRangeSearchOperationCompleted == null)) {
                this.GetBinRangeSearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBinRangeSearchOperationCompleted);
            }
            this.InvokeAsync("GetBinRangeSearch", new object[] {
                        strCardType,
                        strStatusCode}, this.GetBinRangeSearchOperationCompleted, userState);
        }
        
        private void OnGetBinRangeSearchOperationCompleted(object arg) {
            if ((this.GetBinRangeSearchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBinRangeSearchCompleted(this, new GetBinRangeSearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetFlightDailyCount", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetFlightDailyCount(System.DateTime dtFrom, System.DateTime dtTo, string strFrom, string strTo) {
            object[] results = this.Invoke("GetFlightDailyCount", new object[] {
                        dtFrom,
                        dtTo,
                        strFrom,
                        strTo});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetFlightDailyCountAsync(System.DateTime dtFrom, System.DateTime dtTo, string strFrom, string strTo) {
            this.GetFlightDailyCountAsync(dtFrom, dtTo, strFrom, strTo, null);
        }
        
        /// <remarks/>
        public void GetFlightDailyCountAsync(System.DateTime dtFrom, System.DateTime dtTo, string strFrom, string strTo, object userState) {
            if ((this.GetFlightDailyCountOperationCompleted == null)) {
                this.GetFlightDailyCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFlightDailyCountOperationCompleted);
            }
            this.InvokeAsync("GetFlightDailyCount", new object[] {
                        dtFrom,
                        dtTo,
                        strFrom,
                        strTo}, this.GetFlightDailyCountOperationCompleted, userState);
        }
        
        private void OnGetFlightDailyCountOperationCompleted(object arg) {
            if ((this.GetFlightDailyCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFlightDailyCountCompleted(this, new GetFlightDailyCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetFlightDailyCountXML", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFlightDailyCountXML(System.DateTime dtFrom, System.DateTime dtTo, string strFrom, string strTo, string strToken) {
            object[] results = this.Invoke("GetFlightDailyCountXML", new object[] {
                        dtFrom,
                        dtTo,
                        strFrom,
                        strTo,
                        strToken});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFlightDailyCountXMLAsync(System.DateTime dtFrom, System.DateTime dtTo, string strFrom, string strTo, string strToken) {
            this.GetFlightDailyCountXMLAsync(dtFrom, dtTo, strFrom, strTo, strToken, null);
        }
        
        /// <remarks/>
        public void GetFlightDailyCountXMLAsync(System.DateTime dtFrom, System.DateTime dtTo, string strFrom, string strTo, string strToken, object userState) {
            if ((this.GetFlightDailyCountXMLOperationCompleted == null)) {
                this.GetFlightDailyCountXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFlightDailyCountXMLOperationCompleted);
            }
            this.InvokeAsync("GetFlightDailyCountXML", new object[] {
                        dtFrom,
                        dtTo,
                        strFrom,
                        strTo,
                        strToken}, this.GetFlightDailyCountXMLOperationCompleted, userState);
        }
        
        private void OnGetFlightDailyCountXMLOperationCompleted(object arg) {
            if ((this.GetFlightDailyCountXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFlightDailyCountXMLCompleted(this, new GetFlightDailyCountXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/AccuralQuote", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet AccuralQuote(string XmlPassengers, string XmlMapping, string strClientId) {
            object[] results = this.Invoke("AccuralQuote", new object[] {
                        XmlPassengers,
                        XmlMapping,
                        strClientId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void AccuralQuoteAsync(string XmlPassengers, string XmlMapping, string strClientId) {
            this.AccuralQuoteAsync(XmlPassengers, XmlMapping, strClientId, null);
        }
        
        /// <remarks/>
        public void AccuralQuoteAsync(string XmlPassengers, string XmlMapping, string strClientId, object userState) {
            if ((this.AccuralQuoteOperationCompleted == null)) {
                this.AccuralQuoteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAccuralQuoteOperationCompleted);
            }
            this.InvokeAsync("AccuralQuote", new object[] {
                        XmlPassengers,
                        XmlMapping,
                        strClientId}, this.AccuralQuoteOperationCompleted, userState);
        }
        
        private void OnAccuralQuoteOperationCompleted(object arg) {
            if ((this.AccuralQuoteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AccuralQuoteCompleted(this, new AccuralQuoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/AgencyDetails", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AgencyDetails(string webAgencyCode, string agentUser, string agentPassword, ref string passport, string agencyCode) {
            object[] results = this.Invoke("AgencyDetails", new object[] {
                        webAgencyCode,
                        agentUser,
                        agentPassword,
                        passport,
                        agencyCode});
            passport = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AgencyDetailsAsync(string webAgencyCode, string agentUser, string agentPassword, string passport, string agencyCode) {
            this.AgencyDetailsAsync(webAgencyCode, agentUser, agentPassword, passport, agencyCode, null);
        }
        
        /// <remarks/>
        public void AgencyDetailsAsync(string webAgencyCode, string agentUser, string agentPassword, string passport, string agencyCode, object userState) {
            if ((this.AgencyDetailsOperationCompleted == null)) {
                this.AgencyDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAgencyDetailsOperationCompleted);
            }
            this.InvokeAsync("AgencyDetails", new object[] {
                        webAgencyCode,
                        agentUser,
                        agentPassword,
                        passport,
                        agencyCode}, this.AgencyDetailsOperationCompleted, userState);
        }
        
        private void OnAgencyDetailsOperationCompleted(object arg) {
            if ((this.AgencyDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AgencyDetailsCompleted(this, new AgencyDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetActivities", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetActivities(string AgencyCode, string RemarkType, string Nickname, System.DateTime TimelimitFrom, System.DateTime TimelimitTo, bool PendingOnly, bool IncompleteOnly, bool IncludeRemarks) {
            object[] results = this.Invoke("GetActivities", new object[] {
                        AgencyCode,
                        RemarkType,
                        Nickname,
                        TimelimitFrom,
                        TimelimitTo,
                        PendingOnly,
                        IncompleteOnly,
                        IncludeRemarks});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetActivitiesAsync(string AgencyCode, string RemarkType, string Nickname, System.DateTime TimelimitFrom, System.DateTime TimelimitTo, bool PendingOnly, bool IncompleteOnly, bool IncludeRemarks) {
            this.GetActivitiesAsync(AgencyCode, RemarkType, Nickname, TimelimitFrom, TimelimitTo, PendingOnly, IncompleteOnly, IncludeRemarks, null);
        }
        
        /// <remarks/>
        public void GetActivitiesAsync(string AgencyCode, string RemarkType, string Nickname, System.DateTime TimelimitFrom, System.DateTime TimelimitTo, bool PendingOnly, bool IncompleteOnly, bool IncludeRemarks, object userState) {
            if ((this.GetActivitiesOperationCompleted == null)) {
                this.GetActivitiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActivitiesOperationCompleted);
            }
            this.InvokeAsync("GetActivities", new object[] {
                        AgencyCode,
                        RemarkType,
                        Nickname,
                        TimelimitFrom,
                        TimelimitTo,
                        PendingOnly,
                        IncompleteOnly,
                        IncludeRemarks}, this.GetActivitiesOperationCompleted, userState);
        }
        
        private void OnGetActivitiesOperationCompleted(object arg) {
            if ((this.GetActivitiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActivitiesCompleted(this, new GetActivitiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/ValidCreditCard", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ValidCreditCard(string BookingId, string XmlMapping, string XmlFees, string XmlPayments, string XmlSegments, string securityToken, string authenticationToken, string commerceIndicator, string strRecordLocator) {
            object[] results = this.Invoke("ValidCreditCard", new object[] {
                        BookingId,
                        XmlMapping,
                        XmlFees,
                        XmlPayments,
                        XmlSegments,
                        securityToken,
                        authenticationToken,
                        commerceIndicator,
                        strRecordLocator});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ValidCreditCardAsync(string BookingId, string XmlMapping, string XmlFees, string XmlPayments, string XmlSegments, string securityToken, string authenticationToken, string commerceIndicator, string strRecordLocator) {
            this.ValidCreditCardAsync(BookingId, XmlMapping, XmlFees, XmlPayments, XmlSegments, securityToken, authenticationToken, commerceIndicator, strRecordLocator, null);
        }
        
        /// <remarks/>
        public void ValidCreditCardAsync(string BookingId, string XmlMapping, string XmlFees, string XmlPayments, string XmlSegments, string securityToken, string authenticationToken, string commerceIndicator, string strRecordLocator, object userState) {
            if ((this.ValidCreditCardOperationCompleted == null)) {
                this.ValidCreditCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidCreditCardOperationCompleted);
            }
            this.InvokeAsync("ValidCreditCard", new object[] {
                        BookingId,
                        XmlMapping,
                        XmlFees,
                        XmlPayments,
                        XmlSegments,
                        securityToken,
                        authenticationToken,
                        commerceIndicator,
                        strRecordLocator}, this.ValidCreditCardOperationCompleted, userState);
        }
        
        private void OnValidCreditCardOperationCompleted(object arg) {
            if ((this.ValidCreditCardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidCreditCardCompleted(this, new ValidCreditCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/ValidCreditCardAdjust", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ValidCreditCardAdjust(string BookingId, string XmlMapping, string XmlFees, string XmlPayments, string XmlSegments, string securityToken, string authenticationToken, string commerceIndicator, string strRecordLocator, string XmlPaymentFees) {
            object[] results = this.Invoke("ValidCreditCardAdjust", new object[] {
                        BookingId,
                        XmlMapping,
                        XmlFees,
                        XmlPayments,
                        XmlSegments,
                        securityToken,
                        authenticationToken,
                        commerceIndicator,
                        strRecordLocator,
                        XmlPaymentFees});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ValidCreditCardAdjustAsync(string BookingId, string XmlMapping, string XmlFees, string XmlPayments, string XmlSegments, string securityToken, string authenticationToken, string commerceIndicator, string strRecordLocator, string XmlPaymentFees) {
            this.ValidCreditCardAdjustAsync(BookingId, XmlMapping, XmlFees, XmlPayments, XmlSegments, securityToken, authenticationToken, commerceIndicator, strRecordLocator, XmlPaymentFees, null);
        }
        
        /// <remarks/>
        public void ValidCreditCardAdjustAsync(string BookingId, string XmlMapping, string XmlFees, string XmlPayments, string XmlSegments, string securityToken, string authenticationToken, string commerceIndicator, string strRecordLocator, string XmlPaymentFees, object userState) {
            if ((this.ValidCreditCardAdjustOperationCompleted == null)) {
                this.ValidCreditCardAdjustOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidCreditCardAdjustOperationCompleted);
            }
            this.InvokeAsync("ValidCreditCardAdjust", new object[] {
                        BookingId,
                        XmlMapping,
                        XmlFees,
                        XmlPayments,
                        XmlSegments,
                        securityToken,
                        authenticationToken,
                        commerceIndicator,
                        strRecordLocator,
                        XmlPaymentFees}, this.ValidCreditCardAdjustOperationCompleted, userState);
        }
        
        private void OnValidCreditCardAdjustOperationCompleted(object arg) {
            if ((this.ValidCreditCardAdjustCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidCreditCardAdjustCompleted(this, new ValidCreditCardAdjustCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/CompleteRemark", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CompleteRemark(string XmlRemarks, string RemarkId, string UserId) {
            object[] results = this.Invoke("CompleteRemark", new object[] {
                        XmlRemarks,
                        RemarkId,
                        UserId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CompleteRemarkAsync(string XmlRemarks, string RemarkId, string UserId) {
            this.CompleteRemarkAsync(XmlRemarks, RemarkId, UserId, null);
        }
        
        /// <remarks/>
        public void CompleteRemarkAsync(string XmlRemarks, string RemarkId, string UserId, object userState) {
            if ((this.CompleteRemarkOperationCompleted == null)) {
                this.CompleteRemarkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompleteRemarkOperationCompleted);
            }
            this.InvokeAsync("CompleteRemark", new object[] {
                        XmlRemarks,
                        RemarkId,
                        UserId}, this.CompleteRemarkOperationCompleted, userState);
        }
        
        private void OnCompleteRemarkOperationCompleted(object arg) {
            if ((this.CompleteRemarkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompleteRemarkCompleted(this, new CompleteRemarkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/ReleaseFlightInventorySession", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ReleaseFlightInventorySession(string BookingId) {
            object[] results = this.Invoke("ReleaseFlightInventorySession", new object[] {
                        BookingId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ReleaseFlightInventorySessionAsync(string BookingId) {
            this.ReleaseFlightInventorySessionAsync(BookingId, null);
        }
        
        /// <remarks/>
        public void ReleaseFlightInventorySessionAsync(string BookingId, object userState) {
            if ((this.ReleaseFlightInventorySessionOperationCompleted == null)) {
                this.ReleaseFlightInventorySessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReleaseFlightInventorySessionOperationCompleted);
            }
            this.InvokeAsync("ReleaseFlightInventorySession", new object[] {
                        BookingId}, this.ReleaseFlightInventorySessionOperationCompleted, userState);
        }
        
        private void OnReleaseFlightInventorySessionOperationCompleted(object arg) {
            if ((this.ReleaseFlightInventorySessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReleaseFlightInventorySessionCompleted(this, new ReleaseFlightInventorySessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetTicketSales", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetTicketSales(string AgencyCode, string UserId, string Origin, string Destination, string Airline, string FlightNumber, System.DateTime FlightFrom, System.DateTime FlightTo, System.DateTime TicketingFrom, System.DateTime TicketingTo, string PassengerType, string Language) {
            object[] results = this.Invoke("GetTicketSales", new object[] {
                        AgencyCode,
                        UserId,
                        Origin,
                        Destination,
                        Airline,
                        FlightNumber,
                        FlightFrom,
                        FlightTo,
                        TicketingFrom,
                        TicketingTo,
                        PassengerType,
                        Language});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetTicketSalesAsync(string AgencyCode, string UserId, string Origin, string Destination, string Airline, string FlightNumber, System.DateTime FlightFrom, System.DateTime FlightTo, System.DateTime TicketingFrom, System.DateTime TicketingTo, string PassengerType, string Language) {
            this.GetTicketSalesAsync(AgencyCode, UserId, Origin, Destination, Airline, FlightNumber, FlightFrom, FlightTo, TicketingFrom, TicketingTo, PassengerType, Language, null);
        }
        
        /// <remarks/>
        public void GetTicketSalesAsync(string AgencyCode, string UserId, string Origin, string Destination, string Airline, string FlightNumber, System.DateTime FlightFrom, System.DateTime FlightTo, System.DateTime TicketingFrom, System.DateTime TicketingTo, string PassengerType, string Language, object userState) {
            if ((this.GetTicketSalesOperationCompleted == null)) {
                this.GetTicketSalesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTicketSalesOperationCompleted);
            }
            this.InvokeAsync("GetTicketSales", new object[] {
                        AgencyCode,
                        UserId,
                        Origin,
                        Destination,
                        Airline,
                        FlightNumber,
                        FlightFrom,
                        FlightTo,
                        TicketingFrom,
                        TicketingTo,
                        PassengerType,
                        Language}, this.GetTicketSalesOperationCompleted, userState);
        }
        
        private void OnGetTicketSalesOperationCompleted(object arg) {
            if ((this.GetTicketSalesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTicketSalesCompleted(this, new GetTicketSalesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetBookings", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetBookings(
                    string Airline, 
                    string FlightNumber, 
                    string FlightId,
                    string FlightFrom,
                    string FlightTo, 
                    string RecordLocator, 
                    string Origin, 
                    string Destination, 
                    string PassengerName, 
                    string SeatNumber, 
                    string TicketNumber, 
                    string PhoneNumber, 
                    string AgencyCode, 
                    string ClientNumber, 
                    string MemberNumber, 
                    string ClientId, 
                    bool ShowHistory, 
                    string Language, 
                    bool bIndividual, 
                    bool bGroup,
                    string CreateFrom,
                    string CreateTo)
        {
            object[] results = this.Invoke("GetBookings", new object[] {
                        Airline,
                        FlightNumber,
                        FlightId,
                        FlightFrom,
                        FlightTo,
                        RecordLocator,
                        Origin,
                        Destination,
                        PassengerName,
                        SeatNumber,
                        TicketNumber,
                        PhoneNumber,
                        AgencyCode,
                        ClientNumber,
                        MemberNumber,
                        ClientId,
                        ShowHistory,
                        Language,
                        bIndividual,
                        bGroup,
                        CreateFrom,
                        CreateTo});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetBookingsAsync(
                    string Airline, 
                    string FlightNumber, 
                    string FlightId, 
                    System.DateTime FlightFrom, 
                    System.DateTime FlightTo, 
                    string RecordLocator, 
                    string Origin, 
                    string Destination, 
                    string PassengerName, 
                    string SeatNumber, 
                    string TicketNumber, 
                    string PhoneNumber, 
                    string AgencyCode, 
                    string ClientNumber, 
                    string MemberNumber, 
                    string ClientId, 
                    bool ShowHistory, 
                    string Language, 
                    bool bIndividual, 
                    bool bGroup, 
                    System.DateTime CreateFrom, 
                    System.DateTime CreateTo) {
            this.GetBookingsAsync(Airline, FlightNumber, FlightId, FlightFrom, FlightTo, RecordLocator, Origin, Destination, PassengerName, SeatNumber, TicketNumber, PhoneNumber, AgencyCode, ClientNumber, MemberNumber, ClientId, ShowHistory, Language, bIndividual, bGroup, CreateFrom, CreateTo, null);
        }
        
        /// <remarks/>
        public void GetBookingsAsync(
                    string Airline, 
                    string FlightNumber, 
                    string FlightId, 
                    System.DateTime FlightFrom, 
                    System.DateTime FlightTo, 
                    string RecordLocator, 
                    string Origin, 
                    string Destination, 
                    string PassengerName, 
                    string SeatNumber, 
                    string TicketNumber, 
                    string PhoneNumber, 
                    string AgencyCode, 
                    string ClientNumber, 
                    string MemberNumber, 
                    string ClientId, 
                    bool ShowHistory, 
                    string Language, 
                    bool bIndividual, 
                    bool bGroup, 
                    System.DateTime CreateFrom, 
                    System.DateTime CreateTo, 
                    object userState) {
            if ((this.GetBookingsOperationCompleted == null)) {
                this.GetBookingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBookingsOperationCompleted);
            }
            this.InvokeAsync("GetBookings", new object[] {
                        Airline,
                        FlightNumber,
                        FlightId,
                        FlightFrom,
                        FlightTo,
                        RecordLocator,
                        Origin,
                        Destination,
                        PassengerName,
                        SeatNumber,
                        TicketNumber,
                        PhoneNumber,
                        AgencyCode,
                        ClientNumber,
                        MemberNumber,
                        ClientId,
                        ShowHistory,
                        Language,
                        bIndividual,
                        bGroup,
                        CreateFrom,
                        CreateTo}, this.GetBookingsOperationCompleted, userState);
        }
        
        private void OnGetBookingsOperationCompleted(object arg) {
            if ((this.GetBookingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBookingsCompleted(this, new GetBookingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/BooingLogon", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet BookingLogon(ref string RecordLocator, ref string NameOrPhone) {
            object[] results = this.Invoke("BookingLogon", new object[] {
                        RecordLocator,
                        NameOrPhone});
            RecordLocator = ((string)(results[1]));
            NameOrPhone = ((string)(results[2]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void BookingLogonAsync(string RecordLocator, string NameOrPhone) {
            this.BookingLogonAsync(RecordLocator, NameOrPhone, null);
        }
        
        /// <remarks/>
        public void BookingLogonAsync(string RecordLocator, string NameOrPhone, object userState) {
            if ((this.BookingLogonOperationCompleted == null)) {
                this.BookingLogonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBookingLogonOperationCompleted);
            }
            this.InvokeAsync("BookingLogon", new object[] {
                        RecordLocator,
                        NameOrPhone}, this.BookingLogonOperationCompleted, userState);
        }
        
        private void OnBookingLogonOperationCompleted(object arg) {
            if ((this.BookingLogonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BookingLogonCompleted(this, new BookingLogonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetClient", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetClient(string clientId, string clientNumber, string passengerId) {
            object[] results = this.Invoke("GetClient", new object[] {
                        clientId,
                        clientNumber,
                        passengerId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetClientAsync(string clientId, string clientNumber, string passengerId) {
            this.GetClientAsync(clientId, clientNumber, passengerId, null);
        }
        
        /// <remarks/>
        public void GetClientAsync(string clientId, string clientNumber, string passengerId, object userState) {
            if ((this.GetClientOperationCompleted == null)) {
                this.GetClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClientOperationCompleted);
            }
            this.InvokeAsync("GetClient", new object[] {
                        clientId,
                        clientNumber,
                        passengerId}, this.GetClientOperationCompleted, userState);
        }
        
        private void OnGetClientOperationCompleted(object arg) {
            if ((this.GetClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClientCompleted(this, new GetClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/TravelAgentLogon", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TravelAgentLogon(string agencyCode, string agentLogon, string agentPassword) {
            object[] results = this.Invoke("TravelAgentLogon", new object[] {
                        agencyCode,
                        agentLogon,
                        agentPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TravelAgentLogonAsync(string agencyCode, string agentLogon, string agentPassword) {
            this.TravelAgentLogonAsync(agencyCode, agentLogon, agentPassword, null);
        }
        
        /// <remarks/>
        public void TravelAgentLogonAsync(string agencyCode, string agentLogon, string agentPassword, object userState) {
            if ((this.TravelAgentLogonOperationCompleted == null)) {
                this.TravelAgentLogonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTravelAgentLogonOperationCompleted);
            }
            this.InvokeAsync("TravelAgentLogon", new object[] {
                        agencyCode,
                        agentLogon,
                        agentPassword}, this.TravelAgentLogonOperationCompleted, userState);
        }
        
        private void OnTravelAgentLogonOperationCompleted(object arg) {
            if ((this.TravelAgentLogonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TravelAgentLogonCompleted(this, new TravelAgentLogonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/ClientLogon", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ClientLogon(string ClientNumber, string ClientPassword) {
            object[] results = this.Invoke("ClientLogon", new object[] {
                        ClientNumber,
                        ClientPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ClientLogonAsync(string ClientNumber, string ClientPassword) {
            this.ClientLogonAsync(ClientNumber, ClientPassword, null);
        }
        
        /// <remarks/>
        public void ClientLogonAsync(string ClientNumber, string ClientPassword, object userState) {
            if ((this.ClientLogonOperationCompleted == null)) {
                this.ClientLogonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClientLogonOperationCompleted);
            }
            this.InvokeAsync("ClientLogon", new object[] {
                        ClientNumber,
                        ClientPassword}, this.ClientLogonOperationCompleted, userState);
        }
        
        private void OnClientLogonOperationCompleted(object arg) {
            if ((this.ClientLogonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClientLogonCompleted(this, new ClientLogonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetFormOfPayments", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFormOfPayments(string strLanguage) {
            object[] results = this.Invoke("GetFormOfPayments", new object[] {
                        strLanguage});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFormOfPaymentsAsync(string strLanguage) {
            this.GetFormOfPaymentsAsync(strLanguage, null);
        }
        
        /// <remarks/>
        public void GetFormOfPaymentsAsync(string strLanguage, object userState) {
            if ((this.GetFormOfPaymentsOperationCompleted == null)) {
                this.GetFormOfPaymentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFormOfPaymentsOperationCompleted);
            }
            this.InvokeAsync("GetFormOfPayments", new object[] {
                        strLanguage}, this.GetFormOfPaymentsOperationCompleted, userState);
        }
        
        private void OnGetFormOfPaymentsOperationCompleted(object arg) {
            if ((this.GetFormOfPaymentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFormOfPaymentsCompleted(this, new GetFormOfPaymentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetFormOfPaymentSubTypes", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFormOfPaymentSubTypes(string strType, string strLanguage) {
            object[] results = this.Invoke("GetFormOfPaymentSubTypes", new object[] {
                        strType,
                        strLanguage});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFormOfPaymentSubTypesAsync(string strType, string strLanguage) {
            this.GetFormOfPaymentSubTypesAsync(strType, strLanguage, null);
        }
        
        /// <remarks/>
        public void GetFormOfPaymentSubTypesAsync(string strType, string strLanguage, object userState) {
            if ((this.GetFormOfPaymentSubTypesOperationCompleted == null)) {
                this.GetFormOfPaymentSubTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFormOfPaymentSubTypesOperationCompleted);
            }
            this.InvokeAsync("GetFormOfPaymentSubTypes", new object[] {
                        strType,
                        strLanguage}, this.GetFormOfPaymentSubTypesOperationCompleted, userState);
        }
        
        private void OnGetFormOfPaymentSubTypesOperationCompleted(object arg) {
            if ((this.GetFormOfPaymentSubTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFormOfPaymentSubTypesCompleted(this, new GetFormOfPaymentSubTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetPaymentSubTypes", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPaymentSubTypes(string strType, string strLanguage) {
            object[] results = this.Invoke("GetPaymentSubTypes", new object[] {
                        strType,
                        strLanguage});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPaymentSubTypesAsync(string strType, string strLanguage) {
            this.GetPaymentSubTypesAsync(strType, strLanguage, null);
        }
        
        /// <remarks/>
        public void GetPaymentSubTypesAsync(string strType, string strLanguage, object userState) {
            if ((this.GetPaymentSubTypesOperationCompleted == null)) {
                this.GetPaymentSubTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPaymentSubTypesOperationCompleted);
            }
            this.InvokeAsync("GetPaymentSubTypes", new object[] {
                        strType,
                        strLanguage}, this.GetPaymentSubTypesOperationCompleted, userState);
        }
        
        private void OnGetPaymentSubTypesOperationCompleted(object arg) {
            if ((this.GetPaymentSubTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPaymentSubTypesCompleted(this, new GetPaymentSubTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetFormOfPaymentSubtypeFees", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetFormOfPaymentSubtypeFees(string FormOfPayment, string FormOfPaymentSubtype, string CurrencyRcd, string Agency, System.DateTime FeeDate) {
            object[] results = this.Invoke("GetFormOfPaymentSubtypeFees", new object[] {
                        FormOfPayment,
                        FormOfPaymentSubtype,
                        CurrencyRcd,
                        Agency,
                        FeeDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetFormOfPaymentSubtypeFeesAsync(string FormOfPayment, string FormOfPaymentSubtype, string CurrencyRcd, string Agency, System.DateTime FeeDate) {
            this.GetFormOfPaymentSubtypeFeesAsync(FormOfPayment, FormOfPaymentSubtype, CurrencyRcd, Agency, FeeDate, null);
        }
        
        /// <remarks/>
        public void GetFormOfPaymentSubtypeFeesAsync(string FormOfPayment, string FormOfPaymentSubtype, string CurrencyRcd, string Agency, System.DateTime FeeDate, object userState) {
            if ((this.GetFormOfPaymentSubtypeFeesOperationCompleted == null)) {
                this.GetFormOfPaymentSubtypeFeesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFormOfPaymentSubtypeFeesOperationCompleted);
            }
            this.InvokeAsync("GetFormOfPaymentSubtypeFees", new object[] {
                        FormOfPayment,
                        FormOfPaymentSubtype,
                        CurrencyRcd,
                        Agency,
                        FeeDate}, this.GetFormOfPaymentSubtypeFeesOperationCompleted, userState);
        }
        
        private void OnGetFormOfPaymentSubtypeFeesOperationCompleted(object arg) {
            if ((this.GetFormOfPaymentSubtypeFeesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFormOfPaymentSubtypeFeesCompleted(this, new GetFormOfPaymentSubtypeFeesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetAgencySessionProfile", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAgencySessionProfile(string AgencyCode, string UserAccountID) {
            object[] results = this.Invoke("GetAgencySessionProfile", new object[] {
                        AgencyCode,
                        UserAccountID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAgencySessionProfileAsync(string AgencyCode, string UserAccountID) {
            this.GetAgencySessionProfileAsync(AgencyCode, UserAccountID, null);
        }
        
        /// <remarks/>
        public void GetAgencySessionProfileAsync(string AgencyCode, string UserAccountID, object userState) {
            if ((this.GetAgencySessionProfileOperationCompleted == null)) {
                this.GetAgencySessionProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAgencySessionProfileOperationCompleted);
            }
            this.InvokeAsync("GetAgencySessionProfile", new object[] {
                        AgencyCode,
                        UserAccountID}, this.GetAgencySessionProfileOperationCompleted, userState);
        }
        
        private void OnGetAgencySessionProfileOperationCompleted(object arg) {
            if ((this.GetAgencySessionProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAgencySessionProfileCompleted(this, new GetAgencySessionProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/PassengerTitels", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPassengerTitles(string strLanguage) {
            object[] results = this.Invoke("GetPassengerTitles", new object[] {
                        strLanguage});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPassengerTitlesAsync(string strLanguage) {
            this.GetPassengerTitlesAsync(strLanguage, null);
        }
        
        /// <remarks/>
        public void GetPassengerTitlesAsync(string strLanguage, object userState) {
            if ((this.GetPassengerTitlesOperationCompleted == null)) {
                this.GetPassengerTitlesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPassengerTitlesOperationCompleted);
            }
            this.InvokeAsync("GetPassengerTitles", new object[] {
                        strLanguage}, this.GetPassengerTitlesOperationCompleted, userState);
        }
        
        private void OnGetPassengerTitlesOperationCompleted(object arg) {
            if ((this.GetPassengerTitlesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPassengerTitlesCompleted(this, new GetPassengerTitlesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetDocumentType", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDocumentType(string strLanguage) {
            object[] results = this.Invoke("GetDocumentType", new object[] {
                        strLanguage});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentTypeAsync(string strLanguage) {
            this.GetDocumentTypeAsync(strLanguage, null);
        }
        
        /// <remarks/>
        public void GetDocumentTypeAsync(string strLanguage, object userState) {
            if ((this.GetDocumentTypeOperationCompleted == null)) {
                this.GetDocumentTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentTypeOperationCompleted);
            }
            this.InvokeAsync("GetDocumentType", new object[] {
                        strLanguage}, this.GetDocumentTypeOperationCompleted, userState);
        }
        
        private void OnGetDocumentTypeOperationCompleted(object arg) {
            if ((this.GetDocumentTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentTypeCompleted(this, new GetDocumentTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetBooking", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetBooking(string BookingId) {
            object[] results = this.Invoke("GetBooking", new object[] {
                        BookingId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetBookingAsync(string BookingId) {
            this.GetBookingAsync(BookingId, null);
        }
        
        /// <remarks/>
        public void GetBookingAsync(string BookingId, object userState) {
            if ((this.GetBookingOperationCompleted == null)) {
                this.GetBookingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBookingOperationCompleted);
            }
            this.InvokeAsync("GetBooking", new object[] {
                        BookingId}, this.GetBookingOperationCompleted, userState);
        }
        
        private void OnGetBookingOperationCompleted(object arg) {
            if ((this.GetBookingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBookingCompleted(this, new GetBookingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/AddInfant", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet AddInfant(string strBookingID, string strAgencyCode, bool GroupBooking, bool bNoVat) {
            object[] results = this.Invoke("AddInfant", new object[] {
                        strBookingID,
                        strAgencyCode,
                        GroupBooking,
                        bNoVat});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void AddInfantAsync(string strBookingID, string strAgencyCode, bool GroupBooking, bool bNoVat) {
            this.AddInfantAsync(strBookingID, strAgencyCode, GroupBooking, bNoVat, null);
        }
        
        /// <remarks/>
        public void AddInfantAsync(string strBookingID, string strAgencyCode, bool GroupBooking, bool bNoVat, object userState) {
            if ((this.AddInfantOperationCompleted == null)) {
                this.AddInfantOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddInfantOperationCompleted);
            }
            this.InvokeAsync("AddInfant", new object[] {
                        strBookingID,
                        strAgencyCode,
                        GroupBooking,
                        bNoVat}, this.AddInfantOperationCompleted, userState);
        }
        
        private void OnAddInfantOperationCompleted(object arg) {
            if ((this.AddInfantCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddInfantCompleted(this, new AddInfantCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/CalculateBookingCreateFees", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CalculateBookingCreateFees(string AgencyCode, string strCurrency, string strBookingId, string XmlHeader, string XmlSegments, string XmlPassengers, string XmlFees, string XmlRemarks, string XmlPayments, string XmlMapping, string XMLServices, string XmlTaxes, string strLanguage, bool bNoVat) {
            object[] results = this.Invoke("CalculateBookingCreateFees", new object[] {
                        AgencyCode,
                        strCurrency,
                        strBookingId,
                        XmlHeader,
                        XmlSegments,
                        XmlPassengers,
                        XmlFees,
                        XmlRemarks,
                        XmlPayments,
                        XmlMapping,
                        XMLServices,
                        XmlTaxes,
                        strLanguage,
                        bNoVat});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CalculateBookingCreateFeesAsync(string AgencyCode, string strCurrency, string strBookingId, string XmlHeader, string XmlSegments, string XmlPassengers, string XmlFees, string XmlRemarks, string XmlPayments, string XmlMapping, string XMLServices, string XmlTaxes, string strLanguage, bool bNoVat) {
            this.CalculateBookingCreateFeesAsync(AgencyCode, strCurrency, strBookingId, XmlHeader, XmlSegments, XmlPassengers, XmlFees, XmlRemarks, XmlPayments, XmlMapping, XMLServices, XmlTaxes, strLanguage, bNoVat, null);
        }
        
        /// <remarks/>
        public void CalculateBookingCreateFeesAsync(string AgencyCode, string strCurrency, string strBookingId, string XmlHeader, string XmlSegments, string XmlPassengers, string XmlFees, string XmlRemarks, string XmlPayments, string XmlMapping, string XMLServices, string XmlTaxes, string strLanguage, bool bNoVat, object userState) {
            if ((this.CalculateBookingCreateFeesOperationCompleted == null)) {
                this.CalculateBookingCreateFeesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculateBookingCreateFeesOperationCompleted);
            }
            this.InvokeAsync("CalculateBookingCreateFees", new object[] {
                        AgencyCode,
                        strCurrency,
                        strBookingId,
                        XmlHeader,
                        XmlSegments,
                        XmlPassengers,
                        XmlFees,
                        XmlRemarks,
                        XmlPayments,
                        XmlMapping,
                        XMLServices,
                        XmlTaxes,
                        strLanguage,
                        bNoVat}, this.CalculateBookingCreateFeesOperationCompleted, userState);
        }
        
        private void OnCalculateBookingCreateFeesOperationCompleted(object arg) {
            if ((this.CalculateBookingCreateFeesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CalculateBookingCreateFeesCompleted(this, new CalculateBookingCreateFeesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/CalculateBookingChangeFees", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CalculateBookingChangeFees(string AgencyCode, string strCurrency, string strBookingId, string XmlHeader, string XmlSegments, string XmlPassengers, string XmlFees, string XmlRemarks, string XmlPayments, string XmlMapping, string XMLServices, string XmlTaxes, string strLanguage, bool bNoVat) {
            object[] results = this.Invoke("CalculateBookingChangeFees", new object[] {
                        AgencyCode,
                        strCurrency,
                        strBookingId,
                        XmlHeader,
                        XmlSegments,
                        XmlPassengers,
                        XmlFees,
                        XmlRemarks,
                        XmlPayments,
                        XmlMapping,
                        XMLServices,
                        XmlTaxes,
                        strLanguage,
                        bNoVat});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CalculateBookingChangeFeesAsync(string AgencyCode, string strCurrency, string strBookingId, string XmlHeader, string XmlSegments, string XmlPassengers, string XmlFees, string XmlRemarks, string XmlPayments, string XmlMapping, string XMLServices, string XmlTaxes, string strLanguage, bool bNoVat) {
            this.CalculateBookingChangeFeesAsync(AgencyCode, strCurrency, strBookingId, XmlHeader, XmlSegments, XmlPassengers, XmlFees, XmlRemarks, XmlPayments, XmlMapping, XMLServices, XmlTaxes, strLanguage, bNoVat, null);
        }
        
        /// <remarks/>
        public void CalculateBookingChangeFeesAsync(string AgencyCode, string strCurrency, string strBookingId, string XmlHeader, string XmlSegments, string XmlPassengers, string XmlFees, string XmlRemarks, string XmlPayments, string XmlMapping, string XMLServices, string XmlTaxes, string strLanguage, bool bNoVat, object userState) {
            if ((this.CalculateBookingChangeFeesOperationCompleted == null)) {
                this.CalculateBookingChangeFeesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculateBookingChangeFeesOperationCompleted);
            }
            this.InvokeAsync("CalculateBookingChangeFees", new object[] {
                        AgencyCode,
                        strCurrency,
                        strBookingId,
                        XmlHeader,
                        XmlSegments,
                        XmlPassengers,
                        XmlFees,
                        XmlRemarks,
                        XmlPayments,
                        XmlMapping,
                        XMLServices,
                        XmlTaxes,
                        strLanguage,
                        bNoVat}, this.CalculateBookingChangeFeesOperationCompleted, userState);
        }
        
        private void OnCalculateBookingChangeFeesOperationCompleted(object arg) {
            if ((this.CalculateBookingChangeFeesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CalculateBookingChangeFeesCompleted(this, new CalculateBookingChangeFeesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/CalculateNameChangeFees", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CalculateNameChangeFees(
                    string AgencyCode, 
                    string strCurrency, 
                    string strBookingId, 
                    string XmlHeader, 
                    string XmlSegments, 
                    string XmlPassengers, 
                    string XmlFees, 
                    string XmlRemarks, 
                    string XmlPayments, 
                    string XmlMapping, 
                    string XMLServices, 
                    string XmlTaxes, 
                    bool bBookingCreate, 
                    bool bBookingChange, 
                    bool bNameChange, 
                    bool bSeatAssign, 
                    bool bSpecialService, 
                    string strLanguage, 
                    bool bNoVat) {
            object[] results = this.Invoke("CalculateNameChangeFees", new object[] {
                        AgencyCode,
                        strCurrency,
                        strBookingId,
                        XmlHeader,
                        XmlSegments,
                        XmlPassengers,
                        XmlFees,
                        XmlRemarks,
                        XmlPayments,
                        XmlMapping,
                        XMLServices,
                        XmlTaxes,
                        bBookingCreate,
                        bBookingChange,
                        bNameChange,
                        bSeatAssign,
                        bSpecialService,
                        strLanguage,
                        bNoVat});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CalculateNameChangeFeesAsync(
                    string AgencyCode, 
                    string strCurrency, 
                    string strBookingId, 
                    string XmlHeader, 
                    string XmlSegments, 
                    string XmlPassengers, 
                    string XmlFees, 
                    string XmlRemarks, 
                    string XmlPayments, 
                    string XmlMapping, 
                    string XMLServices, 
                    string XmlTaxes, 
                    bool bBookingCreate, 
                    bool bBookingChange, 
                    bool bNameChange, 
                    bool bSeatAssign, 
                    bool bSpecialService, 
                    string strLanguage, 
                    bool bNoVat) {
            this.CalculateNameChangeFeesAsync(AgencyCode, strCurrency, strBookingId, XmlHeader, XmlSegments, XmlPassengers, XmlFees, XmlRemarks, XmlPayments, XmlMapping, XMLServices, XmlTaxes, bBookingCreate, bBookingChange, bNameChange, bSeatAssign, bSpecialService, strLanguage, bNoVat, null);
        }
        
        /// <remarks/>
        public void CalculateNameChangeFeesAsync(
                    string AgencyCode, 
                    string strCurrency, 
                    string strBookingId, 
                    string XmlHeader, 
                    string XmlSegments, 
                    string XmlPassengers, 
                    string XmlFees, 
                    string XmlRemarks, 
                    string XmlPayments, 
                    string XmlMapping, 
                    string XMLServices, 
                    string XmlTaxes, 
                    bool bBookingCreate, 
                    bool bBookingChange, 
                    bool bNameChange, 
                    bool bSeatAssign, 
                    bool bSpecialService, 
                    string strLanguage, 
                    bool bNoVat, 
                    object userState) {
            if ((this.CalculateNameChangeFeesOperationCompleted == null)) {
                this.CalculateNameChangeFeesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculateNameChangeFeesOperationCompleted);
            }
            this.InvokeAsync("CalculateNameChangeFees", new object[] {
                        AgencyCode,
                        strCurrency,
                        strBookingId,
                        XmlHeader,
                        XmlSegments,
                        XmlPassengers,
                        XmlFees,
                        XmlRemarks,
                        XmlPayments,
                        XmlMapping,
                        XMLServices,
                        XmlTaxes,
                        bBookingCreate,
                        bBookingChange,
                        bNameChange,
                        bSeatAssign,
                        bSpecialService,
                        strLanguage,
                        bNoVat}, this.CalculateNameChangeFeesOperationCompleted, userState);
        }
        
        private void OnCalculateNameChangeFeesOperationCompleted(object arg) {
            if ((this.CalculateNameChangeFeesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CalculateNameChangeFeesCompleted(this, new CalculateNameChangeFeesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/CalculateSeatAssignmentFees", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CalculateSeatAssignmentFees(string AgencyCode, string strCurrency, string strBookingId, string XmlHeader, string XmlSegments, string XmlPassengers, string XmlFees, string XmlRemarks, string XmlPayments, string XmlMapping, string XMLServices, string XmlTaxes, string strLanguage, bool bNoVat) {
            object[] results = this.Invoke("CalculateSeatAssignmentFees", new object[] {
                        AgencyCode,
                        strCurrency,
                        strBookingId,
                        XmlHeader,
                        XmlSegments,
                        XmlPassengers,
                        XmlFees,
                        XmlRemarks,
                        XmlPayments,
                        XmlMapping,
                        XMLServices,
                        XmlTaxes,
                        strLanguage,
                        bNoVat});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CalculateSeatAssignmentFeesAsync(string AgencyCode, string strCurrency, string strBookingId, string XmlHeader, string XmlSegments, string XmlPassengers, string XmlFees, string XmlRemarks, string XmlPayments, string XmlMapping, string XMLServices, string XmlTaxes, string strLanguage, bool bNoVat) {
            this.CalculateSeatAssignmentFeesAsync(AgencyCode, strCurrency, strBookingId, XmlHeader, XmlSegments, XmlPassengers, XmlFees, XmlRemarks, XmlPayments, XmlMapping, XMLServices, XmlTaxes, strLanguage, bNoVat, null);
        }
        
        /// <remarks/>
        public void CalculateSeatAssignmentFeesAsync(string AgencyCode, string strCurrency, string strBookingId, string XmlHeader, string XmlSegments, string XmlPassengers, string XmlFees, string XmlRemarks, string XmlPayments, string XmlMapping, string XMLServices, string XmlTaxes, string strLanguage, bool bNoVat, object userState) {
            if ((this.CalculateSeatAssignmentFeesOperationCompleted == null)) {
                this.CalculateSeatAssignmentFeesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculateSeatAssignmentFeesOperationCompleted);
            }
            this.InvokeAsync("CalculateSeatAssignmentFees", new object[] {
                        AgencyCode,
                        strCurrency,
                        strBookingId,
                        XmlHeader,
                        XmlSegments,
                        XmlPassengers,
                        XmlFees,
                        XmlRemarks,
                        XmlPayments,
                        XmlMapping,
                        XMLServices,
                        XmlTaxes,
                        strLanguage,
                        bNoVat}, this.CalculateSeatAssignmentFeesOperationCompleted, userState);
        }
        
        private void OnCalculateSeatAssignmentFeesOperationCompleted(object arg) {
            if ((this.CalculateSeatAssignmentFeesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CalculateSeatAssignmentFeesCompleted(this, new CalculateSeatAssignmentFeesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/CalculateSpecialServiceFees", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CalculateSpecialServiceFees(string AgencyCode, string strCurrency, string strBookingId, string XmlHeader, string XMLServices, string XmlFees, string XmlRemarks, string XmlMapping, string strLanguage, bool bNoVat) {
            object[] results = this.Invoke("CalculateSpecialServiceFees", new object[] {
                        AgencyCode,
                        strCurrency,
                        strBookingId,
                        XmlHeader,
                        XMLServices,
                        XmlFees,
                        XmlRemarks,
                        XmlMapping,
                        strLanguage,
                        bNoVat});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CalculateSpecialServiceFeesAsync(string AgencyCode, string strCurrency, string strBookingId, string XmlHeader, string XMLServices, string XmlFees, string XmlRemarks, string XmlMapping, string strLanguage, bool bNoVat) {
            this.CalculateSpecialServiceFeesAsync(AgencyCode, strCurrency, strBookingId, XmlHeader, XMLServices, XmlFees, XmlRemarks, XmlMapping, strLanguage, bNoVat, null);
        }
        
        /// <remarks/>
        public void CalculateSpecialServiceFeesAsync(string AgencyCode, string strCurrency, string strBookingId, string XmlHeader, string XMLServices, string XmlFees, string XmlRemarks, string XmlMapping, string strLanguage, bool bNoVat, object userState) {
            if ((this.CalculateSpecialServiceFeesOperationCompleted == null)) {
                this.CalculateSpecialServiceFeesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculateSpecialServiceFeesOperationCompleted);
            }
            this.InvokeAsync("CalculateSpecialServiceFees", new object[] {
                        AgencyCode,
                        strCurrency,
                        strBookingId,
                        XmlHeader,
                        XMLServices,
                        XmlFees,
                        XmlRemarks,
                        XmlMapping,
                        strLanguage,
                        bNoVat}, this.CalculateSpecialServiceFeesOperationCompleted, userState);
        }
        
        private void OnCalculateSpecialServiceFeesOperationCompleted(object arg) {
            if ((this.CalculateSpecialServiceFeesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CalculateSpecialServiceFeesCompleted(this, new CalculateSpecialServiceFeesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/CalculateNewFees", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CalculateNewFees(
                    string strBookingId, 
                    string AgencyCode, 
                    string XmlHeader, 
                    string XmlSegments, 
                    string XmlPassengers, 
                    string XmlPayments, 
                    string XmlRemarks, 
                    string XmlMapping, 
                    string XmlFees, 
                    string XmlTaxes, 
                    string XmlQuotes, 
                    string XMLServices, 
                    string strCurrency, 
                    bool bBookingCreate, 
                    bool bBookingChange, 
                    bool bNameChange, 
                    bool bSeatAssign, 
                    string strLanguage, 
                    bool bNoVat) {
            object[] results = this.Invoke("CalculateNewFees", new object[] {
                        strBookingId,
                        AgencyCode,
                        XmlHeader,
                        XmlSegments,
                        XmlPassengers,
                        XmlPayments,
                        XmlRemarks,
                        XmlMapping,
                        XmlFees,
                        XmlTaxes,
                        XmlQuotes,
                        XMLServices,
                        strCurrency,
                        bBookingCreate,
                        bBookingChange,
                        bNameChange,
                        bSeatAssign,
                        strLanguage,
                        bNoVat});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CalculateNewFeesAsync(
                    string strBookingId, 
                    string AgencyCode, 
                    string XmlHeader, 
                    string XmlSegments, 
                    string XmlPassengers, 
                    string XmlPayments, 
                    string XmlRemarks, 
                    string XmlMapping, 
                    string XmlFees, 
                    string XmlTaxes, 
                    string XmlQuotes, 
                    string XMLServices, 
                    string strCurrency, 
                    bool bBookingCreate, 
                    bool bBookingChange, 
                    bool bNameChange, 
                    bool bSeatAssign, 
                    string strLanguage, 
                    bool bNoVat) {
            this.CalculateNewFeesAsync(strBookingId, AgencyCode, XmlHeader, XmlSegments, XmlPassengers, XmlPayments, XmlRemarks, XmlMapping, XmlFees, XmlTaxes, XmlQuotes, XMLServices, strCurrency, bBookingCreate, bBookingChange, bNameChange, bSeatAssign, strLanguage, bNoVat, null);
        }
        
        /// <remarks/>
        public void CalculateNewFeesAsync(
                    string strBookingId, 
                    string AgencyCode, 
                    string XmlHeader, 
                    string XmlSegments, 
                    string XmlPassengers, 
                    string XmlPayments, 
                    string XmlRemarks, 
                    string XmlMapping, 
                    string XmlFees, 
                    string XmlTaxes, 
                    string XmlQuotes, 
                    string XMLServices, 
                    string strCurrency, 
                    bool bBookingCreate, 
                    bool bBookingChange, 
                    bool bNameChange, 
                    bool bSeatAssign, 
                    string strLanguage, 
                    bool bNoVat, 
                    object userState) {
            if ((this.CalculateNewFeesOperationCompleted == null)) {
                this.CalculateNewFeesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculateNewFeesOperationCompleted);
            }
            this.InvokeAsync("CalculateNewFees", new object[] {
                        strBookingId,
                        AgencyCode,
                        XmlHeader,
                        XmlSegments,
                        XmlPassengers,
                        XmlPayments,
                        XmlRemarks,
                        XmlMapping,
                        XmlFees,
                        XmlTaxes,
                        XmlQuotes,
                        XMLServices,
                        strCurrency,
                        bBookingCreate,
                        bBookingChange,
                        bNameChange,
                        bSeatAssign,
                        strLanguage,
                        bNoVat}, this.CalculateNewFeesOperationCompleted, userState);
        }
        
        private void OnCalculateNewFeesOperationCompleted(object arg) {
            if ((this.CalculateNewFeesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CalculateNewFeesCompleted(this, new CalculateNewFeesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/TikSqlDBWebServices/TestWebService", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TestWebService(string TestReference) {
            object[] results = this.Invoke("TestWebService", new object[] {
                        TestReference});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TestWebServiceAsync(string TestReference) {
            this.TestWebServiceAsync(TestReference, null);
        }
        
        /// <remarks/>
        public void TestWebServiceAsync(string TestReference, object userState) {
            if ((this.TestWebServiceOperationCompleted == null)) {
                this.TestWebServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestWebServiceOperationCompleted);
            }
            this.InvokeAsync("TestWebService", new object[] {
                        TestReference}, this.TestWebServiceOperationCompleted, userState);
        }
        
        private void OnTestWebServiceOperationCompleted(object arg) {
            if ((this.TestWebServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestWebServiceCompleted(this, new TestWebServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetItinerary", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetItinerary(string BookingId, string PassengerId, string strLanguageCode) {
            object[] results = this.Invoke("GetItinerary", new object[] {
                        BookingId,
                        PassengerId,
                        strLanguageCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetItineraryAsync(string BookingId, string PassengerId, string strLanguageCode) {
            this.GetItineraryAsync(BookingId, PassengerId, strLanguageCode, null);
        }
        
        /// <remarks/>
        public void GetItineraryAsync(string BookingId, string PassengerId, string strLanguageCode, object userState) {
            if ((this.GetItineraryOperationCompleted == null)) {
                this.GetItineraryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetItineraryOperationCompleted);
            }
            this.InvokeAsync("GetItinerary", new object[] {
                        BookingId,
                        PassengerId,
                        strLanguageCode}, this.GetItineraryOperationCompleted, userState);
        }
        
        private void OnGetItineraryOperationCompleted(object arg) {
            if ((this.GetItineraryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetItineraryCompleted(this, new GetItineraryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetSeatMap", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetSeatMap(string Origin, string Destination, string FlightId, string BoardingClass, string BookingClass, string strLanguage) {
            object[] results = this.Invoke("GetSeatMap", new object[] {
                        Origin,
                        Destination,
                        FlightId,
                        BoardingClass,
                        BookingClass,
                        strLanguage});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetSeatMapAsync(string Origin, string Destination, string FlightId, string BoardingClass, string BookingClass, string strLanguage) {
            this.GetSeatMapAsync(Origin, Destination, FlightId, BoardingClass, BookingClass, strLanguage, null);
        }
        
        /// <remarks/>
        public void GetSeatMapAsync(string Origin, string Destination, string FlightId, string BoardingClass, string BookingClass, string strLanguage, object userState) {
            if ((this.GetSeatMapOperationCompleted == null)) {
                this.GetSeatMapOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSeatMapOperationCompleted);
            }
            this.InvokeAsync("GetSeatMap", new object[] {
                        Origin,
                        Destination,
                        FlightId,
                        BoardingClass,
                        BookingClass,
                        strLanguage}, this.GetSeatMapOperationCompleted, userState);
        }
        
        private void OnGetSeatMapOperationCompleted(object arg) {
            if ((this.GetSeatMapCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSeatMapCompleted(this, new GetSeatMapCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetSeatMapLayout", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetSeatMapLayout(string strFlightId, string strOrigin, string strDestination, string strBoardingClass, string strConfiguration, string strLanguage) {
            object[] results = this.Invoke("GetSeatMapLayout", new object[] {
                        strFlightId,
                        strOrigin,
                        strDestination,
                        strBoardingClass,
                        strConfiguration,
                        strLanguage});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetSeatMapLayoutAsync(string strFlightId, string strOrigin, string strDestination, string strBoardingClass, string strConfiguration, string strLanguage) {
            this.GetSeatMapLayoutAsync(strFlightId, strOrigin, strDestination, strBoardingClass, strConfiguration, strLanguage, null);
        }
        
        /// <remarks/>
        public void GetSeatMapLayoutAsync(string strFlightId, string strOrigin, string strDestination, string strBoardingClass, string strConfiguration, string strLanguage, object userState) {
            if ((this.GetSeatMapLayoutOperationCompleted == null)) {
                this.GetSeatMapLayoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSeatMapLayoutOperationCompleted);
            }
            this.InvokeAsync("GetSeatMapLayout", new object[] {
                        strFlightId,
                        strOrigin,
                        strDestination,
                        strBoardingClass,
                        strConfiguration,
                        strLanguage}, this.GetSeatMapLayoutOperationCompleted, userState);
        }
        
        private void OnGetSeatMapLayoutOperationCompleted(object arg) {
            if ((this.GetSeatMapLayoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSeatMapLayoutCompleted(this, new GetSeatMapLayoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetPassengerDetails", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPassengerDetails(string PassengerId, string BookingSegmentId, string FlightId, string xmlCheckinPassengers, bool bPassenger, bool bRemarks, bool bServices, bool bBaggage, bool bSegment, bool bFee, bool bBookingDetails, string LanguageCode, string strOrigin) {
            object[] results = this.Invoke("GetPassengerDetails", new object[] {
                        PassengerId,
                        BookingSegmentId,
                        FlightId,
                        xmlCheckinPassengers,
                        bPassenger,
                        bRemarks,
                        bServices,
                        bBaggage,
                        bSegment,
                        bFee,
                        bBookingDetails,
                        LanguageCode,
                        strOrigin});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPassengerDetailsAsync(string PassengerId, string BookingSegmentId, string FlightId, string xmlCheckinPassengers, bool bPassenger, bool bRemarks, bool bServices, bool bBaggage, bool bSegment, bool bFee, bool bBookingDetails, string LanguageCode, string strOrigin) {
            this.GetPassengerDetailsAsync(PassengerId, BookingSegmentId, FlightId, xmlCheckinPassengers, bPassenger, bRemarks, bServices, bBaggage, bSegment, bFee, bBookingDetails, LanguageCode, strOrigin, null);
        }
        
        /// <remarks/>
        public void GetPassengerDetailsAsync(string PassengerId, string BookingSegmentId, string FlightId, string xmlCheckinPassengers, bool bPassenger, bool bRemarks, bool bServices, bool bBaggage, bool bSegment, bool bFee, bool bBookingDetails, string LanguageCode, string strOrigin, object userState) {
            if ((this.GetPassengerDetailsOperationCompleted == null)) {
                this.GetPassengerDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPassengerDetailsOperationCompleted);
            }
            this.InvokeAsync("GetPassengerDetails", new object[] {
                        PassengerId,
                        BookingSegmentId,
                        FlightId,
                        xmlCheckinPassengers,
                        bPassenger,
                        bRemarks,
                        bServices,
                        bBaggage,
                        bSegment,
                        bFee,
                        bBookingDetails,
                        LanguageCode,
                        strOrigin}, this.GetPassengerDetailsOperationCompleted, userState);
        }
        
        private void OnGetPassengerDetailsOperationCompleted(object arg) {
            if ((this.GetPassengerDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPassengerDetailsCompleted(this, new GetPassengerDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/CheckInSave", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckInSave(string xmlMapping, string xmlBaggageTag, string xmlSeatAssignment, string xmlPassengers, string xmlService, string xmlRemarks, string xmlBookingSegment, string xmlFee) {
            object[] results = this.Invoke("CheckInSave", new object[] {
                        xmlMapping,
                        xmlBaggageTag,
                        xmlSeatAssignment,
                        xmlPassengers,
                        xmlService,
                        xmlRemarks,
                        xmlBookingSegment,
                        xmlFee});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckInSaveAsync(string xmlMapping, string xmlBaggageTag, string xmlSeatAssignment, string xmlPassengers, string xmlService, string xmlRemarks, string xmlBookingSegment, string xmlFee) {
            this.CheckInSaveAsync(xmlMapping, xmlBaggageTag, xmlSeatAssignment, xmlPassengers, xmlService, xmlRemarks, xmlBookingSegment, xmlFee, null);
        }
        
        /// <remarks/>
        public void CheckInSaveAsync(string xmlMapping, string xmlBaggageTag, string xmlSeatAssignment, string xmlPassengers, string xmlService, string xmlRemarks, string xmlBookingSegment, string xmlFee, object userState) {
            if ((this.CheckInSaveOperationCompleted == null)) {
                this.CheckInSaveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckInSaveOperationCompleted);
            }
            this.InvokeAsync("CheckInSave", new object[] {
                        xmlMapping,
                        xmlBaggageTag,
                        xmlSeatAssignment,
                        xmlPassengers,
                        xmlService,
                        xmlRemarks,
                        xmlBookingSegment,
                        xmlFee}, this.CheckInSaveOperationCompleted, userState);
        }
        
        private void OnCheckInSaveOperationCompleted(object arg) {
            if ((this.CheckInSaveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckInSaveCompleted(this, new CheckInSaveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/SaveBookingHeader", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SaveBookingHeader(string xmlBookingHeader) {
            object[] results = this.Invoke("SaveBookingHeader", new object[] {
                        xmlBookingHeader});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SaveBookingHeaderAsync(string xmlBookingHeader) {
            this.SaveBookingHeaderAsync(xmlBookingHeader, null);
        }
        
        /// <remarks/>
        public void SaveBookingHeaderAsync(string xmlBookingHeader, object userState) {
            if ((this.SaveBookingHeaderOperationCompleted == null)) {
                this.SaveBookingHeaderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveBookingHeaderOperationCompleted);
            }
            this.InvokeAsync("SaveBookingHeader", new object[] {
                        xmlBookingHeader}, this.SaveBookingHeaderOperationCompleted, userState);
        }
        
        private void OnSaveBookingHeaderOperationCompleted(object arg) {
            if ((this.SaveBookingHeaderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveBookingHeaderCompleted(this, new SaveBookingHeaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetCountrys", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetCountry(string strLanguage) {
            object[] results = this.Invoke("GetCountry", new object[] {
                        strLanguage});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetCountryAsync(string strLanguage) {
            this.GetCountryAsync(strLanguage, null);
        }
        
        /// <remarks/>
        public void GetCountryAsync(string strLanguage, object userState) {
            if ((this.GetCountryOperationCompleted == null)) {
                this.GetCountryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCountryOperationCompleted);
            }
            this.InvokeAsync("GetCountry", new object[] {
                        strLanguage}, this.GetCountryOperationCompleted, userState);
        }
        
        private void OnGetCountryOperationCompleted(object arg) {
            if ((this.GetCountryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCountryCompleted(this, new GetCountryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetLanguages", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetLanguages(string strLanguage) {
            object[] results = this.Invoke("GetLanguages", new object[] {
                        strLanguage});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetLanguagesAsync(string strLanguage) {
            this.GetLanguagesAsync(strLanguage, null);
        }
        
        /// <remarks/>
        public void GetLanguagesAsync(string strLanguage, object userState) {
            if ((this.GetLanguagesOperationCompleted == null)) {
                this.GetLanguagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLanguagesOperationCompleted);
            }
            this.InvokeAsync("GetLanguages", new object[] {
                        strLanguage}, this.GetLanguagesOperationCompleted, userState);
        }
        
        private void OnGetLanguagesOperationCompleted(object arg) {
            if ((this.GetLanguagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLanguagesCompleted(this, new GetLanguagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetCurrencies", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetCurrencies(string strLanguage) {
            object[] results = this.Invoke("GetCurrencies", new object[] {
                        strLanguage});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetCurrenciesAsync(string strLanguage) {
            this.GetCurrenciesAsync(strLanguage, null);
        }
        
        /// <remarks/>
        public void GetCurrenciesAsync(string strLanguage, object userState) {
            if ((this.GetCurrenciesOperationCompleted == null)) {
                this.GetCurrenciesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrenciesOperationCompleted);
            }
            this.InvokeAsync("GetCurrencies", new object[] {
                        strLanguage}, this.GetCurrenciesOperationCompleted, userState);
        }
        
        private void OnGetCurrenciesOperationCompleted(object arg) {
            if ((this.GetCurrenciesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrenciesCompleted(this, new GetCurrenciesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetRemarkTypes", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetRemarkTypes(string Language) {
            object[] results = this.Invoke("GetRemarkTypes", new object[] {
                        Language});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetRemarkTypesAsync(string Language) {
            this.GetRemarkTypesAsync(Language, null);
        }
        
        /// <remarks/>
        public void GetRemarkTypesAsync(string Language, object userState) {
            if ((this.GetRemarkTypesOperationCompleted == null)) {
                this.GetRemarkTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRemarkTypesOperationCompleted);
            }
            this.InvokeAsync("GetRemarkTypes", new object[] {
                        Language}, this.GetRemarkTypesOperationCompleted, userState);
        }
        
        private void OnGetRemarkTypesOperationCompleted(object arg) {
            if ((this.GetRemarkTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRemarkTypesCompleted(this, new GetRemarkTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/PaymentSave", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PaymentSave(string BookingId, string XmlMapping, string XmlFees, string XmlPayments) {
            object[] results = this.Invoke("PaymentSave", new object[] {
                        BookingId,
                        XmlMapping,
                        XmlFees,
                        XmlPayments});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PaymentSaveAsync(string BookingId, string XmlMapping, string XmlFees, string XmlPayments) {
            this.PaymentSaveAsync(BookingId, XmlMapping, XmlFees, XmlPayments, null);
        }
        
        /// <remarks/>
        public void PaymentSaveAsync(string BookingId, string XmlMapping, string XmlFees, string XmlPayments, object userState) {
            if ((this.PaymentSaveOperationCompleted == null)) {
                this.PaymentSaveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPaymentSaveOperationCompleted);
            }
            this.InvokeAsync("PaymentSave", new object[] {
                        BookingId,
                        XmlMapping,
                        XmlFees,
                        XmlPayments}, this.PaymentSaveOperationCompleted, userState);
        }
        
        private void OnPaymentSaveOperationCompleted(object arg) {
            if ((this.PaymentSaveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PaymentSaveCompleted(this, new PaymentSaveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/PaymentSaveAdjust", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PaymentSaveAdjust(string BookingId, string XmlMapping, string XmlFees, string XmlPayments, string XmlPaymentFees) {
            object[] results = this.Invoke("PaymentSaveAdjust", new object[] {
                        BookingId,
                        XmlMapping,
                        XmlFees,
                        XmlPayments,
                        XmlPaymentFees});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PaymentSaveAdjustAsync(string BookingId, string XmlMapping, string XmlFees, string XmlPayments, string XmlPaymentFees) {
            this.PaymentSaveAdjustAsync(BookingId, XmlMapping, XmlFees, XmlPayments, XmlPaymentFees, null);
        }
        
        /// <remarks/>
        public void PaymentSaveAdjustAsync(string BookingId, string XmlMapping, string XmlFees, string XmlPayments, string XmlPaymentFees, object userState) {
            if ((this.PaymentSaveAdjustOperationCompleted == null)) {
                this.PaymentSaveAdjustOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPaymentSaveAdjustOperationCompleted);
            }
            this.InvokeAsync("PaymentSaveAdjust", new object[] {
                        BookingId,
                        XmlMapping,
                        XmlFees,
                        XmlPayments,
                        XmlPaymentFees}, this.PaymentSaveAdjustOperationCompleted, userState);
        }
        
        private void OnPaymentSaveAdjustOperationCompleted(object arg) {
            if ((this.PaymentSaveAdjustCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PaymentSaveAdjustCompleted(this, new PaymentSaveAdjustCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/SaveBooking", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SaveBooking(string BookingId, string XmlHeader, string XmlSegments, string XmlPassengers, string XmlPayments, string XmlRemarks, string XmlMapping, string XmlFees, string XmlTaxes, string XmlQuotes, string XMLServices, bool CreateTickets, string CancelSegmentId, string strLanguage) {
            object[] results = this.Invoke("SaveBooking", new object[] {
                        BookingId,
                        XmlHeader,
                        XmlSegments,
                        XmlPassengers,
                        XmlPayments,
                        XmlRemarks,
                        XmlMapping,
                        XmlFees,
                        XmlTaxes,
                        XmlQuotes,
                        XMLServices,
                        CreateTickets,
                        CancelSegmentId,
                        strLanguage});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SaveBookingAsync(string BookingId, string XmlHeader, string XmlSegments, string XmlPassengers, string XmlPayments, string XmlRemarks, string XmlMapping, string XmlFees, string XmlTaxes, string XmlQuotes, string XMLServices, bool CreateTickets, string CancelSegmentId, string strLanguage) {
            this.SaveBookingAsync(BookingId, XmlHeader, XmlSegments, XmlPassengers, XmlPayments, XmlRemarks, XmlMapping, XmlFees, XmlTaxes, XmlQuotes, XMLServices, CreateTickets, CancelSegmentId, strLanguage, null);
        }
        
        /// <remarks/>
        public void SaveBookingAsync(string BookingId, string XmlHeader, string XmlSegments, string XmlPassengers, string XmlPayments, string XmlRemarks, string XmlMapping, string XmlFees, string XmlTaxes, string XmlQuotes, string XMLServices, bool CreateTickets, string CancelSegmentId, string strLanguage, object userState) {
            if ((this.SaveBookingOperationCompleted == null)) {
                this.SaveBookingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveBookingOperationCompleted);
            }
            this.InvokeAsync("SaveBooking", new object[] {
                        BookingId,
                        XmlHeader,
                        XmlSegments,
                        XmlPassengers,
                        XmlPayments,
                        XmlRemarks,
                        XmlMapping,
                        XmlFees,
                        XmlTaxes,
                        XmlQuotes,
                        XMLServices,
                        CreateTickets,
                        CancelSegmentId,
                        strLanguage}, this.SaveBookingOperationCompleted, userState);
        }
        
        private void OnSaveBookingOperationCompleted(object arg) {
            if ((this.SaveBookingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveBookingCompleted(this, new SaveBookingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/SplitBooking", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SplitBooking(string XmlPassengers, string strBookingIdOld, string strReceivedFrom, string strUserId, string strAgencyCode, string strUserCode, bool bCopyRemark) {
            object[] results = this.Invoke("SplitBooking", new object[] {
                        XmlPassengers,
                        strBookingIdOld,
                        strReceivedFrom,
                        strUserId,
                        strAgencyCode,
                        strUserCode,
                        bCopyRemark});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SplitBookingAsync(string XmlPassengers, string strBookingIdOld, string strReceivedFrom, string strUserId, string strAgencyCode, string strUserCode, bool bCopyRemark) {
            this.SplitBookingAsync(XmlPassengers, strBookingIdOld, strReceivedFrom, strUserId, strAgencyCode, strUserCode, bCopyRemark, null);
        }
        
        /// <remarks/>
        public void SplitBookingAsync(string XmlPassengers, string strBookingIdOld, string strReceivedFrom, string strUserId, string strAgencyCode, string strUserCode, bool bCopyRemark, object userState) {
            if ((this.SplitBookingOperationCompleted == null)) {
                this.SplitBookingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSplitBookingOperationCompleted);
            }
            this.InvokeAsync("SplitBooking", new object[] {
                        XmlPassengers,
                        strBookingIdOld,
                        strReceivedFrom,
                        strUserId,
                        strAgencyCode,
                        strUserCode,
                        bCopyRemark}, this.SplitBookingOperationCompleted, userState);
        }
        
        private void OnSplitBookingOperationCompleted(object arg) {
            if ((this.SplitBookingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SplitBookingCompleted(this, new SplitBookingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/AddFlight", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet AddFlight(
                    string xmlFlights, 
                    string xmlPassengers, 
                    string BookingId, 
                    string Boardpoint, 
                    string Offpoint, 
                    string AgencyCode, 
                    System.DateTime dtFlight, 
                    string FlightId, 
                    ref string FareId, 
                    ref string BoardingClass, 
                    ref string BookingClass, 
                    short Adults, 
                    short Childs, 
                    short Infants, 
                    short Others, 
                    string OtherPassengerType, 
                    string CreateById, 
                    string strIpAddress, 
                    string strLanguageCode, 
                    string strCurrencyCode, 
                    bool bNoVat) {
            object[] results = this.Invoke("AddFlight", new object[] {
                        xmlFlights,
                        xmlPassengers,
                        BookingId,
                        Boardpoint,
                        Offpoint,
                        AgencyCode,
                        dtFlight,
                        FlightId,
                        FareId,
                        BoardingClass,
                        BookingClass,
                        Adults,
                        Childs,
                        Infants,
                        Others,
                        OtherPassengerType,
                        CreateById,
                        strIpAddress,
                        strLanguageCode,
                        strCurrencyCode,
                        bNoVat});
            FareId = ((string)(results[1]));
            BoardingClass = ((string)(results[2]));
            BookingClass = ((string)(results[3]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void AddFlightAsync(
                    string xmlFlights, 
                    string xmlPassengers, 
                    string BookingId, 
                    string Boardpoint, 
                    string Offpoint, 
                    string AgencyCode, 
                    System.DateTime dtFlight, 
                    string FlightId, 
                    string FareId, 
                    string BoardingClass, 
                    string BookingClass, 
                    short Adults, 
                    short Childs, 
                    short Infants, 
                    short Others, 
                    string OtherPassengerType, 
                    string CreateById, 
                    string strIpAddress, 
                    string strLanguageCode, 
                    string strCurrencyCode, 
                    bool bNoVat) {
            this.AddFlightAsync(xmlFlights, xmlPassengers, BookingId, Boardpoint, Offpoint, AgencyCode, dtFlight, FlightId, FareId, BoardingClass, BookingClass, Adults, Childs, Infants, Others, OtherPassengerType, CreateById, strIpAddress, strLanguageCode, strCurrencyCode, bNoVat, null);
        }
        
        /// <remarks/>
        public void AddFlightAsync(
                    string xmlFlights, 
                    string xmlPassengers, 
                    string BookingId, 
                    string Boardpoint, 
                    string Offpoint, 
                    string AgencyCode, 
                    System.DateTime dtFlight, 
                    string FlightId, 
                    string FareId, 
                    string BoardingClass, 
                    string BookingClass, 
                    short Adults, 
                    short Childs, 
                    short Infants, 
                    short Others, 
                    string OtherPassengerType, 
                    string CreateById, 
                    string strIpAddress, 
                    string strLanguageCode, 
                    string strCurrencyCode, 
                    bool bNoVat, 
                    object userState) {
            if ((this.AddFlightOperationCompleted == null)) {
                this.AddFlightOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddFlightOperationCompleted);
            }
            this.InvokeAsync("AddFlight", new object[] {
                        xmlFlights,
                        xmlPassengers,
                        BookingId,
                        Boardpoint,
                        Offpoint,
                        AgencyCode,
                        dtFlight,
                        FlightId,
                        FareId,
                        BoardingClass,
                        BookingClass,
                        Adults,
                        Childs,
                        Infants,
                        Others,
                        OtherPassengerType,
                        CreateById,
                        strIpAddress,
                        strLanguageCode,
                        strCurrencyCode,
                        bNoVat}, this.AddFlightOperationCompleted, userState);
        }
        
        private void OnAddFlightOperationCompleted(object arg) {
            if ((this.AddFlightCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddFlightCompleted(this, new AddFlightCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/ChangeSegmentAddFlight", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ChangeSegmentAddFlight(
                    string CancelSegmentId, 
                    string xmlHeader, 
                    string xmlPassenger, 
                    string xmlSegment, 
                    string xmlMapping, 
                    string xmlTax, 
                    string xmlService, 
                    string AgencyCode, 
                    string xmlQuote, 
                    string xmlRemarks, 
                    string xmlFlights, 
                    System.DateTime FlightDate, 
                    string BookingID, 
                    string Boardpoint, 
                    string Offpoint, 
                    string FlightID, 
                    string FareId, 
                    string Airline, 
                    string Flight, 
                    string BoardingClass, 
                    string BookingClass, 
                    string LanguageCode, 
                    string CurrencyCode, 
                    bool ETicket, 
                    bool Refundable, 
                    bool GroupBooking, 
                    bool Waitlist, 
                    bool QuoteOnly, 
                    bool NonRevenue, 
                    bool SubjectToAvailability, 
                    string MarketingAirline, 
                    string MarketingFlight, 
                    string SegmentId, 
                    short IdReduction, 
                    string xmlFees, 
                    string strLanguage, 
                    bool bNoVat) {
            object[] results = this.Invoke("ChangeSegmentAddFlight", new object[] {
                        CancelSegmentId,
                        xmlHeader,
                        xmlPassenger,
                        xmlSegment,
                        xmlMapping,
                        xmlTax,
                        xmlService,
                        AgencyCode,
                        xmlQuote,
                        xmlRemarks,
                        xmlFlights,
                        FlightDate,
                        BookingID,
                        Boardpoint,
                        Offpoint,
                        FlightID,
                        FareId,
                        Airline,
                        Flight,
                        BoardingClass,
                        BookingClass,
                        LanguageCode,
                        CurrencyCode,
                        ETicket,
                        Refundable,
                        GroupBooking,
                        Waitlist,
                        QuoteOnly,
                        NonRevenue,
                        SubjectToAvailability,
                        MarketingAirline,
                        MarketingFlight,
                        SegmentId,
                        IdReduction,
                        xmlFees,
                        strLanguage,
                        bNoVat});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeSegmentAddFlightAsync(
                    string CancelSegmentId, 
                    string xmlHeader, 
                    string xmlPassenger, 
                    string xmlSegment, 
                    string xmlMapping, 
                    string xmlTax, 
                    string xmlService, 
                    string AgencyCode, 
                    string xmlQuote, 
                    string xmlRemarks, 
                    string xmlFlights, 
                    System.DateTime FlightDate, 
                    string BookingID, 
                    string Boardpoint, 
                    string Offpoint, 
                    string FlightID, 
                    string FareId, 
                    string Airline, 
                    string Flight, 
                    string BoardingClass, 
                    string BookingClass, 
                    string LanguageCode, 
                    string CurrencyCode, 
                    bool ETicket, 
                    bool Refundable, 
                    bool GroupBooking, 
                    bool Waitlist, 
                    bool QuoteOnly, 
                    bool NonRevenue, 
                    bool SubjectToAvailability, 
                    string MarketingAirline, 
                    string MarketingFlight, 
                    string SegmentId, 
                    short IdReduction, 
                    string xmlFees, 
                    string strLanguage, 
                    bool bNoVat) {
            this.ChangeSegmentAddFlightAsync(CancelSegmentId, xmlHeader, xmlPassenger, xmlSegment, xmlMapping, xmlTax, xmlService, AgencyCode, xmlQuote, xmlRemarks, xmlFlights, FlightDate, BookingID, Boardpoint, Offpoint, FlightID, FareId, Airline, Flight, BoardingClass, BookingClass, LanguageCode, CurrencyCode, ETicket, Refundable, GroupBooking, Waitlist, QuoteOnly, NonRevenue, SubjectToAvailability, MarketingAirline, MarketingFlight, SegmentId, IdReduction, xmlFees, strLanguage, bNoVat, null);
        }
        
        /// <remarks/>
        public void ChangeSegmentAddFlightAsync(
                    string CancelSegmentId, 
                    string xmlHeader, 
                    string xmlPassenger, 
                    string xmlSegment, 
                    string xmlMapping, 
                    string xmlTax, 
                    string xmlService, 
                    string AgencyCode, 
                    string xmlQuote, 
                    string xmlRemarks, 
                    string xmlFlights, 
                    System.DateTime FlightDate, 
                    string BookingID, 
                    string Boardpoint, 
                    string Offpoint, 
                    string FlightID, 
                    string FareId, 
                    string Airline, 
                    string Flight, 
                    string BoardingClass, 
                    string BookingClass, 
                    string LanguageCode, 
                    string CurrencyCode, 
                    bool ETicket, 
                    bool Refundable, 
                    bool GroupBooking, 
                    bool Waitlist, 
                    bool QuoteOnly, 
                    bool NonRevenue, 
                    bool SubjectToAvailability, 
                    string MarketingAirline, 
                    string MarketingFlight, 
                    string SegmentId, 
                    short IdReduction, 
                    string xmlFees, 
                    string strLanguage, 
                    bool bNoVat, 
                    object userState) {
            if ((this.ChangeSegmentAddFlightOperationCompleted == null)) {
                this.ChangeSegmentAddFlightOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeSegmentAddFlightOperationCompleted);
            }
            this.InvokeAsync("ChangeSegmentAddFlight", new object[] {
                        CancelSegmentId,
                        xmlHeader,
                        xmlPassenger,
                        xmlSegment,
                        xmlMapping,
                        xmlTax,
                        xmlService,
                        AgencyCode,
                        xmlQuote,
                        xmlRemarks,
                        xmlFlights,
                        FlightDate,
                        BookingID,
                        Boardpoint,
                        Offpoint,
                        FlightID,
                        FareId,
                        Airline,
                        Flight,
                        BoardingClass,
                        BookingClass,
                        LanguageCode,
                        CurrencyCode,
                        ETicket,
                        Refundable,
                        GroupBooking,
                        Waitlist,
                        QuoteOnly,
                        NonRevenue,
                        SubjectToAvailability,
                        MarketingAirline,
                        MarketingFlight,
                        SegmentId,
                        IdReduction,
                        xmlFees,
                        strLanguage,
                        bNoVat}, this.ChangeSegmentAddFlightOperationCompleted, userState);
        }
        
        private void OnChangeSegmentAddFlightOperationCompleted(object arg) {
            if ((this.ChangeSegmentAddFlightCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeSegmentAddFlightCompleted(this, new ChangeSegmentAddFlightCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetCompactFlightAvailability", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCompactFlightAvailability(
                    bool FirstSegment, 
                    string bookingId, 
                    string Origin, 
                    string Destination, 
                    System.DateTime DateFrom, 
                    System.DateTime DateTo, 
                    System.DateTime DateBooking, 
                    short Adult, 
                    short Child, 
                    short Infant, 
                    short Other, 
                    string OtherPassengerType, 
                    string BoardingClass, 
                    string BookingClass, 
                    string DayTimeIndicator, 
                    string AgencyCode, 
                    string CurrencyCode, 
                    string FlightId, 
                    string FareId, 
                    double MaxAmount, 
                    bool NonStopOnly, 
                    bool IncludeDeparted, 
                    bool IncludeCancelled, 
                    bool IncludeWaitlisted, 
                    bool IncludeSoldOut, 
                    bool Refundable, 
                    bool GroupFares, 
                    bool ItFaresOnly, 
                    string PromotionCode, 
                    string FareType) {
            object[] results = this.Invoke("GetCompactFlightAvailability", new object[] {
                        FirstSegment,
                        bookingId,
                        Origin,
                        Destination,
                        DateFrom,
                        DateTo,
                        DateBooking,
                        Adult,
                        Child,
                        Infant,
                        Other,
                        OtherPassengerType,
                        BoardingClass,
                        BookingClass,
                        DayTimeIndicator,
                        AgencyCode,
                        CurrencyCode,
                        FlightId,
                        FareId,
                        MaxAmount,
                        NonStopOnly,
                        IncludeDeparted,
                        IncludeCancelled,
                        IncludeWaitlisted,
                        IncludeSoldOut,
                        Refundable,
                        GroupFares,
                        ItFaresOnly,
                        PromotionCode,
                        FareType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCompactFlightAvailabilityAsync(
                    bool FirstSegment, 
                    string bookingId, 
                    string Origin, 
                    string Destination, 
                    System.DateTime DateFrom, 
                    System.DateTime DateTo, 
                    System.DateTime DateBooking, 
                    short Adult, 
                    short Child, 
                    short Infant, 
                    short Other, 
                    string OtherPassengerType, 
                    string BoardingClass, 
                    string BookingClass, 
                    string DayTimeIndicator, 
                    string AgencyCode, 
                    string CurrencyCode, 
                    string FlightId, 
                    string FareId, 
                    double MaxAmount, 
                    bool NonStopOnly, 
                    bool IncludeDeparted, 
                    bool IncludeCancelled, 
                    bool IncludeWaitlisted, 
                    bool IncludeSoldOut, 
                    bool Refundable, 
                    bool GroupFares, 
                    bool ItFaresOnly, 
                    string PromotionCode, 
                    string FareType) {
            this.GetCompactFlightAvailabilityAsync(FirstSegment, bookingId, Origin, Destination, DateFrom, DateTo, DateBooking, Adult, Child, Infant, Other, OtherPassengerType, BoardingClass, BookingClass, DayTimeIndicator, AgencyCode, CurrencyCode, FlightId, FareId, MaxAmount, NonStopOnly, IncludeDeparted, IncludeCancelled, IncludeWaitlisted, IncludeSoldOut, Refundable, GroupFares, ItFaresOnly, PromotionCode, FareType, null);
        }
        
        /// <remarks/>
        public void GetCompactFlightAvailabilityAsync(
                    bool FirstSegment, 
                    string bookingId, 
                    string Origin, 
                    string Destination, 
                    System.DateTime DateFrom, 
                    System.DateTime DateTo, 
                    System.DateTime DateBooking, 
                    short Adult, 
                    short Child, 
                    short Infant, 
                    short Other, 
                    string OtherPassengerType, 
                    string BoardingClass, 
                    string BookingClass, 
                    string DayTimeIndicator, 
                    string AgencyCode, 
                    string CurrencyCode, 
                    string FlightId, 
                    string FareId, 
                    double MaxAmount, 
                    bool NonStopOnly, 
                    bool IncludeDeparted, 
                    bool IncludeCancelled, 
                    bool IncludeWaitlisted, 
                    bool IncludeSoldOut, 
                    bool Refundable, 
                    bool GroupFares, 
                    bool ItFaresOnly, 
                    string PromotionCode, 
                    string FareType, 
                    object userState) {
            if ((this.GetCompactFlightAvailabilityOperationCompleted == null)) {
                this.GetCompactFlightAvailabilityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCompactFlightAvailabilityOperationCompleted);
            }
            this.InvokeAsync("GetCompactFlightAvailability", new object[] {
                        FirstSegment,
                        bookingId,
                        Origin,
                        Destination,
                        DateFrom,
                        DateTo,
                        DateBooking,
                        Adult,
                        Child,
                        Infant,
                        Other,
                        OtherPassengerType,
                        BoardingClass,
                        BookingClass,
                        DayTimeIndicator,
                        AgencyCode,
                        CurrencyCode,
                        FlightId,
                        FareId,
                        MaxAmount,
                        NonStopOnly,
                        IncludeDeparted,
                        IncludeCancelled,
                        IncludeWaitlisted,
                        IncludeSoldOut,
                        Refundable,
                        GroupFares,
                        ItFaresOnly,
                        PromotionCode,
                        FareType}, this.GetCompactFlightAvailabilityOperationCompleted, userState);
        }
        
        private void OnGetCompactFlightAvailabilityOperationCompleted(object arg) {
            if ((this.GetCompactFlightAvailabilityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCompactFlightAvailabilityCompleted(this, new GetCompactFlightAvailabilityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetFlightAvailability", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFlightAvailability(
                    string Origin, 
                    string Destination, 
                    System.DateTime DateDepartFrom, 
                    System.DateTime DateDepartTo, 
                    System.DateTime DateReturnFrom, 
                    System.DateTime DateReturnTo, 
                    System.DateTime DateBooking, 
                    short Adult, 
                    short Child, 
                    short Infant, 
                    short Other, 
                    string OtherPassengerType, 
                    string BoardingClass, 
                    string BookingClass, 
                    string DayTimeIndicator, 
                    string AgencyCode, 
                    string CurrencyCode, 
                    string FlightId, 
                    string FareId, 
                    double MaxAmount, 
                    bool NonStopOnly, 
                    bool IncludeDeparted, 
                    bool IncludeCancelled, 
                    bool IncludeWaitlisted, 
                    bool IncludeSoldOut, 
                    bool Refundable, 
                    bool GroupFares, 
                    bool ItFaresOnly, 
                    string PromotionCode, 
                    string FareType, 
                    bool FareLogic, 
                    bool ReturnFlight, 
                    bool bLowest, 
                    bool bLowestClass, 
                    bool bLowestGroup, 
                    bool bShowClosed, 
                    bool bSort, 
                    bool bDelete, 
                    bool bSkipFareLogin, 
                    string strLanguage, 
                    string strIpAddress, 
                    bool bReturnRefundable, 
                    bool bNoVat, 
                    int iDayRange) {
            object[] results = this.Invoke("GetFlightAvailability", new object[] {
                        Origin,
                        Destination,
                        DateDepartFrom,
                        DateDepartTo,
                        DateReturnFrom,
                        DateReturnTo,
                        DateBooking,
                        Adult,
                        Child,
                        Infant,
                        Other,
                        OtherPassengerType,
                        BoardingClass,
                        BookingClass,
                        DayTimeIndicator,
                        AgencyCode,
                        CurrencyCode,
                        FlightId,
                        FareId,
                        MaxAmount,
                        NonStopOnly,
                        IncludeDeparted,
                        IncludeCancelled,
                        IncludeWaitlisted,
                        IncludeSoldOut,
                        Refundable,
                        GroupFares,
                        ItFaresOnly,
                        PromotionCode,
                        FareType,
                        FareLogic,
                        ReturnFlight,
                        bLowest,
                        bLowestClass,
                        bLowestGroup,
                        bShowClosed,
                        bSort,
                        bDelete,
                        bSkipFareLogin,
                        strLanguage,
                        strIpAddress,
                        bReturnRefundable,
                        bNoVat,
                        iDayRange});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFlightAvailabilityAsync(
                    string Origin, 
                    string Destination, 
                    System.DateTime DateDepartFrom, 
                    System.DateTime DateDepartTo, 
                    System.DateTime DateReturnFrom, 
                    System.DateTime DateReturnTo, 
                    System.DateTime DateBooking, 
                    short Adult, 
                    short Child, 
                    short Infant, 
                    short Other, 
                    string OtherPassengerType, 
                    string BoardingClass, 
                    string BookingClass, 
                    string DayTimeIndicator, 
                    string AgencyCode, 
                    string CurrencyCode, 
                    string FlightId, 
                    string FareId, 
                    double MaxAmount, 
                    bool NonStopOnly, 
                    bool IncludeDeparted, 
                    bool IncludeCancelled, 
                    bool IncludeWaitlisted, 
                    bool IncludeSoldOut, 
                    bool Refundable, 
                    bool GroupFares, 
                    bool ItFaresOnly, 
                    string PromotionCode, 
                    string FareType, 
                    bool FareLogic, 
                    bool ReturnFlight, 
                    bool bLowest, 
                    bool bLowestClass, 
                    bool bLowestGroup, 
                    bool bShowClosed, 
                    bool bSort, 
                    bool bDelete, 
                    bool bSkipFareLogin, 
                    string strLanguage, 
                    string strIpAddress, 
                    bool bReturnRefundable, 
                    bool bNoVat, 
                    int iDayRange) {
            this.GetFlightAvailabilityAsync(Origin, Destination, DateDepartFrom, DateDepartTo, DateReturnFrom, DateReturnTo, DateBooking, Adult, Child, Infant, Other, OtherPassengerType, BoardingClass, BookingClass, DayTimeIndicator, AgencyCode, CurrencyCode, FlightId, FareId, MaxAmount, NonStopOnly, IncludeDeparted, IncludeCancelled, IncludeWaitlisted, IncludeSoldOut, Refundable, GroupFares, ItFaresOnly, PromotionCode, FareType, FareLogic, ReturnFlight, bLowest, bLowestClass, bLowestGroup, bShowClosed, bSort, bDelete, bSkipFareLogin, strLanguage, strIpAddress, bReturnRefundable, bNoVat, iDayRange, null);
        }
        
        /// <remarks/>
        public void GetFlightAvailabilityAsync(
                    string Origin, 
                    string Destination, 
                    System.DateTime DateDepartFrom, 
                    System.DateTime DateDepartTo, 
                    System.DateTime DateReturnFrom, 
                    System.DateTime DateReturnTo, 
                    System.DateTime DateBooking, 
                    short Adult, 
                    short Child, 
                    short Infant, 
                    short Other, 
                    string OtherPassengerType, 
                    string BoardingClass, 
                    string BookingClass, 
                    string DayTimeIndicator, 
                    string AgencyCode, 
                    string CurrencyCode, 
                    string FlightId, 
                    string FareId, 
                    double MaxAmount, 
                    bool NonStopOnly, 
                    bool IncludeDeparted, 
                    bool IncludeCancelled, 
                    bool IncludeWaitlisted, 
                    bool IncludeSoldOut, 
                    bool Refundable, 
                    bool GroupFares, 
                    bool ItFaresOnly, 
                    string PromotionCode, 
                    string FareType, 
                    bool FareLogic, 
                    bool ReturnFlight, 
                    bool bLowest, 
                    bool bLowestClass, 
                    bool bLowestGroup, 
                    bool bShowClosed, 
                    bool bSort, 
                    bool bDelete, 
                    bool bSkipFareLogin, 
                    string strLanguage, 
                    string strIpAddress, 
                    bool bReturnRefundable, 
                    bool bNoVat, 
                    int iDayRange, 
                    object userState) {
            if ((this.GetFlightAvailabilityOperationCompleted == null)) {
                this.GetFlightAvailabilityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFlightAvailabilityOperationCompleted);
            }
            this.InvokeAsync("GetFlightAvailability", new object[] {
                        Origin,
                        Destination,
                        DateDepartFrom,
                        DateDepartTo,
                        DateReturnFrom,
                        DateReturnTo,
                        DateBooking,
                        Adult,
                        Child,
                        Infant,
                        Other,
                        OtherPassengerType,
                        BoardingClass,
                        BookingClass,
                        DayTimeIndicator,
                        AgencyCode,
                        CurrencyCode,
                        FlightId,
                        FareId,
                        MaxAmount,
                        NonStopOnly,
                        IncludeDeparted,
                        IncludeCancelled,
                        IncludeWaitlisted,
                        IncludeSoldOut,
                        Refundable,
                        GroupFares,
                        ItFaresOnly,
                        PromotionCode,
                        FareType,
                        FareLogic,
                        ReturnFlight,
                        bLowest,
                        bLowestClass,
                        bLowestGroup,
                        bShowClosed,
                        bSort,
                        bDelete,
                        bSkipFareLogin,
                        strLanguage,
                        strIpAddress,
                        bReturnRefundable,
                        bNoVat,
                        iDayRange}, this.GetFlightAvailabilityOperationCompleted, userState);
        }
        
        private void OnGetFlightAvailabilityOperationCompleted(object arg) {
            if ((this.GetFlightAvailabilityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFlightAvailabilityCompleted(this, new GetFlightAvailabilityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetLowFareFinder", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLowFareFinder(
                    string Origin, 
                    string Destination, 
                    System.DateTime DateDepartFrom, 
                    System.DateTime DateDepartTo, 
                    System.DateTime DateReturnFrom, 
                    System.DateTime DateReturnTo, 
                    System.DateTime DateBooking, 
                    short Adult, 
                    short Child, 
                    short Infant, 
                    short Other, 
                    string OtherPassengerType, 
                    string BoardingClass, 
                    string BookingClass, 
                    string DayTimeIndicator, 
                    string AgencyCode, 
                    string CurrencyCode, 
                    string FlightId, 
                    string FareId, 
                    double MaxAmount, 
                    bool NonStopOnly, 
                    bool IncludeDeparted, 
                    bool IncludeCancelled, 
                    bool IncludeWaitlisted, 
                    bool IncludeSoldOut, 
                    bool Refundable, 
                    bool GroupFares, 
                    bool ItFaresOnly, 
                    string PromotionCode, 
                    string FareType, 
                    bool FareLogic, 
                    bool ReturnFlight, 
                    bool bLowest, 
                    bool bLowestClass, 
                    bool bLowestGroup, 
                    bool bShowClosed, 
                    bool bSort, 
                    bool bDelete, 
                    bool bSkipFareLogic, 
                    string strLanguage, 
                    string strIpAddress, 
                    bool bReturnRefundable, 
                    bool bNoVat, 
                    int iDayRange) {
            object[] results = this.Invoke("GetLowFareFinder", new object[] {
                        Origin,
                        Destination,
                        DateDepartFrom,
                        DateDepartTo,
                        DateReturnFrom,
                        DateReturnTo,
                        DateBooking,
                        Adult,
                        Child,
                        Infant,
                        Other,
                        OtherPassengerType,
                        BoardingClass,
                        BookingClass,
                        DayTimeIndicator,
                        AgencyCode,
                        CurrencyCode,
                        FlightId,
                        FareId,
                        MaxAmount,
                        NonStopOnly,
                        IncludeDeparted,
                        IncludeCancelled,
                        IncludeWaitlisted,
                        IncludeSoldOut,
                        Refundable,
                        GroupFares,
                        ItFaresOnly,
                        PromotionCode,
                        FareType,
                        FareLogic,
                        ReturnFlight,
                        bLowest,
                        bLowestClass,
                        bLowestGroup,
                        bShowClosed,
                        bSort,
                        bDelete,
                        bSkipFareLogic,
                        strLanguage,
                        strIpAddress,
                        bReturnRefundable,
                        bNoVat,
                        iDayRange});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLowFareFinderAsync(
                    string Origin, 
                    string Destination, 
                    System.DateTime DateDepartFrom, 
                    System.DateTime DateDepartTo, 
                    System.DateTime DateReturnFrom, 
                    System.DateTime DateReturnTo, 
                    System.DateTime DateBooking, 
                    short Adult, 
                    short Child, 
                    short Infant, 
                    short Other, 
                    string OtherPassengerType, 
                    string BoardingClass, 
                    string BookingClass, 
                    string DayTimeIndicator, 
                    string AgencyCode, 
                    string CurrencyCode, 
                    string FlightId, 
                    string FareId, 
                    double MaxAmount, 
                    bool NonStopOnly, 
                    bool IncludeDeparted, 
                    bool IncludeCancelled, 
                    bool IncludeWaitlisted, 
                    bool IncludeSoldOut, 
                    bool Refundable, 
                    bool GroupFares, 
                    bool ItFaresOnly, 
                    string PromotionCode, 
                    string FareType, 
                    bool FareLogic, 
                    bool ReturnFlight, 
                    bool bLowest, 
                    bool bLowestClass, 
                    bool bLowestGroup, 
                    bool bShowClosed, 
                    bool bSort, 
                    bool bDelete, 
                    bool bSkipFareLogic, 
                    string strLanguage, 
                    string strIpAddress, 
                    bool bReturnRefundable, 
                    bool bNoVat, 
                    int iDayRange) {
            this.GetLowFareFinderAsync(Origin, Destination, DateDepartFrom, DateDepartTo, DateReturnFrom, DateReturnTo, DateBooking, Adult, Child, Infant, Other, OtherPassengerType, BoardingClass, BookingClass, DayTimeIndicator, AgencyCode, CurrencyCode, FlightId, FareId, MaxAmount, NonStopOnly, IncludeDeparted, IncludeCancelled, IncludeWaitlisted, IncludeSoldOut, Refundable, GroupFares, ItFaresOnly, PromotionCode, FareType, FareLogic, ReturnFlight, bLowest, bLowestClass, bLowestGroup, bShowClosed, bSort, bDelete, bSkipFareLogic, strLanguage, strIpAddress, bReturnRefundable, bNoVat, iDayRange, null);
        }
        
        /// <remarks/>
        public void GetLowFareFinderAsync(
                    string Origin, 
                    string Destination, 
                    System.DateTime DateDepartFrom, 
                    System.DateTime DateDepartTo, 
                    System.DateTime DateReturnFrom, 
                    System.DateTime DateReturnTo, 
                    System.DateTime DateBooking, 
                    short Adult, 
                    short Child, 
                    short Infant, 
                    short Other, 
                    string OtherPassengerType, 
                    string BoardingClass, 
                    string BookingClass, 
                    string DayTimeIndicator, 
                    string AgencyCode, 
                    string CurrencyCode, 
                    string FlightId, 
                    string FareId, 
                    double MaxAmount, 
                    bool NonStopOnly, 
                    bool IncludeDeparted, 
                    bool IncludeCancelled, 
                    bool IncludeWaitlisted, 
                    bool IncludeSoldOut, 
                    bool Refundable, 
                    bool GroupFares, 
                    bool ItFaresOnly, 
                    string PromotionCode, 
                    string FareType, 
                    bool FareLogic, 
                    bool ReturnFlight, 
                    bool bLowest, 
                    bool bLowestClass, 
                    bool bLowestGroup, 
                    bool bShowClosed, 
                    bool bSort, 
                    bool bDelete, 
                    bool bSkipFareLogic, 
                    string strLanguage, 
                    string strIpAddress, 
                    bool bReturnRefundable, 
                    bool bNoVat, 
                    int iDayRange, 
                    object userState) {
            if ((this.GetLowFareFinderOperationCompleted == null)) {
                this.GetLowFareFinderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLowFareFinderOperationCompleted);
            }
            this.InvokeAsync("GetLowFareFinder", new object[] {
                        Origin,
                        Destination,
                        DateDepartFrom,
                        DateDepartTo,
                        DateReturnFrom,
                        DateReturnTo,
                        DateBooking,
                        Adult,
                        Child,
                        Infant,
                        Other,
                        OtherPassengerType,
                        BoardingClass,
                        BookingClass,
                        DayTimeIndicator,
                        AgencyCode,
                        CurrencyCode,
                        FlightId,
                        FareId,
                        MaxAmount,
                        NonStopOnly,
                        IncludeDeparted,
                        IncludeCancelled,
                        IncludeWaitlisted,
                        IncludeSoldOut,
                        Refundable,
                        GroupFares,
                        ItFaresOnly,
                        PromotionCode,
                        FareType,
                        FareLogic,
                        ReturnFlight,
                        bLowest,
                        bLowestClass,
                        bLowestGroup,
                        bShowClosed,
                        bSort,
                        bDelete,
                        bSkipFareLogic,
                        strLanguage,
                        strIpAddress,
                        bReturnRefundable,
                        bNoVat,
                        iDayRange}, this.GetLowFareFinderOperationCompleted, userState);
        }
        
        private void OnGetLowFareFinderOperationCompleted(object arg) {
            if ((this.GetLowFareFinderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLowFareFinderCompleted(this, new GetLowFareFinderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/ReturnAirportDestination", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReturnAirportDestinations(string Language, bool b2cFlag, bool b2bFlag, bool b2eFlag, bool b2sFlag, bool apiFlag) {
            object[] results = this.Invoke("ReturnAirportDestinations", new object[] {
                        Language,
                        b2cFlag,
                        b2bFlag,
                        b2eFlag,
                        b2sFlag,
                        apiFlag});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReturnAirportDestinationsAsync(string Language, bool b2cFlag, bool b2bFlag, bool b2eFlag, bool b2sFlag, bool apiFlag) {
            this.ReturnAirportDestinationsAsync(Language, b2cFlag, b2bFlag, b2eFlag, b2sFlag, apiFlag, null);
        }
        
        /// <remarks/>
        public void ReturnAirportDestinationsAsync(string Language, bool b2cFlag, bool b2bFlag, bool b2eFlag, bool b2sFlag, bool apiFlag, object userState) {
            if ((this.ReturnAirportDestinationsOperationCompleted == null)) {
                this.ReturnAirportDestinationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReturnAirportDestinationsOperationCompleted);
            }
            this.InvokeAsync("ReturnAirportDestinations", new object[] {
                        Language,
                        b2cFlag,
                        b2bFlag,
                        b2eFlag,
                        b2sFlag,
                        apiFlag}, this.ReturnAirportDestinationsOperationCompleted, userState);
        }
        
        private void OnReturnAirportDestinationsOperationCompleted(object arg) {
            if ((this.ReturnAirportDestinationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReturnAirportDestinationsCompleted(this, new ReturnAirportDestinationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetAirlines", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAirlines(string Language) {
            object[] results = this.Invoke("GetAirlines", new object[] {
                        Language});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAirlinesAsync(string Language) {
            this.GetAirlinesAsync(Language, null);
        }
        
        /// <remarks/>
        public void GetAirlinesAsync(string Language, object userState) {
            if ((this.GetAirlinesOperationCompleted == null)) {
                this.GetAirlinesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAirlinesOperationCompleted);
            }
            this.InvokeAsync("GetAirlines", new object[] {
                        Language}, this.GetAirlinesOperationCompleted, userState);
        }
        
        private void OnGetAirlinesOperationCompleted(object arg) {
            if ((this.GetAirlinesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAirlinesCompleted(this, new GetAirlinesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/ReturnAirportOrigins", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReturnAirportOrigins(string Language, bool b2cFlag, bool b2bFlag, bool b2eFlag, bool b2sFlag, bool apiFlag) {
            object[] results = this.Invoke("ReturnAirportOrigins", new object[] {
                        Language,
                        b2cFlag,
                        b2bFlag,
                        b2eFlag,
                        b2sFlag,
                        apiFlag});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReturnAirportOriginsAsync(string Language, bool b2cFlag, bool b2bFlag, bool b2eFlag, bool b2sFlag, bool apiFlag) {
            this.ReturnAirportOriginsAsync(Language, b2cFlag, b2bFlag, b2eFlag, b2sFlag, apiFlag, null);
        }
        
        /// <remarks/>
        public void ReturnAirportOriginsAsync(string Language, bool b2cFlag, bool b2bFlag, bool b2eFlag, bool b2sFlag, bool apiFlag, object userState) {
            if ((this.ReturnAirportOriginsOperationCompleted == null)) {
                this.ReturnAirportOriginsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReturnAirportOriginsOperationCompleted);
            }
            this.InvokeAsync("ReturnAirportOrigins", new object[] {
                        Language,
                        b2cFlag,
                        b2bFlag,
                        b2eFlag,
                        b2sFlag,
                        apiFlag}, this.ReturnAirportOriginsOperationCompleted, userState);
        }
        
        private void OnReturnAirportOriginsOperationCompleted(object arg) {
            if ((this.ReturnAirportOriginsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReturnAirportOriginsCompleted(this, new ReturnAirportOriginsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetActivityTypes", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetActivityTypes(string language) {
            object[] results = this.Invoke("GetActivityTypes", new object[] {
                        language});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetActivityTypesAsync(string language) {
            this.GetActivityTypesAsync(language, null);
        }
        
        /// <remarks/>
        public void GetActivityTypesAsync(string language, object userState) {
            if ((this.GetActivityTypesOperationCompleted == null)) {
                this.GetActivityTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActivityTypesOperationCompleted);
            }
            this.InvokeAsync("GetActivityTypes", new object[] {
                        language}, this.GetActivityTypesOperationCompleted, userState);
        }
        
        private void OnGetActivityTypesOperationCompleted(object arg) {
            if ((this.GetActivityTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActivityTypesCompleted(this, new GetActivityTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/CancelSegment", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SegmentCancel(string BookingId, string SegmentId, string userID, string agencyCode, bool waiveFee, bool processTicketRefund, ref bool includeRefundableOnly, ref System.DateTime noShowSegmentDateTime) {
            object[] results = this.Invoke("SegmentCancel", new object[] {
                        BookingId,
                        SegmentId,
                        userID,
                        agencyCode,
                        waiveFee,
                        processTicketRefund,
                        includeRefundableOnly,
                        noShowSegmentDateTime});
            includeRefundableOnly = ((bool)(results[1]));
            noShowSegmentDateTime = ((System.DateTime)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SegmentCancelAsync(string BookingId, string SegmentId, string userID, string agencyCode, bool waiveFee, bool processTicketRefund, bool includeRefundableOnly, System.DateTime noShowSegmentDateTime) {
            this.SegmentCancelAsync(BookingId, SegmentId, userID, agencyCode, waiveFee, processTicketRefund, includeRefundableOnly, noShowSegmentDateTime, null);
        }
        
        /// <remarks/>
        public void SegmentCancelAsync(string BookingId, string SegmentId, string userID, string agencyCode, bool waiveFee, bool processTicketRefund, bool includeRefundableOnly, System.DateTime noShowSegmentDateTime, object userState) {
            if ((this.SegmentCancelOperationCompleted == null)) {
                this.SegmentCancelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSegmentCancelOperationCompleted);
            }
            this.InvokeAsync("SegmentCancel", new object[] {
                        BookingId,
                        SegmentId,
                        userID,
                        agencyCode,
                        waiveFee,
                        processTicketRefund,
                        includeRefundableOnly,
                        noShowSegmentDateTime}, this.SegmentCancelOperationCompleted, userState);
        }
        
        private void OnSegmentCancelOperationCompleted(object arg) {
            if ((this.SegmentCancelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SegmentCancelCompleted(this, new SegmentCancelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/ReturnItinerary", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReturnItinerary(string strBookingId, string strLanguage, string strAgency) {
            object[] results = this.Invoke("ReturnItinerary", new object[] {
                        strBookingId,
                        strLanguage,
                        strAgency});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReturnItineraryAsync(string strBookingId, string strLanguage, string strAgency) {
            this.ReturnItineraryAsync(strBookingId, strLanguage, strAgency, null);
        }
        
        /// <remarks/>
        public void ReturnItineraryAsync(string strBookingId, string strLanguage, string strAgency, object userState) {
            if ((this.ReturnItineraryOperationCompleted == null)) {
                this.ReturnItineraryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReturnItineraryOperationCompleted);
            }
            this.InvokeAsync("ReturnItinerary", new object[] {
                        strBookingId,
                        strLanguage,
                        strAgency}, this.ReturnItineraryOperationCompleted, userState);
        }
        
        private void OnReturnItineraryOperationCompleted(object arg) {
            if ((this.ReturnItineraryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReturnItineraryCompleted(this, new ReturnItineraryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/UserList", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserList(string UserLogon, string UserCode, string LastName, string FirstName, string AgencyCode, string StatusCode) {
            object[] results = this.Invoke("GetUserList", new object[] {
                        UserLogon,
                        UserCode,
                        LastName,
                        FirstName,
                        AgencyCode,
                        StatusCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserListAsync(string UserLogon, string UserCode, string LastName, string FirstName, string AgencyCode, string StatusCode) {
            this.GetUserListAsync(UserLogon, UserCode, LastName, FirstName, AgencyCode, StatusCode, null);
        }
        
        /// <remarks/>
        public void GetUserListAsync(string UserLogon, string UserCode, string LastName, string FirstName, string AgencyCode, string StatusCode, object userState) {
            if ((this.GetUserListOperationCompleted == null)) {
                this.GetUserListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserListOperationCompleted);
            }
            this.InvokeAsync("GetUserList", new object[] {
                        UserLogon,
                        UserCode,
                        LastName,
                        FirstName,
                        AgencyCode,
                        StatusCode}, this.GetUserListOperationCompleted, userState);
        }
        
        private void OnGetUserListOperationCompleted(object arg) {
            if ((this.GetUserListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserListCompleted(this, new GetUserListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/UserRead", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UserRead(string UserID) {
            object[] results = this.Invoke("UserRead", new object[] {
                        UserID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UserReadAsync(string UserID) {
            this.UserReadAsync(UserID, null);
        }
        
        /// <remarks/>
        public void UserReadAsync(string UserID, object userState) {
            if ((this.UserReadOperationCompleted == null)) {
                this.UserReadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserReadOperationCompleted);
            }
            this.InvokeAsync("UserRead", new object[] {
                        UserID}, this.UserReadOperationCompleted, userState);
        }
        
        private void OnUserReadOperationCompleted(object arg) {
            if ((this.UserReadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserReadCompleted(this, new UserReadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetVoucher", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetVouchers(
                    string strRecordLocator, 
                    string strVoucherNumber, 
                    string strVoucherID, 
                    string strStatus, 
                    string strRecipient, 
                    string strFOPSubType, 
                    string strClientProfileId, 
                    string strCurrency, 
                    string strPassword, 
                    bool bIncludeExpiredVoucher, 
                    bool bIncludeUsedVoucher, 
                    bool bIncludeVoidedVoucher, 
                    bool bIncludeRefundable, 
                    bool bIncludeFareOnly, 
                    ref bool bWrite, 
                    string XmlMapping, 
                    string XmlFees) {
            object[] results = this.Invoke("GetVouchers", new object[] {
                        strRecordLocator,
                        strVoucherNumber,
                        strVoucherID,
                        strStatus,
                        strRecipient,
                        strFOPSubType,
                        strClientProfileId,
                        strCurrency,
                        strPassword,
                        bIncludeExpiredVoucher,
                        bIncludeUsedVoucher,
                        bIncludeVoidedVoucher,
                        bIncludeRefundable,
                        bIncludeFareOnly,
                        bWrite,
                        XmlMapping,
                        XmlFees});
            bWrite = ((bool)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetVouchersAsync(
                    string strRecordLocator, 
                    string strVoucherNumber, 
                    string strVoucherID, 
                    string strStatus, 
                    string strRecipient, 
                    string strFOPSubType, 
                    string strClientProfileId, 
                    string strCurrency, 
                    string strPassword, 
                    bool bIncludeExpiredVoucher, 
                    bool bIncludeUsedVoucher, 
                    bool bIncludeVoidedVoucher, 
                    bool bIncludeRefundable, 
                    bool bIncludeFareOnly, 
                    bool bWrite, 
                    string XmlMapping, 
                    string XmlFees) {
            this.GetVouchersAsync(strRecordLocator, strVoucherNumber, strVoucherID, strStatus, strRecipient, strFOPSubType, strClientProfileId, strCurrency, strPassword, bIncludeExpiredVoucher, bIncludeUsedVoucher, bIncludeVoidedVoucher, bIncludeRefundable, bIncludeFareOnly, bWrite, XmlMapping, XmlFees, null);
        }
        
        /// <remarks/>
        public void GetVouchersAsync(
                    string strRecordLocator, 
                    string strVoucherNumber, 
                    string strVoucherID, 
                    string strStatus, 
                    string strRecipient, 
                    string strFOPSubType, 
                    string strClientProfileId, 
                    string strCurrency, 
                    string strPassword, 
                    bool bIncludeExpiredVoucher, 
                    bool bIncludeUsedVoucher, 
                    bool bIncludeVoidedVoucher, 
                    bool bIncludeRefundable, 
                    bool bIncludeFareOnly, 
                    bool bWrite, 
                    string XmlMapping, 
                    string XmlFees, 
                    object userState) {
            if ((this.GetVouchersOperationCompleted == null)) {
                this.GetVouchersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVouchersOperationCompleted);
            }
            this.InvokeAsync("GetVouchers", new object[] {
                        strRecordLocator,
                        strVoucherNumber,
                        strVoucherID,
                        strStatus,
                        strRecipient,
                        strFOPSubType,
                        strClientProfileId,
                        strCurrency,
                        strPassword,
                        bIncludeExpiredVoucher,
                        bIncludeUsedVoucher,
                        bIncludeVoidedVoucher,
                        bIncludeRefundable,
                        bIncludeFareOnly,
                        bWrite,
                        XmlMapping,
                        XmlFees}, this.GetVouchersOperationCompleted, userState);
        }
        
        private void OnGetVouchersOperationCompleted(object arg) {
            if ((this.GetVouchersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVouchersCompleted(this, new GetVouchersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/CalculateExchange", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public double CalculateExchange(string currencyFrom, string currencyTo, double amount, string systemCurrency, System.DateTime dateOfExchange, bool reverse) {
            object[] results = this.Invoke("CalculateExchange", new object[] {
                        currencyFrom,
                        currencyTo,
                        amount,
                        systemCurrency,
                        dateOfExchange,
                        reverse});
            return ((double)(results[0]));
        }
        
        /// <remarks/>
        public void CalculateExchangeAsync(string currencyFrom, string currencyTo, double amount, string systemCurrency, System.DateTime dateOfExchange, bool reverse) {
            this.CalculateExchangeAsync(currencyFrom, currencyTo, amount, systemCurrency, dateOfExchange, reverse, null);
        }
        
        /// <remarks/>
        public void CalculateExchangeAsync(string currencyFrom, string currencyTo, double amount, string systemCurrency, System.DateTime dateOfExchange, bool reverse, object userState) {
            if ((this.CalculateExchangeOperationCompleted == null)) {
                this.CalculateExchangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculateExchangeOperationCompleted);
            }
            this.InvokeAsync("CalculateExchange", new object[] {
                        currencyFrom,
                        currencyTo,
                        amount,
                        systemCurrency,
                        dateOfExchange,
                        reverse}, this.CalculateExchangeOperationCompleted, userState);
        }
        
        private void OnCalculateExchangeOperationCompleted(object arg) {
            if ((this.CalculateExchangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CalculateExchangeCompleted(this, new CalculateExchangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetBookingSegmentCheckIn", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBookingSegmentCheckIn(string bookingId, string clientId, string languageCode) {
            object[] results = this.Invoke("GetBookingSegmentCheckIn", new object[] {
                        bookingId,
                        clientId,
                        languageCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBookingSegmentCheckInAsync(string bookingId, string clientId, string languageCode) {
            this.GetBookingSegmentCheckInAsync(bookingId, clientId, languageCode, null);
        }
        
        /// <remarks/>
        public void GetBookingSegmentCheckInAsync(string bookingId, string clientId, string languageCode, object userState) {
            if ((this.GetBookingSegmentCheckInOperationCompleted == null)) {
                this.GetBookingSegmentCheckInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBookingSegmentCheckInOperationCompleted);
            }
            this.InvokeAsync("GetBookingSegmentCheckIn", new object[] {
                        bookingId,
                        clientId,
                        languageCode}, this.GetBookingSegmentCheckInOperationCompleted, userState);
        }
        
        private void OnGetBookingSegmentCheckInOperationCompleted(object arg) {
            if ((this.GetBookingSegmentCheckInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBookingSegmentCheckInCompleted(this, new GetBookingSegmentCheckInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/BoardPassengers", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BoardPassengers(string strFlightID, string strOrigin, string strBoard, string strUserId, bool bBoard) {
            object[] results = this.Invoke("BoardPassengers", new object[] {
                        strFlightID,
                        strOrigin,
                        strBoard,
                        strUserId,
                        bBoard});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BoardPassengersAsync(string strFlightID, string strOrigin, string strBoard, string strUserId, bool bBoard) {
            this.BoardPassengersAsync(strFlightID, strOrigin, strBoard, strUserId, bBoard, null);
        }
        
        /// <remarks/>
        public void BoardPassengersAsync(string strFlightID, string strOrigin, string strBoard, string strUserId, bool bBoard, object userState) {
            if ((this.BoardPassengersOperationCompleted == null)) {
                this.BoardPassengersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBoardPassengersOperationCompleted);
            }
            this.InvokeAsync("BoardPassengers", new object[] {
                        strFlightID,
                        strOrigin,
                        strBoard,
                        strUserId,
                        bBoard}, this.BoardPassengersOperationCompleted, userState);
        }
        
        private void OnBoardPassengersOperationCompleted(object arg) {
            if ((this.BoardPassengersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BoardPassengersCompleted(this, new BoardPassengersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/OffLoadPassengers", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string OffLoadPassenger(string strBookingId, string strFlightId, string strPassengerId, bool autoBaggageFlag, string strUserId) {
            object[] results = this.Invoke("OffLoadPassenger", new object[] {
                        strBookingId,
                        strFlightId,
                        strPassengerId,
                        autoBaggageFlag,
                        strUserId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void OffLoadPassengerAsync(string strBookingId, string strFlightId, string strPassengerId, bool autoBaggageFlag, string strUserId) {
            this.OffLoadPassengerAsync(strBookingId, strFlightId, strPassengerId, autoBaggageFlag, strUserId, null);
        }
        
        /// <remarks/>
        public void OffLoadPassengerAsync(string strBookingId, string strFlightId, string strPassengerId, bool autoBaggageFlag, string strUserId, object userState) {
            if ((this.OffLoadPassengerOperationCompleted == null)) {
                this.OffLoadPassengerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOffLoadPassengerOperationCompleted);
            }
            this.InvokeAsync("OffLoadPassenger", new object[] {
                        strBookingId,
                        strFlightId,
                        strPassengerId,
                        autoBaggageFlag,
                        strUserId}, this.OffLoadPassengerOperationCompleted, userState);
        }
        
        private void OnOffLoadPassengerOperationCompleted(object arg) {
            if ((this.OffLoadPassengerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OffLoadPassengerCompleted(this, new OffLoadPassengerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/UserSave", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UserSave(string xmlUser, string agencyCode) {
            object[] results = this.Invoke("UserSave", new object[] {
                        xmlUser,
                        agencyCode});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UserSaveAsync(string xmlUser, string agencyCode) {
            this.UserSaveAsync(xmlUser, agencyCode, null);
        }
        
        /// <remarks/>
        public void UserSaveAsync(string xmlUser, string agencyCode, object userState) {
            if ((this.UserSaveOperationCompleted == null)) {
                this.UserSaveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserSaveOperationCompleted);
            }
            this.InvokeAsync("UserSave", new object[] {
                        xmlUser,
                        agencyCode}, this.UserSaveOperationCompleted, userState);
        }
        
        private void OnUserSaveOperationCompleted(object arg) {
            if ((this.UserSaveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserSaveCompleted(this, new UserSaveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/NewUserSave", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool NewUserSave(string xmlUser, string agencyCode) {
            object[] results = this.Invoke("NewUserSave", new object[] {
                        xmlUser,
                        agencyCode});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void NewUserSaveAsync(string xmlUser, string agencyCode) {
            this.NewUserSaveAsync(xmlUser, agencyCode, null);
        }
        
        /// <remarks/>
        public void NewUserSaveAsync(string xmlUser, string agencyCode, object userState) {
            if ((this.NewUserSaveOperationCompleted == null)) {
                this.NewUserSaveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNewUserSaveOperationCompleted);
            }
            this.InvokeAsync("NewUserSave", new object[] {
                        xmlUser,
                        agencyCode}, this.NewUserSaveOperationCompleted, userState);
        }
        
        private void OnNewUserSaveOperationCompleted(object arg) {
            if ((this.NewUserSaveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NewUserSaveCompleted(this, new NewUserSaveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/ClientSave", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ClientSave(ref string XmlClient, ref string XmlPassenger, ref string XmlBookingRemark) {
            object[] results = this.Invoke("ClientSave", new object[] {
                        XmlClient,
                        XmlPassenger,
                        XmlBookingRemark});
            XmlClient = ((string)(results[1]));
            XmlPassenger = ((string)(results[2]));
            XmlBookingRemark = ((string)(results[3]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ClientSaveAsync(string XmlClient, string XmlPassenger, string XmlBookingRemark) {
            this.ClientSaveAsync(XmlClient, XmlPassenger, XmlBookingRemark, null);
        }
        
        /// <remarks/>
        public void ClientSaveAsync(string XmlClient, string XmlPassenger, string XmlBookingRemark, object userState) {
            if ((this.ClientSaveOperationCompleted == null)) {
                this.ClientSaveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClientSaveOperationCompleted);
            }
            this.InvokeAsync("ClientSave", new object[] {
                        XmlClient,
                        XmlPassenger,
                        XmlBookingRemark}, this.ClientSaveOperationCompleted, userState);
        }
        
        private void OnClientSaveOperationCompleted(object arg) {
            if ((this.ClientSaveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClientSaveCompleted(this, new ClientSaveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/AddClientPassengerList", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddClientPassengerList(ref string XmlPassenger) {
            object[] results = this.Invoke("AddClientPassengerList", new object[] {
                        XmlPassenger});
            XmlPassenger = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddClientPassengerListAsync(string XmlPassenger) {
            this.AddClientPassengerListAsync(XmlPassenger, null);
        }
        
        /// <remarks/>
        public void AddClientPassengerListAsync(string XmlPassenger, object userState) {
            if ((this.AddClientPassengerListOperationCompleted == null)) {
                this.AddClientPassengerListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddClientPassengerListOperationCompleted);
            }
            this.InvokeAsync("AddClientPassengerList", new object[] {
                        XmlPassenger}, this.AddClientPassengerListOperationCompleted, userState);
        }
        
        private void OnAddClientPassengerListOperationCompleted(object arg) {
            if ((this.AddClientPassengerListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddClientPassengerListCompleted(this, new AddClientPassengerListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/ClientRead", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ClientRead(string strClientProfileId) {
            object[] results = this.Invoke("ClientRead", new object[] {
                        strClientProfileId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ClientReadAsync(string strClientProfileId) {
            this.ClientReadAsync(strClientProfileId, null);
        }
        
        /// <remarks/>
        public void ClientReadAsync(string strClientProfileId, object userState) {
            if ((this.ClientReadOperationCompleted == null)) {
                this.ClientReadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClientReadOperationCompleted);
            }
            this.InvokeAsync("ClientRead", new object[] {
                        strClientProfileId}, this.ClientReadOperationCompleted, userState);
        }
        
        private void OnClientReadOperationCompleted(object arg) {
            if ((this.ClientReadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClientReadCompleted(this, new ClientReadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/CreateClientProfile", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CreateClientProfile(ref string XmlClient, ref string xmlUser, ref string XmlPassenger, string AgencyCode) {
            object[] results = this.Invoke("CreateClientProfile", new object[] {
                        XmlClient,
                        xmlUser,
                        XmlPassenger,
                        AgencyCode});
            XmlClient = ((string)(results[1]));
            xmlUser = ((string)(results[2]));
            XmlPassenger = ((string)(results[3]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CreateClientProfileAsync(string XmlClient, string xmlUser, string XmlPassenger, string AgencyCode) {
            this.CreateClientProfileAsync(XmlClient, xmlUser, XmlPassenger, AgencyCode, null);
        }
        
        /// <remarks/>
        public void CreateClientProfileAsync(string XmlClient, string xmlUser, string XmlPassenger, string AgencyCode, object userState) {
            if ((this.CreateClientProfileOperationCompleted == null)) {
                this.CreateClientProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateClientProfileOperationCompleted);
            }
            this.InvokeAsync("CreateClientProfile", new object[] {
                        XmlClient,
                        xmlUser,
                        XmlPassenger,
                        AgencyCode}, this.CreateClientProfileOperationCompleted, userState);
        }
        
        private void OnCreateClientProfileOperationCompleted(object arg) {
            if ((this.CreateClientProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateClientProfileCompleted(this, new CreateClientProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/ProcessLinkserCreditCard", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcessLinkserCreditCard(string xml) {
            object[] results = this.Invoke("ProcessLinkserCreditCard", new object[] {
                        xml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessLinkserCreditCardAsync(string xml) {
            this.ProcessLinkserCreditCardAsync(xml, null);
        }
        
        /// <remarks/>
        public void ProcessLinkserCreditCardAsync(string xml, object userState) {
            if ((this.ProcessLinkserCreditCardOperationCompleted == null)) {
                this.ProcessLinkserCreditCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessLinkserCreditCardOperationCompleted);
            }
            this.InvokeAsync("ProcessLinkserCreditCard", new object[] {
                        xml}, this.ProcessLinkserCreditCardOperationCompleted, userState);
        }
        
        private void OnProcessLinkserCreditCardOperationCompleted(object arg) {
            if ((this.ProcessLinkserCreditCardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessLinkserCreditCardCompleted(this, new ProcessLinkserCreditCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetBookingFees", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetBookingFees(string strCurrency, System.DateTime dt, string strType) {
            object[] results = this.Invoke("GetBookingFees", new object[] {
                        strCurrency,
                        dt,
                        strType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetBookingFeesAsync(string strCurrency, System.DateTime dt, string strType) {
            this.GetBookingFeesAsync(strCurrency, dt, strType, null);
        }
        
        /// <remarks/>
        public void GetBookingFeesAsync(string strCurrency, System.DateTime dt, string strType, object userState) {
            if ((this.GetBookingFeesOperationCompleted == null)) {
                this.GetBookingFeesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBookingFeesOperationCompleted);
            }
            this.InvokeAsync("GetBookingFees", new object[] {
                        strCurrency,
                        dt,
                        strType}, this.GetBookingFeesOperationCompleted, userState);
        }
        
        private void OnGetBookingFeesOperationCompleted(object arg) {
            if ((this.GetBookingFeesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBookingFeesCompleted(this, new GetBookingFeesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetFees", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFees(string strCurrency, System.DateTime dt, string strAgency, string strType, string strClass, string strFareBasis, string strOrigin, string strDestination, string strFlightNumber, string strLanguage, bool bNoVat) {
            object[] results = this.Invoke("GetFees", new object[] {
                        strCurrency,
                        dt,
                        strAgency,
                        strType,
                        strClass,
                        strFareBasis,
                        strOrigin,
                        strDestination,
                        strFlightNumber,
                        strLanguage,
                        bNoVat});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFeesAsync(string strCurrency, System.DateTime dt, string strAgency, string strType, string strClass, string strFareBasis, string strOrigin, string strDestination, string strFlightNumber, string strLanguage, bool bNoVat) {
            this.GetFeesAsync(strCurrency, dt, strAgency, strType, strClass, strFareBasis, strOrigin, strDestination, strFlightNumber, strLanguage, bNoVat, null);
        }
        
        /// <remarks/>
        public void GetFeesAsync(string strCurrency, System.DateTime dt, string strAgency, string strType, string strClass, string strFareBasis, string strOrigin, string strDestination, string strFlightNumber, string strLanguage, bool bNoVat, object userState) {
            if ((this.GetFeesOperationCompleted == null)) {
                this.GetFeesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFeesOperationCompleted);
            }
            this.InvokeAsync("GetFees", new object[] {
                        strCurrency,
                        dt,
                        strAgency,
                        strType,
                        strClass,
                        strFareBasis,
                        strOrigin,
                        strDestination,
                        strFlightNumber,
                        strLanguage,
                        bNoVat}, this.GetFeesOperationCompleted, userState);
        }
        
        private void OnGetFeesOperationCompleted(object arg) {
            if ((this.GetFeesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFeesCompleted(this, new GetFeesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetFeesDefinition", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFeesDefinition(string strLanguage) {
            object[] results = this.Invoke("GetFeesDefinition", new object[] {
                        strLanguage});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFeesDefinitionAsync(string strLanguage) {
            this.GetFeesDefinitionAsync(strLanguage, null);
        }
        
        /// <remarks/>
        public void GetFeesDefinitionAsync(string strLanguage, object userState) {
            if ((this.GetFeesDefinitionOperationCompleted == null)) {
                this.GetFeesDefinitionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFeesDefinitionOperationCompleted);
            }
            this.InvokeAsync("GetFeesDefinition", new object[] {
                        strLanguage}, this.GetFeesDefinitionOperationCompleted, userState);
        }
        
        private void OnGetFeesDefinitionOperationCompleted(object arg) {
            if ((this.GetFeesDefinitionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFeesDefinitionCompleted(this, new GetFeesDefinitionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetClientSessionProfile", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetClientSessionProfile(string clientProfileId) {
            object[] results = this.Invoke("GetClientSessionProfile", new object[] {
                        clientProfileId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetClientSessionProfileAsync(string clientProfileId) {
            this.GetClientSessionProfileAsync(clientProfileId, null);
        }
        
        /// <remarks/>
        public void GetClientSessionProfileAsync(string clientProfileId, object userState) {
            if ((this.GetClientSessionProfileOperationCompleted == null)) {
                this.GetClientSessionProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClientSessionProfileOperationCompleted);
            }
            this.InvokeAsync("GetClientSessionProfile", new object[] {
                        clientProfileId}, this.GetClientSessionProfileOperationCompleted, userState);
        }
        
        private void OnGetClientSessionProfileOperationCompleted(object arg) {
            if ((this.GetClientSessionProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClientSessionProfileCompleted(this, new GetClientSessionProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetCorporateSessionProfile", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetCorporateSessionProfile(string clientId, string LastName) {
            object[] results = this.Invoke("GetCorporateSessionProfile", new object[] {
                        clientId,
                        LastName});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetCorporateSessionProfileAsync(string clientId, string LastName) {
            this.GetCorporateSessionProfileAsync(clientId, LastName, null);
        }
        
        /// <remarks/>
        public void GetCorporateSessionProfileAsync(string clientId, string LastName, object userState) {
            if ((this.GetCorporateSessionProfileOperationCompleted == null)) {
                this.GetCorporateSessionProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCorporateSessionProfileOperationCompleted);
            }
            this.InvokeAsync("GetCorporateSessionProfile", new object[] {
                        clientId,
                        LastName}, this.GetCorporateSessionProfileOperationCompleted, userState);
        }
        
        private void OnGetCorporateSessionProfileOperationCompleted(object arg) {
            if ((this.GetCorporateSessionProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCorporateSessionProfileCompleted(this, new GetCorporateSessionProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetClientPassenger", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetClientPassenger(string strBookingId, string strClientProfileId, string strClientNumber) {
            object[] results = this.Invoke("GetClientPassenger", new object[] {
                        strBookingId,
                        strClientProfileId,
                        strClientNumber});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetClientPassengerAsync(string strBookingId, string strClientProfileId, string strClientNumber) {
            this.GetClientPassengerAsync(strBookingId, strClientProfileId, strClientNumber, null);
        }
        
        /// <remarks/>
        public void GetClientPassengerAsync(string strBookingId, string strClientProfileId, string strClientNumber, object userState) {
            if ((this.GetClientPassengerOperationCompleted == null)) {
                this.GetClientPassengerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClientPassengerOperationCompleted);
            }
            this.InvokeAsync("GetClientPassenger", new object[] {
                        strBookingId,
                        strClientProfileId,
                        strClientNumber}, this.GetClientPassengerOperationCompleted, userState);
        }
        
        private void OnGetClientPassengerOperationCompleted(object arg) {
            if ((this.GetClientPassengerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClientPassengerCompleted(this, new GetClientPassengerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AgentAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.tiksystems.com/tikAeroWebService/GetTicketsIssued", RequestNamespace="http://www.tiksystems.com/TikAeroWebService", ResponseNamespace="http://www.tiksystems.com/TikAeroWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetTicketsIssued(System.DateTime dtReportFrom, System.DateTime dtReportTo, System.DateTime dtFlightFrom, System.DateTime dtFlightTo, string strOrigin, string strDestination, string strAgency, string strAirline, string strFlight) {
            object[] results = this.Invoke("GetTicketsIssued", new object[] {
                        dtReportFrom,
                        dtReportTo,
                        dtFlightFrom,
                        dtFlightTo,
                        strOrigin,
                        strDestination,
                        strAgency,
                        strAirline,
                        strFlight});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetTicketsIssuedAsync(System.DateTime dtReportFrom, System.DateTime dtReportTo, System.DateTime dtFlightFrom, System.DateTime dtFlightTo, string strOrigin, string strDestination, string strAgency, string strAirline, string strFlight) {
            this.GetTicketsIssuedAsync(dtReportFrom, dtReportTo, dtFlightFrom, dtFlightTo, strOrigin, strDestination, strAgency, strAirline, strFlight, null);
        }
        
        /// <remarks/>
        public void GetTicketsIssuedAsync(System.DateTime dtReportFrom, System.DateTime dtReportTo, System.DateTime dtFlightFrom, System.DateTime dtFlightTo, string strOrigin, string strDestination, string strAgency, string strAirline, string strFlight, object userState) {
            if ((this.GetTicketsIssuedOperationCompleted == null)) {
                this.GetTicketsIssuedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTicketsIssuedOperationCompleted);
            }
            this.InvokeAsync("GetTicketsIssued", new object[] {
                        dtReportFrom,
                        dtReportTo,
                        dtFlightFrom,
                        dtFlightTo,
                        strOrigin,
                        strDestination,
                        strAgency,
                        strAirline,
                        strFlight}, this.GetTicketsIssuedOperationCompleted, userState);
        }
        
        private void OnGetTicketsIssuedOperationCompleted(object arg) {
            if ((this.GetTicketsIssuedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTicketsIssuedCompleted(this, new GetTicketsIssuedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.tiksystems.com/TikAeroWebService")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.tiksystems.com/TikAeroWebService", IsNullable=false)]
    public partial class AgentAuthHeader : System.Web.Services.Protocols.SoapHeader {
        
        private string agencyCodeField;
        
        private string agencyPassportField;
        
        private string agencyCurrencyRcdField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public string AgencyCode {
            get {
                return this.agencyCodeField;
            }
            set {
                this.agencyCodeField = value;
            }
        }
        
        /// <remarks/>
        public string AgencyPassport {
            get {
                return this.agencyPassportField;
            }
            set {
                this.agencyPassportField = value;
            }
        }
        
        /// <remarks/>
        public string AgencyCurrencyRcd {
            get {
                return this.agencyCurrencyRcdField;
            }
            set {
                this.agencyCurrencyRcdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Passenger))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.tiksystems.com/TikAeroWebService")]
    public partial class BusinessObject {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1087.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.tiksystems.com/TikAeroWebService")]
    public partial class Passenger : BusinessObject {
        
        private System.Guid passenger_idField;
        
        private System.Guid booking_idField;
        
        private long client_numberField;
        
        private System.Guid passenger_profile_idField;
        
        private System.Guid client_profile_idField;
        
        private string passenger_status_rcdField;
        
        private string passenger_type_rcdField;
        
        private string lastnameField;
        
        private string firstnameField;
        
        private System.DateTime date_of_birthField;
        
        private string title_rcdField;
        
        private string gender_type_rcdField;
        
        private string nationality_rcdField;
        
        private string passport_numberField;
        
        private System.DateTime passport_issue_dateField;
        
        private System.DateTime passport_expiry_dateField;
        
        private string passport_issue_placeField;
        
        private string passport_birth_placeField;
        
        private string document_type_rcdField;
        
        private byte wheelchair_flagField;
        
        private System.Guid create_byField;
        
        private System.DateTime create_date_timeField;
        
        private System.Guid update_byField;
        
        private System.DateTime update_date_timeField;
        
        private decimal passenger_weightField;
        
        private string employee_numberField;
        
        private string vip_flagField;
        
        private string passenger_role_rcdField;
        
        private string member_level_rcdField;
        
        private string member_numberField;
        
        private string middlenameField;
        
        private string redress_numberField;
        
        private string passport_issue_country_rcdField;
        
        /// <remarks/>
        public System.Guid passenger_id {
            get {
                return this.passenger_idField;
            }
            set {
                this.passenger_idField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid booking_id {
            get {
                return this.booking_idField;
            }
            set {
                this.booking_idField = value;
            }
        }
        
        /// <remarks/>
        public long client_number {
            get {
                return this.client_numberField;
            }
            set {
                this.client_numberField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid passenger_profile_id {
            get {
                return this.passenger_profile_idField;
            }
            set {
                this.passenger_profile_idField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid client_profile_id {
            get {
                return this.client_profile_idField;
            }
            set {
                this.client_profile_idField = value;
            }
        }
        
        /// <remarks/>
        public string passenger_status_rcd {
            get {
                return this.passenger_status_rcdField;
            }
            set {
                this.passenger_status_rcdField = value;
            }
        }
        
        /// <remarks/>
        public string passenger_type_rcd {
            get {
                return this.passenger_type_rcdField;
            }
            set {
                this.passenger_type_rcdField = value;
            }
        }
        
        /// <remarks/>
        public string lastname {
            get {
                return this.lastnameField;
            }
            set {
                this.lastnameField = value;
            }
        }
        
        /// <remarks/>
        public string firstname {
            get {
                return this.firstnameField;
            }
            set {
                this.firstnameField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime date_of_birth {
            get {
                return this.date_of_birthField;
            }
            set {
                this.date_of_birthField = value;
            }
        }
        
        /// <remarks/>
        public string title_rcd {
            get {
                return this.title_rcdField;
            }
            set {
                this.title_rcdField = value;
            }
        }
        
        /// <remarks/>
        public string gender_type_rcd {
            get {
                return this.gender_type_rcdField;
            }
            set {
                this.gender_type_rcdField = value;
            }
        }
        
        /// <remarks/>
        public string nationality_rcd {
            get {
                return this.nationality_rcdField;
            }
            set {
                this.nationality_rcdField = value;
            }
        }
        
        /// <remarks/>
        public string passport_number {
            get {
                return this.passport_numberField;
            }
            set {
                this.passport_numberField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime passport_issue_date {
            get {
                return this.passport_issue_dateField;
            }
            set {
                this.passport_issue_dateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime passport_expiry_date {
            get {
                return this.passport_expiry_dateField;
            }
            set {
                this.passport_expiry_dateField = value;
            }
        }
        
        /// <remarks/>
        public string passport_issue_place {
            get {
                return this.passport_issue_placeField;
            }
            set {
                this.passport_issue_placeField = value;
            }
        }
        
        /// <remarks/>
        public string passport_birth_place {
            get {
                return this.passport_birth_placeField;
            }
            set {
                this.passport_birth_placeField = value;
            }
        }
        
        /// <remarks/>
        public string document_type_rcd {
            get {
                return this.document_type_rcdField;
            }
            set {
                this.document_type_rcdField = value;
            }
        }
        
        /// <remarks/>
        public byte wheelchair_flag {
            get {
                return this.wheelchair_flagField;
            }
            set {
                this.wheelchair_flagField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid create_by {
            get {
                return this.create_byField;
            }
            set {
                this.create_byField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime create_date_time {
            get {
                return this.create_date_timeField;
            }
            set {
                this.create_date_timeField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid update_by {
            get {
                return this.update_byField;
            }
            set {
                this.update_byField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime update_date_time {
            get {
                return this.update_date_timeField;
            }
            set {
                this.update_date_timeField = value;
            }
        }
        
        /// <remarks/>
        public decimal passenger_weight {
            get {
                return this.passenger_weightField;
            }
            set {
                this.passenger_weightField = value;
            }
        }
        
        /// <remarks/>
        public string employee_number {
            get {
                return this.employee_numberField;
            }
            set {
                this.employee_numberField = value;
            }
        }
        
        /// <remarks/>
        public string vip_flag {
            get {
                return this.vip_flagField;
            }
            set {
                this.vip_flagField = value;
            }
        }
        
        /// <remarks/>
        public string passenger_role_rcd {
            get {
                return this.passenger_role_rcdField;
            }
            set {
                this.passenger_role_rcdField = value;
            }
        }
        
        /// <remarks/>
        public string member_level_rcd {
            get {
                return this.member_level_rcdField;
            }
            set {
                this.member_level_rcdField = value;
            }
        }
        
        /// <remarks/>
        public string member_number {
            get {
                return this.member_numberField;
            }
            set {
                this.member_numberField = value;
            }
        }
        
        /// <remarks/>
        public string middlename {
            get {
                return this.middlenameField;
            }
            set {
                this.middlenameField = value;
            }
        }
        
        /// <remarks/>
        public string redress_number {
            get {
                return this.redress_numberField;
            }
            set {
                this.redress_numberField = value;
            }
        }
        
        /// <remarks/>
        public string passport_issue_country_rcd {
            get {
                return this.passport_issue_country_rcdField;
            }
            set {
                this.passport_issue_country_rcdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void BoardingClassReadCompletedEventHandler(object sender, BoardingClassReadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BoardingClassReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BoardingClassReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void RemarkAddCompletedEventHandler(object sender, RemarkAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemarkAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemarkAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetAvailabilityCompletedEventHandler(object sender, GetAvailabilityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailabilityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailabilityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string bookingId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string Origin {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string Destination {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public System.DateTime DateFrom {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public System.DateTime DateTo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public System.DateTime DateBooking {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public short Adult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((short)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public short Child {
            get {
                this.RaiseExceptionIfNecessary();
                return ((short)(this.results[8]));
            }
        }
        
        /// <remarks/>
        public short Infant {
            get {
                this.RaiseExceptionIfNecessary();
                return ((short)(this.results[9]));
            }
        }
        
        /// <remarks/>
        public short Other {
            get {
                this.RaiseExceptionIfNecessary();
                return ((short)(this.results[10]));
            }
        }
        
        /// <remarks/>
        public string OtherPassengerType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[11]));
            }
        }
        
        /// <remarks/>
        public string BoardingClass {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[12]));
            }
        }
        
        /// <remarks/>
        public string BookingClass {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[13]));
            }
        }
        
        /// <remarks/>
        public string DayTimeIndicator {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[14]));
            }
        }
        
        /// <remarks/>
        public string AgencyCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[15]));
            }
        }
        
        /// <remarks/>
        public string CurrencyCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[16]));
            }
        }
        
        /// <remarks/>
        public string FlightId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[17]));
            }
        }
        
        /// <remarks/>
        public string FareId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[18]));
            }
        }
        
        /// <remarks/>
        public double MaxAmount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[19]));
            }
        }
        
        /// <remarks/>
        public bool NonStopOnly {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[20]));
            }
        }
        
        /// <remarks/>
        public bool IncludeDeparted {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[21]));
            }
        }
        
        /// <remarks/>
        public bool IncludeCancelled {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[22]));
            }
        }
        
        /// <remarks/>
        public bool IncludeWaitlisted {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[23]));
            }
        }
        
        /// <remarks/>
        public bool IncludeSoldOut {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[24]));
            }
        }
        
        /// <remarks/>
        public bool Refundable {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[25]));
            }
        }
        
        /// <remarks/>
        public bool GroupFares {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[26]));
            }
        }
        
        /// <remarks/>
        public bool ItFaresOnly {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[27]));
            }
        }
        
        /// <remarks/>
        public string PromotionCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[28]));
            }
        }
        
        /// <remarks/>
        public string FareType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[29]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetAvailabilityWithFareLogicCompletedEventHandler(object sender, GetAvailabilityWithFareLogicCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailabilityWithFareLogicCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailabilityWithFareLogicCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string FlightOutboundXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string FlightReturnXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string Origin {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string Destination {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public System.DateTime ReturnDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void ReadFormOfPaymentCompletedEventHandler(object sender, ReadFormOfPaymentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReadFormOfPaymentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReadFormOfPaymentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetAirportTimezoneCompletedEventHandler(object sender, GetAirportTimezoneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAirportTimezoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAirportTimezoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetTicketsUsedCompletedEventHandler(object sender, GetTicketsUsedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTicketsUsedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTicketsUsedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetTicketsRefundedCompletedEventHandler(object sender, GetTicketsRefundedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTicketsRefundedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTicketsRefundedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetTicketsExpiredCompletedEventHandler(object sender, GetTicketsExpiredCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTicketsExpiredCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTicketsExpiredCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetTicketsCancelledCompletedEventHandler(object sender, GetTicketsCancelledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTicketsCancelledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTicketsCancelledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetTicketsNotFlownCompletedEventHandler(object sender, GetTicketsNotFlownCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTicketsNotFlownCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTicketsNotFlownCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetPaymentApprovalsCompletedEventHandler(object sender, GetPaymentApprovalsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPaymentApprovalsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPaymentApprovalsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void TicketReadCompletedEventHandler(object sender, TicketReadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TicketReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TicketReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strBookingId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string strPassengerId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string strSegmentId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string strTicketNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string xmlTaxes {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public bool bReadOnly {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public bool bReturnTax {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[7]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetCashbookPaymentsCompletedEventHandler(object sender, GetCashbookPaymentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCashbookPaymentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCashbookPaymentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetCashbookPaymentsSummaryCompletedEventHandler(object sender, GetCashbookPaymentsSummaryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCashbookPaymentsSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCashbookPaymentsSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetCashbookChargesCompletedEventHandler(object sender, GetCashbookChargesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCashbookChargesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCashbookChargesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetBookingFeeAccountedCompletedEventHandler(object sender, GetBookingFeeAccountedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBookingFeeAccountedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBookingFeeAccountedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetBookingFeeBookedCompletedEventHandler(object sender, GetBookingFeeBookedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBookingFeeBookedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBookingFeeBookedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetBookingFeeVoidedCompletedEventHandler(object sender, GetBookingFeeVoidedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBookingFeeVoidedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBookingFeeVoidedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void CreditCardPaymentCompletedEventHandler(object sender, CreditCardPaymentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreditCardPaymentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreditCardPaymentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strCCNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string strTransType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string strTransStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public System.DateTime dtFrom {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public System.DateTime dtTo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string strCCType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string strAgency {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetServiceFeesCompletedEventHandler(object sender, GetServiceFeesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceFeesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceFeesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strOrigin {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string strDestination {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string strCurrency {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string strAgency {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string strServiceGroup {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public System.DateTime dtFee {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetServiceFeesByGroupsCompletedEventHandler(object sender, GetServiceFeesByGroupsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceFeesByGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceFeesByGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetBookingsThisUserCompletedEventHandler(object sender, GetBookingsThisUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBookingsThisUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBookingsThisUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strAgencyCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string strUserId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string strAirline {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string strFlightNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public System.DateTime dtFlightFrom {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public System.DateTime dtFlightTo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string strRecordLocator {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string strOrigin {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
        
        /// <remarks/>
        public string strDestination {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[9]));
            }
        }
        
        /// <remarks/>
        public string strPassengerName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[10]));
            }
        }
        
        /// <remarks/>
        public string strSeatNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[11]));
            }
        }
        
        /// <remarks/>
        public string strTicketNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[12]));
            }
        }
        
        /// <remarks/>
        public string strPhoneNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[13]));
            }
        }
        
        /// <remarks/>
        public System.DateTime dtCreateFrom {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[14]));
            }
        }
        
        /// <remarks/>
        public System.DateTime dtCreateTo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[15]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetPassengerProfileSegmentsCompletedEventHandler(object sender, GetPassengerProfileSegmentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPassengerProfileSegmentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPassengerProfileSegmentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strPassengerProfileId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetOutstandingCompletedEventHandler(object sender, GetOutstandingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOutstandingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOutstandingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetCorporateAgencyClientsCompletedEventHandler(object sender, GetCorporateAgencyClientsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCorporateAgencyClientsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCorporateAgencyClientsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string AgencyCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void InitializeUserAccountIDCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void AgencyRegistrationInsertCompletedEventHandler(object sender, AgencyRegistrationInsertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AgencyRegistrationInsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AgencyRegistrationInsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void QueueMailCompletedEventHandler(object sender, QueueMailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueueMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueueMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetTransactionCompletedEventHandler(object sender, GetTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void PassengerRoleReadCompletedEventHandler(object sender, PassengerRoleReadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PassengerRoleReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PassengerRoleReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetAgencyCommissionDetailsCompletedEventHandler(object sender, GetAgencyCommissionDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAgencyCommissionDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAgencyCommissionDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetAgencyTicketSalesCompletedEventHandler(object sender, GetAgencyTicketSalesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAgencyTicketSalesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAgencyTicketSalesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void MemberLevelReadCompletedEventHandler(object sender, MemberLevelReadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MemberLevelReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MemberLevelReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void CheckUniqueMailAddressCompletedEventHandler(object sender, CheckUniqueMailAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckUniqueMailAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckUniqueMailAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetAgencyAccountTransactionsCompletedEventHandler(object sender, GetAgencyAccountTransactionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAgencyAccountTransactionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAgencyAccountTransactionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void SaveBookingCreditCardCompletedEventHandler(object sender, SaveBookingCreditCardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveBookingCreditCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveBookingCreditCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void SaveBookingPaymentCompletedEventHandler(object sender, SaveBookingPaymentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveBookingPaymentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveBookingPaymentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void SavePaymentCompletedEventHandler(object sender, SavePaymentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SavePaymentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SavePaymentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetAgencyAccountTopUpCompletedEventHandler(object sender, GetAgencyAccountTopUpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAgencyAccountTopUpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAgencyAccountTopUpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetAgencyAccountBalanceCompletedEventHandler(object sender, GetAgencyAccountBalanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAgencyAccountBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAgencyAccountBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void AdjustSubAgencyAccountBalanceCompletedEventHandler(object sender, AdjustSubAgencyAccountBalanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdjustSubAgencyAccountBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdjustSubAgencyAccountBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void AddNewAgencyCompletedEventHandler(object sender, AddNewAgencyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddNewAgencyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddNewAgencyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void AgencyReadCompletedEventHandler(object sender, AgencyReadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AgencyReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AgencyReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void ExchangeRateReadCompletedEventHandler(object sender, ExchangeRateReadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExchangeRateReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExchangeRateReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public double Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void UpdateAgencyCompletedEventHandler(object sender, UpdateAgencyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateAgencyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateAgencyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void AgencyAccountAddCompletedEventHandler(object sender, AgencyAccountAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AgencyAccountAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AgencyAccountAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void AgencyAccountVoidCompletedEventHandler(object sender, AgencyAccountVoidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AgencyAccountVoidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AgencyAccountVoidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void ExternalPaymentListAgencyTopUpCompletedEventHandler(object sender, ExternalPaymentListAgencyTopUpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExternalPaymentListAgencyTopUpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExternalPaymentListAgencyTopUpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void UpdateApprovalCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void SingleFlightQuoteSummaryCompletedEventHandler(object sender, SingleFlightQuoteSummaryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SingleFlightQuoteSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SingleFlightQuoteSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetRecordLocatorCompletedEventHandler(object sender, GetRecordLocatorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRecordLocatorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRecordLocatorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strRecordLocator {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int iBookingNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void SegmentFeeCompletedEventHandler(object sender, SegmentFeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SegmentFeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SegmentFeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void SpecialServiceFeeCompletedEventHandler(object sender, SpecialServiceFeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SpecialServiceFeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SpecialServiceFeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void SpecialServiceReadCompletedEventHandler(object sender, SpecialServiceReadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SpecialServiceReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SpecialServiceReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void InsertPaymentApprovalCompletedEventHandler(object sender, InsertPaymentApprovalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertPaymentApprovalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertPaymentApprovalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void UpdatePaymentApprovalCompletedEventHandler(object sender, UpdatePaymentApprovalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePaymentApprovalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePaymentApprovalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetTourOperatorsCompletedEventHandler(object sender, GetTourOperatorsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTourOperatorsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTourOperatorsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetVendorTourOperatorCompletedEventHandler(object sender, GetVendorTourOperatorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVendorTourOperatorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVendorTourOperatorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetTourOperatorCodeMappingReadCompletedEventHandler(object sender, GetTourOperatorCodeMappingReadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTourOperatorCodeMappingReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTourOperatorCodeMappingReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetSessionlessFlightAvailabilityCompletedEventHandler(object sender, GetSessionlessFlightAvailabilityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSessionlessFlightAvailabilityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSessionlessFlightAvailabilityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetSessionlessLowFareFinderCompletedEventHandler(object sender, GetSessionlessLowFareFinderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSessionlessLowFareFinderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSessionlessLowFareFinderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetSessionlessAirportOriginsCompletedEventHandler(object sender, GetSessionlessAirportOriginsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSessionlessAirportOriginsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSessionlessAirportOriginsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetSessionlessAirportDestinationsCompletedEventHandler(object sender, GetSessionlessAirportDestinationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSessionlessAirportDestinationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSessionlessAirportDestinationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetSessionlessCurrenciesCompletedEventHandler(object sender, GetSessionlessCurrenciesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSessionlessCurrenciesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSessionlessCurrenciesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetSessionlessCountryCompletedEventHandler(object sender, GetSessionlessCountryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSessionlessCountryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSessionlessCountryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void ReleaseSessionlessFlightInventorySessionCompletedEventHandler(object sender, ReleaseSessionlessFlightInventorySessionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReleaseSessionlessFlightInventorySessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReleaseSessionlessFlightInventorySessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void SessionlessSingleFlightQuoteSummaryCompletedEventHandler(object sender, SessionlessSingleFlightQuoteSummaryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SessionlessSingleFlightQuoteSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SessionlessSingleFlightQuoteSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetSessionlessCompactFlightAvailabilityCompletedEventHandler(object sender, GetSessionlessCompactFlightAvailabilityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSessionlessCompactFlightAvailabilityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSessionlessCompactFlightAvailabilityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetSessionlessBinRangeSearchCompletedEventHandler(object sender, GetSessionlessBinRangeSearchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSessionlessBinRangeSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSessionlessBinRangeSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetSessionlessFeesDefinitionCompletedEventHandler(object sender, GetSessionlessFeesDefinitionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSessionlessFeesDefinitionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSessionlessFeesDefinitionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void SessionlessExternalPaymentAddPaymentCompletedEventHandler(object sender, SessionlessExternalPaymentAddPaymentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SessionlessExternalPaymentAddPaymentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SessionlessExternalPaymentAddPaymentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetBaggageFeeOptionsCompletedEventHandler(object sender, GetBaggageFeeOptionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBaggageFeeOptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBaggageFeeOptionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void ExternalPaymentAddPaymentCompletedEventHandler(object sender, ExternalPaymentAddPaymentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExternalPaymentAddPaymentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExternalPaymentAddPaymentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void SaveBookingMultipleFormOfPaymentCompletedEventHandler(object sender, SaveBookingMultipleFormOfPaymentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveBookingMultipleFormOfPaymentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveBookingMultipleFormOfPaymentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetAvailabiletyCompletedEventHandler(object sender, GetAvailabiletyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailabiletyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailabiletyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void SpecialServiceInventoryReadCompletedEventHandler(object sender, SpecialServiceInventoryReadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SpecialServiceInventoryReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SpecialServiceInventoryReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void AddFeeCompletedEventHandler(object sender, AddFeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddFeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddFeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetPassengerRoleCompletedEventHandler(object sender, GetPassengerRoleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPassengerRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPassengerRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetSpecialServicesCompletedEventHandler(object sender, GetSpecialServicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSpecialServicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSpecialServicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void ProcessRefundVoucherCompletedEventHandler(object sender, ProcessRefundVoucherCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessRefundVoucherCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessRefundVoucherCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void ViewBookingChangeCompletedEventHandler(object sender, ViewBookingChangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ViewBookingChangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ViewBookingChangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void InitiateBookingChangeCompletedEventHandler(object sender, InitiateBookingChangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateBookingChangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateBookingChangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void InitiateBookingChangeXMLCompletedEventHandler(object sender, InitiateBookingChangeXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitiateBookingChangeXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitiateBookingChangeXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetActiveBookingsCompletedEventHandler(object sender, GetActiveBookingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActiveBookingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActiveBookingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetFlownBookingsCompletedEventHandler(object sender, GetFlownBookingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFlownBookingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFlownBookingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetBookingHistorysListCompletedEventHandler(object sender, GetBookingHistorysListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBookingHistorysListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBookingHistorysListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void UpdatePassengerCheckinDetailsCompletedEventHandler(object sender, UpdatePassengerCheckinDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePassengerCheckinDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePassengerCheckinDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetBookingClassesCompletedEventHandler(object sender, GetBookingClassesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBookingClassesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBookingClassesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetFlightsFLIFOCompletedEventHandler(object sender, GetFlightsFLIFOCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFlightsFLIFOCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFlightsFLIFOCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void LowFareFinderAllowCompletedEventHandler(object sender, LowFareFinderAllowCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LowFareFinderAllowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LowFareFinderAllowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetBookingHistoryCompletedEventHandler(object sender, GetBookingHistoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBookingHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBookingHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetBinRangeSearchCompletedEventHandler(object sender, GetBinRangeSearchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBinRangeSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBinRangeSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetFlightDailyCountCompletedEventHandler(object sender, GetFlightDailyCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFlightDailyCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFlightDailyCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetFlightDailyCountXMLCompletedEventHandler(object sender, GetFlightDailyCountXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFlightDailyCountXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFlightDailyCountXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void AccuralQuoteCompletedEventHandler(object sender, AccuralQuoteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AccuralQuoteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AccuralQuoteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void AgencyDetailsCompletedEventHandler(object sender, AgencyDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AgencyDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AgencyDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string passport {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetActivitiesCompletedEventHandler(object sender, GetActivitiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActivitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActivitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void ValidCreditCardCompletedEventHandler(object sender, ValidCreditCardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidCreditCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidCreditCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void ValidCreditCardAdjustCompletedEventHandler(object sender, ValidCreditCardAdjustCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidCreditCardAdjustCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidCreditCardAdjustCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void CompleteRemarkCompletedEventHandler(object sender, CompleteRemarkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompleteRemarkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompleteRemarkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void ReleaseFlightInventorySessionCompletedEventHandler(object sender, ReleaseFlightInventorySessionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReleaseFlightInventorySessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReleaseFlightInventorySessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetTicketSalesCompletedEventHandler(object sender, GetTicketSalesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTicketSalesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTicketSalesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetBookingsCompletedEventHandler(object sender, GetBookingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBookingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBookingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void BookingLogonCompletedEventHandler(object sender, BookingLogonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BookingLogonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BookingLogonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string RecordLocator {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string NameOrPhone {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetClientCompletedEventHandler(object sender, GetClientCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void TravelAgentLogonCompletedEventHandler(object sender, TravelAgentLogonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TravelAgentLogonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TravelAgentLogonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void ClientLogonCompletedEventHandler(object sender, ClientLogonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ClientLogonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ClientLogonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetFormOfPaymentsCompletedEventHandler(object sender, GetFormOfPaymentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFormOfPaymentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFormOfPaymentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetFormOfPaymentSubTypesCompletedEventHandler(object sender, GetFormOfPaymentSubTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFormOfPaymentSubTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFormOfPaymentSubTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetPaymentSubTypesCompletedEventHandler(object sender, GetPaymentSubTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPaymentSubTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPaymentSubTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetFormOfPaymentSubtypeFeesCompletedEventHandler(object sender, GetFormOfPaymentSubtypeFeesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFormOfPaymentSubtypeFeesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFormOfPaymentSubtypeFeesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetAgencySessionProfileCompletedEventHandler(object sender, GetAgencySessionProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAgencySessionProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAgencySessionProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetPassengerTitlesCompletedEventHandler(object sender, GetPassengerTitlesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPassengerTitlesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPassengerTitlesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetDocumentTypeCompletedEventHandler(object sender, GetDocumentTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetBookingCompletedEventHandler(object sender, GetBookingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBookingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBookingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void AddInfantCompletedEventHandler(object sender, AddInfantCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddInfantCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddInfantCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void CalculateBookingCreateFeesCompletedEventHandler(object sender, CalculateBookingCreateFeesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CalculateBookingCreateFeesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CalculateBookingCreateFeesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void CalculateBookingChangeFeesCompletedEventHandler(object sender, CalculateBookingChangeFeesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CalculateBookingChangeFeesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CalculateBookingChangeFeesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void CalculateNameChangeFeesCompletedEventHandler(object sender, CalculateNameChangeFeesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CalculateNameChangeFeesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CalculateNameChangeFeesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void CalculateSeatAssignmentFeesCompletedEventHandler(object sender, CalculateSeatAssignmentFeesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CalculateSeatAssignmentFeesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CalculateSeatAssignmentFeesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void CalculateSpecialServiceFeesCompletedEventHandler(object sender, CalculateSpecialServiceFeesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CalculateSpecialServiceFeesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CalculateSpecialServiceFeesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void CalculateNewFeesCompletedEventHandler(object sender, CalculateNewFeesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CalculateNewFeesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CalculateNewFeesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void TestWebServiceCompletedEventHandler(object sender, TestWebServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestWebServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestWebServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetItineraryCompletedEventHandler(object sender, GetItineraryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetItineraryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetItineraryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetSeatMapCompletedEventHandler(object sender, GetSeatMapCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSeatMapCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSeatMapCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetSeatMapLayoutCompletedEventHandler(object sender, GetSeatMapLayoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSeatMapLayoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSeatMapLayoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetPassengerDetailsCompletedEventHandler(object sender, GetPassengerDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPassengerDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPassengerDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void CheckInSaveCompletedEventHandler(object sender, CheckInSaveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckInSaveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckInSaveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void SaveBookingHeaderCompletedEventHandler(object sender, SaveBookingHeaderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveBookingHeaderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveBookingHeaderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetCountryCompletedEventHandler(object sender, GetCountryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCountryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCountryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetLanguagesCompletedEventHandler(object sender, GetLanguagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLanguagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLanguagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetCurrenciesCompletedEventHandler(object sender, GetCurrenciesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCurrenciesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCurrenciesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetRemarkTypesCompletedEventHandler(object sender, GetRemarkTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRemarkTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRemarkTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void PaymentSaveCompletedEventHandler(object sender, PaymentSaveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PaymentSaveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PaymentSaveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void PaymentSaveAdjustCompletedEventHandler(object sender, PaymentSaveAdjustCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PaymentSaveAdjustCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PaymentSaveAdjustCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void SaveBookingCompletedEventHandler(object sender, SaveBookingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveBookingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveBookingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void SplitBookingCompletedEventHandler(object sender, SplitBookingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SplitBookingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SplitBookingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void AddFlightCompletedEventHandler(object sender, AddFlightCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddFlightCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddFlightCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string FareId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string BoardingClass {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string BookingClass {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void ChangeSegmentAddFlightCompletedEventHandler(object sender, ChangeSegmentAddFlightCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeSegmentAddFlightCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeSegmentAddFlightCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetCompactFlightAvailabilityCompletedEventHandler(object sender, GetCompactFlightAvailabilityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCompactFlightAvailabilityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCompactFlightAvailabilityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetFlightAvailabilityCompletedEventHandler(object sender, GetFlightAvailabilityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFlightAvailabilityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFlightAvailabilityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetLowFareFinderCompletedEventHandler(object sender, GetLowFareFinderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLowFareFinderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLowFareFinderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void ReturnAirportDestinationsCompletedEventHandler(object sender, ReturnAirportDestinationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReturnAirportDestinationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReturnAirportDestinationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetAirlinesCompletedEventHandler(object sender, GetAirlinesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAirlinesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAirlinesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void ReturnAirportOriginsCompletedEventHandler(object sender, ReturnAirportOriginsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReturnAirportOriginsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReturnAirportOriginsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetActivityTypesCompletedEventHandler(object sender, GetActivityTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActivityTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActivityTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void SegmentCancelCompletedEventHandler(object sender, SegmentCancelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SegmentCancelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SegmentCancelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool includeRefundableOnly {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public System.DateTime noShowSegmentDateTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void ReturnItineraryCompletedEventHandler(object sender, ReturnItineraryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReturnItineraryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReturnItineraryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetUserListCompletedEventHandler(object sender, GetUserListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void UserReadCompletedEventHandler(object sender, UserReadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetVouchersCompletedEventHandler(object sender, GetVouchersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVouchersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVouchersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool bWrite {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void CalculateExchangeCompletedEventHandler(object sender, CalculateExchangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CalculateExchangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CalculateExchangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public double Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetBookingSegmentCheckInCompletedEventHandler(object sender, GetBookingSegmentCheckInCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBookingSegmentCheckInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBookingSegmentCheckInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void BoardPassengersCompletedEventHandler(object sender, BoardPassengersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BoardPassengersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BoardPassengersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void OffLoadPassengerCompletedEventHandler(object sender, OffLoadPassengerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OffLoadPassengerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OffLoadPassengerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void UserSaveCompletedEventHandler(object sender, UserSaveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserSaveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserSaveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void NewUserSaveCompletedEventHandler(object sender, NewUserSaveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NewUserSaveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NewUserSaveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void ClientSaveCompletedEventHandler(object sender, ClientSaveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ClientSaveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ClientSaveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string XmlClient {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string XmlPassenger {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string XmlBookingRemark {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void AddClientPassengerListCompletedEventHandler(object sender, AddClientPassengerListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddClientPassengerListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddClientPassengerListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string XmlPassenger {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void ClientReadCompletedEventHandler(object sender, ClientReadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ClientReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ClientReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void CreateClientProfileCompletedEventHandler(object sender, CreateClientProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateClientProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateClientProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string XmlClient {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string xmlUser {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string XmlPassenger {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void ProcessLinkserCreditCardCompletedEventHandler(object sender, ProcessLinkserCreditCardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessLinkserCreditCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessLinkserCreditCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetBookingFeesCompletedEventHandler(object sender, GetBookingFeesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBookingFeesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBookingFeesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetFeesCompletedEventHandler(object sender, GetFeesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFeesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFeesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetFeesDefinitionCompletedEventHandler(object sender, GetFeesDefinitionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFeesDefinitionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFeesDefinitionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetClientSessionProfileCompletedEventHandler(object sender, GetClientSessionProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClientSessionProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClientSessionProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetCorporateSessionProfileCompletedEventHandler(object sender, GetCorporateSessionProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCorporateSessionProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCorporateSessionProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetClientPassengerCompletedEventHandler(object sender, GetClientPassengerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClientPassengerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClientPassengerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void GetTicketsIssuedCompletedEventHandler(object sender, GetTicketsIssuedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTicketsIssuedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTicketsIssuedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591